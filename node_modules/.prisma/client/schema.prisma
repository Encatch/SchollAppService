generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Class {
  id            Int                @id @default(autoincrement())
  name          String
  sections      Section[]
  students      Student[]
  subjects      Subject[]
  timePeriods   TimePeriod[]
  feeStructures FeeStructure[]
  marksheets    MarksSheetMaster[]
}

model Section {
  id          Int                @id @default(autoincrement())
  name        String
  class       Class              @relation(fields: [classId], references: [id])
  classId     Int
  students    Student[]
  timePeriods TimePeriod[]
  marksheets  MarksSheetMaster[]
}

model Student {
  id                  Int             @id @default(autoincrement())
  username            String          @unique
  password            String
  firstName           String
  lastName            String
  genderId            Int? // Foreign key to MasterDropdown
  gender              MasterDropdown? @relation(fields: [genderId], references: [id]) // Relation to MasterDropdown
  fatherName          String?
  motherName          String?
  fatherOccupation    String?
  motherOccupation    String?
  mobileNumber        String?
  motherMobileNumber  String?
  fatherEmail         String?
  address             String?
  isTransportRequired Boolean?
  class               Class           @relation(fields: [classId], references: [id])
  classId             Int
  section             Section         @relation(fields: [sectionId], references: [id])
  sectionId           Int
  feeDetails          FeeDetails?
}

model FeeDetails {
  id              Int     @id @default(autoincrement())
  student         Student @relation(fields: [studentId], references: [id])
  studentId       Int     @unique
  totalFee        Float
  discountAmount  Float
  totalTerms      Int
  remainingAmount Float
  terms           Term[]
}

model Term {
  id         Int        @id @default(autoincrement())
  feeDetail  FeeDetails @relation(fields: [feeId], references: [id])
  feeId      Int
  termNumber Int
  amount     Float
  dueDate    DateTime
  isPaid     Boolean
}

model Subject {
  id          Int            @id @default(autoincrement())
  name        String
  code        String? // Optional subject code
  class       Class          @relation(fields: [classId], references: [id])
  classId     Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  timePeriods TimePeriod[]
  marksheets  MarksSubject[]
}

model MasterDropdown {
  id                 Int       @id @default(autoincrement())
  type               String
  value              String
  students           Student[] // Backward relation to Student
  genderStaff        Staff[]   @relation("StaffGender")
  qualificationStaff Staff[]   @relation("StaffQualification")
  departmentStaff    Staff[]   @relation("StaffDepartment")
  designationStaff   Staff[]   @relation("StaffDesignation")
  staffTypeStaff     Staff[]   @relation("StaffType")
  feeItems           FeeItem[]
}

model Staff {
  id                  Int             @id @default(autoincrement())
  firstName           String
  lastName            String
  genderId            Int?
  gender              MasterDropdown? @relation("StaffGender", fields: [genderId], references: [id])
  qualificationId     Int?
  qualification       MasterDropdown? @relation("StaffQualification", fields: [qualificationId], references: [id])
  departmentId        Int?
  department          MasterDropdown? @relation("StaffDepartment", fields: [departmentId], references: [id])
  designationId       Int?
  designation         MasterDropdown? @relation("StaffDesignation", fields: [designationId], references: [id])
  staffTypeId         Int?
  staffType           MasterDropdown? @relation("StaffType", fields: [staffTypeId], references: [id])
  experience          String?
  mobileNumber        String?
  email               String?         @unique
  username            String          @unique
  password            String
  salary              Float?
  isActive            Boolean         @default(true)
  isTransportRequired Boolean?        @default(false)
  timePeriods         TimePeriod[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model TimePeriod {
  id              Int      @id @default(autoincrement())
  periodName      String
  subject         Subject  @relation(fields: [subjectId], references: [id])
  subjectId       Int
  class           Class    @relation(fields: [classId], references: [id])
  classId         Int
  section         Section  @relation(fields: [sectionId], references: [id])
  sectionId       Int
  startDate       DateTime
  endDate         DateTime
  startTime       String
  endTime         String
  assignedTeacher Staff    @relation(fields: [teacherId], references: [id])
  teacherId       Int
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Exams {
  id       Int    @id @default(autoincrement())
  examName String
  remarks  String
}

model FeeStructure {
  id            Int       @id @default(autoincrement())
  class         Class     @relation(fields: [classId], references: [id])
  classId       Int
  academicYear  String
  numberOfTerms Int
  isActive      Boolean   @default(true)
  totalAmount   Float     @default(0)
  feeItems      FeeItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FeeItem {
  id             Int            @id @default(autoincrement())
  feeStructure   FeeStructure   @relation(fields: [feeStructureId], references: [id])
  feeStructureId Int
  feeType        MasterDropdown @relation(fields: [feeTypeId], references: [id])
  feeTypeId      Int
  feeName        String
  amount         Float
  description    String?
}

model MarksSheetMaster {
  id        Int            @id @default(autoincrement())
  classId   Int
  sectionId Int
  class     Class          @relation(fields: [classId], references: [id])
  section   Section        @relation(fields: [sectionId], references: [id])
  subjects  MarksSubject[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model MarksSubject {
  id          Int              @id @default(autoincrement())
  marksheetId Int
  subjectId   Int
  maxMarks    Int
  passMarks   Int
  remark      String?
  marksheet   MarksSheetMaster @relation(fields: [marksheetId], references: [id])
  subject     Subject          @relation(fields: [subjectId], references: [id])
}
