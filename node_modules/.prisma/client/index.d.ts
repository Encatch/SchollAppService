
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model Section
 * 
 */
export type Section = $Result.DefaultSelection<Prisma.$SectionPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model FeeDetails
 * 
 */
export type FeeDetails = $Result.DefaultSelection<Prisma.$FeeDetailsPayload>
/**
 * Model Term
 * 
 */
export type Term = $Result.DefaultSelection<Prisma.$TermPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model MasterDropdown
 * 
 */
export type MasterDropdown = $Result.DefaultSelection<Prisma.$MasterDropdownPayload>
/**
 * Model Staff
 * 
 */
export type Staff = $Result.DefaultSelection<Prisma.$StaffPayload>
/**
 * Model TimePeriod
 * 
 */
export type TimePeriod = $Result.DefaultSelection<Prisma.$TimePeriodPayload>
/**
 * Model Exams
 * 
 */
export type Exams = $Result.DefaultSelection<Prisma.$ExamsPayload>
/**
 * Model FeeStructure
 * 
 */
export type FeeStructure = $Result.DefaultSelection<Prisma.$FeeStructurePayload>
/**
 * Model FeeItem
 * 
 */
export type FeeItem = $Result.DefaultSelection<Prisma.$FeeItemPayload>
/**
 * Model MarksSheetMaster
 * 
 */
export type MarksSheetMaster = $Result.DefaultSelection<Prisma.$MarksSheetMasterPayload>
/**
 * Model MarksSubject
 * 
 */
export type MarksSubject = $Result.DefaultSelection<Prisma.$MarksSubjectPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Classes
 * const classes = await prisma.class.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Classes
   * const classes = await prisma.class.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.section`: Exposes CRUD operations for the **Section** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.section.findMany()
    * ```
    */
  get section(): Prisma.SectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feeDetails`: Exposes CRUD operations for the **FeeDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeeDetails
    * const feeDetails = await prisma.feeDetails.findMany()
    * ```
    */
  get feeDetails(): Prisma.FeeDetailsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.term`: Exposes CRUD operations for the **Term** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Terms
    * const terms = await prisma.term.findMany()
    * ```
    */
  get term(): Prisma.TermDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.masterDropdown`: Exposes CRUD operations for the **MasterDropdown** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterDropdowns
    * const masterDropdowns = await prisma.masterDropdown.findMany()
    * ```
    */
  get masterDropdown(): Prisma.MasterDropdownDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **Staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.StaffDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.timePeriod`: Exposes CRUD operations for the **TimePeriod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TimePeriods
    * const timePeriods = await prisma.timePeriod.findMany()
    * ```
    */
  get timePeriod(): Prisma.TimePeriodDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exams`: Exposes CRUD operations for the **Exams** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exams
    * const exams = await prisma.exams.findMany()
    * ```
    */
  get exams(): Prisma.ExamsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feeStructure`: Exposes CRUD operations for the **FeeStructure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeeStructures
    * const feeStructures = await prisma.feeStructure.findMany()
    * ```
    */
  get feeStructure(): Prisma.FeeStructureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feeItem`: Exposes CRUD operations for the **FeeItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeeItems
    * const feeItems = await prisma.feeItem.findMany()
    * ```
    */
  get feeItem(): Prisma.FeeItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marksSheetMaster`: Exposes CRUD operations for the **MarksSheetMaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarksSheetMasters
    * const marksSheetMasters = await prisma.marksSheetMaster.findMany()
    * ```
    */
  get marksSheetMaster(): Prisma.MarksSheetMasterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marksSubject`: Exposes CRUD operations for the **MarksSubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarksSubjects
    * const marksSubjects = await prisma.marksSubject.findMany()
    * ```
    */
  get marksSubject(): Prisma.MarksSubjectDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Class: 'Class',
    Section: 'Section',
    Student: 'Student',
    FeeDetails: 'FeeDetails',
    Term: 'Term',
    Subject: 'Subject',
    MasterDropdown: 'MasterDropdown',
    Staff: 'Staff',
    TimePeriod: 'TimePeriod',
    Exams: 'Exams',
    FeeStructure: 'FeeStructure',
    FeeItem: 'FeeItem',
    MarksSheetMaster: 'MarksSheetMaster',
    MarksSubject: 'MarksSubject'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "class" | "section" | "student" | "feeDetails" | "term" | "subject" | "masterDropdown" | "staff" | "timePeriod" | "exams" | "feeStructure" | "feeItem" | "marksSheetMaster" | "marksSubject"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      Section: {
        payload: Prisma.$SectionPayload<ExtArgs>
        fields: Prisma.SectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findFirst: {
            args: Prisma.SectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findMany: {
            args: Prisma.SectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          create: {
            args: Prisma.SectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          createMany: {
            args: Prisma.SectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          update: {
            args: Prisma.SectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          deleteMany: {
            args: Prisma.SectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          aggregate: {
            args: Prisma.SectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSection>
          }
          groupBy: {
            args: Prisma.SectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectionCountArgs<ExtArgs>
            result: $Utils.Optional<SectionCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      FeeDetails: {
        payload: Prisma.$FeeDetailsPayload<ExtArgs>
        fields: Prisma.FeeDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeeDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeeDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeDetailsPayload>
          }
          findFirst: {
            args: Prisma.FeeDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeeDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeDetailsPayload>
          }
          findMany: {
            args: Prisma.FeeDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeDetailsPayload>[]
          }
          create: {
            args: Prisma.FeeDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeDetailsPayload>
          }
          createMany: {
            args: Prisma.FeeDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FeeDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeDetailsPayload>
          }
          update: {
            args: Prisma.FeeDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeDetailsPayload>
          }
          deleteMany: {
            args: Prisma.FeeDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeeDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeeDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeDetailsPayload>
          }
          aggregate: {
            args: Prisma.FeeDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeeDetails>
          }
          groupBy: {
            args: Prisma.FeeDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeeDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeeDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<FeeDetailsCountAggregateOutputType> | number
          }
        }
      }
      Term: {
        payload: Prisma.$TermPayload<ExtArgs>
        fields: Prisma.TermFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TermFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TermFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          findFirst: {
            args: Prisma.TermFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TermFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          findMany: {
            args: Prisma.TermFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>[]
          }
          create: {
            args: Prisma.TermCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          createMany: {
            args: Prisma.TermCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TermDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          update: {
            args: Prisma.TermUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          deleteMany: {
            args: Prisma.TermDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TermUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TermUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          aggregate: {
            args: Prisma.TermAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTerm>
          }
          groupBy: {
            args: Prisma.TermGroupByArgs<ExtArgs>
            result: $Utils.Optional<TermGroupByOutputType>[]
          }
          count: {
            args: Prisma.TermCountArgs<ExtArgs>
            result: $Utils.Optional<TermCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      MasterDropdown: {
        payload: Prisma.$MasterDropdownPayload<ExtArgs>
        fields: Prisma.MasterDropdownFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterDropdownFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterDropdownPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterDropdownFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterDropdownPayload>
          }
          findFirst: {
            args: Prisma.MasterDropdownFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterDropdownPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterDropdownFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterDropdownPayload>
          }
          findMany: {
            args: Prisma.MasterDropdownFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterDropdownPayload>[]
          }
          create: {
            args: Prisma.MasterDropdownCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterDropdownPayload>
          }
          createMany: {
            args: Prisma.MasterDropdownCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MasterDropdownDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterDropdownPayload>
          }
          update: {
            args: Prisma.MasterDropdownUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterDropdownPayload>
          }
          deleteMany: {
            args: Prisma.MasterDropdownDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterDropdownUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MasterDropdownUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterDropdownPayload>
          }
          aggregate: {
            args: Prisma.MasterDropdownAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterDropdown>
          }
          groupBy: {
            args: Prisma.MasterDropdownGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterDropdownGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterDropdownCountArgs<ExtArgs>
            result: $Utils.Optional<MasterDropdownCountAggregateOutputType> | number
          }
        }
      }
      Staff: {
        payload: Prisma.$StaffPayload<ExtArgs>
        fields: Prisma.StaffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findFirst: {
            args: Prisma.StaffFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findMany: {
            args: Prisma.StaffFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          create: {
            args: Prisma.StaffCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          createMany: {
            args: Prisma.StaffCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StaffDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          update: {
            args: Prisma.StaffUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          deleteMany: {
            args: Prisma.StaffDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StaffUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          aggregate: {
            args: Prisma.StaffAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaff>
          }
          groupBy: {
            args: Prisma.StaffGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffCountArgs<ExtArgs>
            result: $Utils.Optional<StaffCountAggregateOutputType> | number
          }
        }
      }
      TimePeriod: {
        payload: Prisma.$TimePeriodPayload<ExtArgs>
        fields: Prisma.TimePeriodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimePeriodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimePeriodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimePeriodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimePeriodPayload>
          }
          findFirst: {
            args: Prisma.TimePeriodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimePeriodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimePeriodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimePeriodPayload>
          }
          findMany: {
            args: Prisma.TimePeriodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimePeriodPayload>[]
          }
          create: {
            args: Prisma.TimePeriodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimePeriodPayload>
          }
          createMany: {
            args: Prisma.TimePeriodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TimePeriodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimePeriodPayload>
          }
          update: {
            args: Prisma.TimePeriodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimePeriodPayload>
          }
          deleteMany: {
            args: Prisma.TimePeriodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TimePeriodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TimePeriodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimePeriodPayload>
          }
          aggregate: {
            args: Prisma.TimePeriodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTimePeriod>
          }
          groupBy: {
            args: Prisma.TimePeriodGroupByArgs<ExtArgs>
            result: $Utils.Optional<TimePeriodGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimePeriodCountArgs<ExtArgs>
            result: $Utils.Optional<TimePeriodCountAggregateOutputType> | number
          }
        }
      }
      Exams: {
        payload: Prisma.$ExamsPayload<ExtArgs>
        fields: Prisma.ExamsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamsPayload>
          }
          findFirst: {
            args: Prisma.ExamsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamsPayload>
          }
          findMany: {
            args: Prisma.ExamsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamsPayload>[]
          }
          create: {
            args: Prisma.ExamsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamsPayload>
          }
          createMany: {
            args: Prisma.ExamsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ExamsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamsPayload>
          }
          update: {
            args: Prisma.ExamsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamsPayload>
          }
          deleteMany: {
            args: Prisma.ExamsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExamsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExamsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamsPayload>
          }
          aggregate: {
            args: Prisma.ExamsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExams>
          }
          groupBy: {
            args: Prisma.ExamsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExamsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamsCountArgs<ExtArgs>
            result: $Utils.Optional<ExamsCountAggregateOutputType> | number
          }
        }
      }
      FeeStructure: {
        payload: Prisma.$FeeStructurePayload<ExtArgs>
        fields: Prisma.FeeStructureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeeStructureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeeStructureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          findFirst: {
            args: Prisma.FeeStructureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeeStructureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          findMany: {
            args: Prisma.FeeStructureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>[]
          }
          create: {
            args: Prisma.FeeStructureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          createMany: {
            args: Prisma.FeeStructureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FeeStructureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          update: {
            args: Prisma.FeeStructureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          deleteMany: {
            args: Prisma.FeeStructureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeeStructureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeeStructureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          aggregate: {
            args: Prisma.FeeStructureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeeStructure>
          }
          groupBy: {
            args: Prisma.FeeStructureGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeeStructureGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeeStructureCountArgs<ExtArgs>
            result: $Utils.Optional<FeeStructureCountAggregateOutputType> | number
          }
        }
      }
      FeeItem: {
        payload: Prisma.$FeeItemPayload<ExtArgs>
        fields: Prisma.FeeItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeeItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeeItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeItemPayload>
          }
          findFirst: {
            args: Prisma.FeeItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeeItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeItemPayload>
          }
          findMany: {
            args: Prisma.FeeItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeItemPayload>[]
          }
          create: {
            args: Prisma.FeeItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeItemPayload>
          }
          createMany: {
            args: Prisma.FeeItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FeeItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeItemPayload>
          }
          update: {
            args: Prisma.FeeItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeItemPayload>
          }
          deleteMany: {
            args: Prisma.FeeItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeeItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeeItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeItemPayload>
          }
          aggregate: {
            args: Prisma.FeeItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeeItem>
          }
          groupBy: {
            args: Prisma.FeeItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeeItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeeItemCountArgs<ExtArgs>
            result: $Utils.Optional<FeeItemCountAggregateOutputType> | number
          }
        }
      }
      MarksSheetMaster: {
        payload: Prisma.$MarksSheetMasterPayload<ExtArgs>
        fields: Prisma.MarksSheetMasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarksSheetMasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSheetMasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarksSheetMasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSheetMasterPayload>
          }
          findFirst: {
            args: Prisma.MarksSheetMasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSheetMasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarksSheetMasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSheetMasterPayload>
          }
          findMany: {
            args: Prisma.MarksSheetMasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSheetMasterPayload>[]
          }
          create: {
            args: Prisma.MarksSheetMasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSheetMasterPayload>
          }
          createMany: {
            args: Prisma.MarksSheetMasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MarksSheetMasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSheetMasterPayload>
          }
          update: {
            args: Prisma.MarksSheetMasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSheetMasterPayload>
          }
          deleteMany: {
            args: Prisma.MarksSheetMasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarksSheetMasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MarksSheetMasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSheetMasterPayload>
          }
          aggregate: {
            args: Prisma.MarksSheetMasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarksSheetMaster>
          }
          groupBy: {
            args: Prisma.MarksSheetMasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarksSheetMasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarksSheetMasterCountArgs<ExtArgs>
            result: $Utils.Optional<MarksSheetMasterCountAggregateOutputType> | number
          }
        }
      }
      MarksSubject: {
        payload: Prisma.$MarksSubjectPayload<ExtArgs>
        fields: Prisma.MarksSubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarksSubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarksSubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSubjectPayload>
          }
          findFirst: {
            args: Prisma.MarksSubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarksSubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSubjectPayload>
          }
          findMany: {
            args: Prisma.MarksSubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSubjectPayload>[]
          }
          create: {
            args: Prisma.MarksSubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSubjectPayload>
          }
          createMany: {
            args: Prisma.MarksSubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MarksSubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSubjectPayload>
          }
          update: {
            args: Prisma.MarksSubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSubjectPayload>
          }
          deleteMany: {
            args: Prisma.MarksSubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarksSubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MarksSubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarksSubjectPayload>
          }
          aggregate: {
            args: Prisma.MarksSubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarksSubject>
          }
          groupBy: {
            args: Prisma.MarksSubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarksSubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarksSubjectCountArgs<ExtArgs>
            result: $Utils.Optional<MarksSubjectCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    class?: ClassOmit
    section?: SectionOmit
    student?: StudentOmit
    feeDetails?: FeeDetailsOmit
    term?: TermOmit
    subject?: SubjectOmit
    masterDropdown?: MasterDropdownOmit
    staff?: StaffOmit
    timePeriod?: TimePeriodOmit
    exams?: ExamsOmit
    feeStructure?: FeeStructureOmit
    feeItem?: FeeItemOmit
    marksSheetMaster?: MarksSheetMasterOmit
    marksSubject?: MarksSubjectOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    sections: number
    students: number
    subjects: number
    timePeriods: number
    feeStructures: number
    marksheets: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sections?: boolean | ClassCountOutputTypeCountSectionsArgs
    students?: boolean | ClassCountOutputTypeCountStudentsArgs
    subjects?: boolean | ClassCountOutputTypeCountSubjectsArgs
    timePeriods?: boolean | ClassCountOutputTypeCountTimePeriodsArgs
    feeStructures?: boolean | ClassCountOutputTypeCountFeeStructuresArgs
    marksheets?: boolean | ClassCountOutputTypeCountMarksheetsArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountTimePeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimePeriodWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountFeeStructuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeStructureWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountMarksheetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarksSheetMasterWhereInput
  }


  /**
   * Count Type SectionCountOutputType
   */

  export type SectionCountOutputType = {
    students: number
    timePeriods: number
    marksheets: number
  }

  export type SectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | SectionCountOutputTypeCountStudentsArgs
    timePeriods?: boolean | SectionCountOutputTypeCountTimePeriodsArgs
    marksheets?: boolean | SectionCountOutputTypeCountMarksheetsArgs
  }

  // Custom InputTypes
  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCountOutputType
     */
    select?: SectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountTimePeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimePeriodWhereInput
  }

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountMarksheetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarksSheetMasterWhereInput
  }


  /**
   * Count Type FeeDetailsCountOutputType
   */

  export type FeeDetailsCountOutputType = {
    terms: number
  }

  export type FeeDetailsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    terms?: boolean | FeeDetailsCountOutputTypeCountTermsArgs
  }

  // Custom InputTypes
  /**
   * FeeDetailsCountOutputType without action
   */
  export type FeeDetailsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetailsCountOutputType
     */
    select?: FeeDetailsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FeeDetailsCountOutputType without action
   */
  export type FeeDetailsCountOutputTypeCountTermsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    timePeriods: number
    marksheets: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timePeriods?: boolean | SubjectCountOutputTypeCountTimePeriodsArgs
    marksheets?: boolean | SubjectCountOutputTypeCountMarksheetsArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountTimePeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimePeriodWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountMarksheetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarksSubjectWhereInput
  }


  /**
   * Count Type MasterDropdownCountOutputType
   */

  export type MasterDropdownCountOutputType = {
    students: number
    genderStaff: number
    qualificationStaff: number
    departmentStaff: number
    designationStaff: number
    staffTypeStaff: number
    feeItems: number
  }

  export type MasterDropdownCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | MasterDropdownCountOutputTypeCountStudentsArgs
    genderStaff?: boolean | MasterDropdownCountOutputTypeCountGenderStaffArgs
    qualificationStaff?: boolean | MasterDropdownCountOutputTypeCountQualificationStaffArgs
    departmentStaff?: boolean | MasterDropdownCountOutputTypeCountDepartmentStaffArgs
    designationStaff?: boolean | MasterDropdownCountOutputTypeCountDesignationStaffArgs
    staffTypeStaff?: boolean | MasterDropdownCountOutputTypeCountStaffTypeStaffArgs
    feeItems?: boolean | MasterDropdownCountOutputTypeCountFeeItemsArgs
  }

  // Custom InputTypes
  /**
   * MasterDropdownCountOutputType without action
   */
  export type MasterDropdownCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdownCountOutputType
     */
    select?: MasterDropdownCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MasterDropdownCountOutputType without action
   */
  export type MasterDropdownCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * MasterDropdownCountOutputType without action
   */
  export type MasterDropdownCountOutputTypeCountGenderStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
  }

  /**
   * MasterDropdownCountOutputType without action
   */
  export type MasterDropdownCountOutputTypeCountQualificationStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
  }

  /**
   * MasterDropdownCountOutputType without action
   */
  export type MasterDropdownCountOutputTypeCountDepartmentStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
  }

  /**
   * MasterDropdownCountOutputType without action
   */
  export type MasterDropdownCountOutputTypeCountDesignationStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
  }

  /**
   * MasterDropdownCountOutputType without action
   */
  export type MasterDropdownCountOutputTypeCountStaffTypeStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
  }

  /**
   * MasterDropdownCountOutputType without action
   */
  export type MasterDropdownCountOutputTypeCountFeeItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeItemWhereInput
  }


  /**
   * Count Type StaffCountOutputType
   */

  export type StaffCountOutputType = {
    timePeriods: number
  }

  export type StaffCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timePeriods?: boolean | StaffCountOutputTypeCountTimePeriodsArgs
  }

  // Custom InputTypes
  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCountOutputType
     */
    select?: StaffCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountTimePeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimePeriodWhereInput
  }


  /**
   * Count Type FeeStructureCountOutputType
   */

  export type FeeStructureCountOutputType = {
    feeItems: number
  }

  export type FeeStructureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeItems?: boolean | FeeStructureCountOutputTypeCountFeeItemsArgs
  }

  // Custom InputTypes
  /**
   * FeeStructureCountOutputType without action
   */
  export type FeeStructureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructureCountOutputType
     */
    select?: FeeStructureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FeeStructureCountOutputType without action
   */
  export type FeeStructureCountOutputTypeCountFeeItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeItemWhereInput
  }


  /**
   * Count Type MarksSheetMasterCountOutputType
   */

  export type MarksSheetMasterCountOutputType = {
    subjects: number
  }

  export type MarksSheetMasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjects?: boolean | MarksSheetMasterCountOutputTypeCountSubjectsArgs
  }

  // Custom InputTypes
  /**
   * MarksSheetMasterCountOutputType without action
   */
  export type MarksSheetMasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMasterCountOutputType
     */
    select?: MarksSheetMasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MarksSheetMasterCountOutputType without action
   */
  export type MarksSheetMasterCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarksSubjectWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    id: number | null
  }

  export type ClassSumAggregateOutputType = {
    id: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ClassMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    id?: true
  }

  export type ClassSumAggregateInputType = {
    id?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: number
    name: string
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    sections?: boolean | Class$sectionsArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    subjects?: boolean | Class$subjectsArgs<ExtArgs>
    timePeriods?: boolean | Class$timePeriodsArgs<ExtArgs>
    feeStructures?: boolean | Class$feeStructuresArgs<ExtArgs>
    marksheets?: boolean | Class$marksheetsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>



  export type ClassSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sections?: boolean | Class$sectionsArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    subjects?: boolean | Class$subjectsArgs<ExtArgs>
    timePeriods?: boolean | Class$timePeriodsArgs<ExtArgs>
    feeStructures?: boolean | Class$feeStructuresArgs<ExtArgs>
    marksheets?: boolean | Class$marksheetsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      sections: Prisma.$SectionPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
      subjects: Prisma.$SubjectPayload<ExtArgs>[]
      timePeriods: Prisma.$TimePeriodPayload<ExtArgs>[]
      feeStructures: Prisma.$FeeStructurePayload<ExtArgs>[]
      marksheets: Prisma.$MarksSheetMasterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sections<T extends Class$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, Class$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Class$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subjects<T extends Class$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, Class$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    timePeriods<T extends Class$timePeriodsArgs<ExtArgs> = {}>(args?: Subset<T, Class$timePeriodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feeStructures<T extends Class$feeStructuresArgs<ExtArgs> = {}>(args?: Subset<T, Class$feeStructuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    marksheets<T extends Class$marksheetsArgs<ExtArgs> = {}>(args?: Subset<T, Class$marksheetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'Int'>
    readonly name: FieldRef<"Class", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.sections
   */
  export type Class$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Class.students
   */
  export type Class$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Class.subjects
   */
  export type Class$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Class.timePeriods
   */
  export type Class$timePeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    where?: TimePeriodWhereInput
    orderBy?: TimePeriodOrderByWithRelationInput | TimePeriodOrderByWithRelationInput[]
    cursor?: TimePeriodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimePeriodScalarFieldEnum | TimePeriodScalarFieldEnum[]
  }

  /**
   * Class.feeStructures
   */
  export type Class$feeStructuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    where?: FeeStructureWhereInput
    orderBy?: FeeStructureOrderByWithRelationInput | FeeStructureOrderByWithRelationInput[]
    cursor?: FeeStructureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeeStructureScalarFieldEnum | FeeStructureScalarFieldEnum[]
  }

  /**
   * Class.marksheets
   */
  export type Class$marksheetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    where?: MarksSheetMasterWhereInput
    orderBy?: MarksSheetMasterOrderByWithRelationInput | MarksSheetMasterOrderByWithRelationInput[]
    cursor?: MarksSheetMasterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarksSheetMasterScalarFieldEnum | MarksSheetMasterScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model Section
   */

  export type AggregateSection = {
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  export type SectionAvgAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type SectionSumAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type SectionMinAggregateOutputType = {
    id: number | null
    name: string | null
    classId: number | null
  }

  export type SectionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    classId: number | null
  }

  export type SectionCountAggregateOutputType = {
    id: number
    name: number
    classId: number
    _all: number
  }


  export type SectionAvgAggregateInputType = {
    id?: true
    classId?: true
  }

  export type SectionSumAggregateInputType = {
    id?: true
    classId?: true
  }

  export type SectionMinAggregateInputType = {
    id?: true
    name?: true
    classId?: true
  }

  export type SectionMaxAggregateInputType = {
    id?: true
    name?: true
    classId?: true
  }

  export type SectionCountAggregateInputType = {
    id?: true
    name?: true
    classId?: true
    _all?: true
  }

  export type SectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Section to aggregate.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sections
    **/
    _count?: true | SectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionMaxAggregateInputType
  }

  export type GetSectionAggregateType<T extends SectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSection[P]>
      : GetScalarType<T[P], AggregateSection[P]>
  }




  export type SectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithAggregationInput | SectionOrderByWithAggregationInput[]
    by: SectionScalarFieldEnum[] | SectionScalarFieldEnum
    having?: SectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionCountAggregateInputType | true
    _avg?: SectionAvgAggregateInputType
    _sum?: SectionSumAggregateInputType
    _min?: SectionMinAggregateInputType
    _max?: SectionMaxAggregateInputType
  }

  export type SectionGroupByOutputType = {
    id: number
    name: string
    classId: number
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  type GetSectionGroupByPayload<T extends SectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionGroupByOutputType[P]>
            : GetScalarType<T[P], SectionGroupByOutputType[P]>
        }
      >
    >


  export type SectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    students?: boolean | Section$studentsArgs<ExtArgs>
    timePeriods?: boolean | Section$timePeriodsArgs<ExtArgs>
    marksheets?: boolean | Section$marksheetsArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>



  export type SectionSelectScalar = {
    id?: boolean
    name?: boolean
    classId?: boolean
  }

  export type SectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "classId", ExtArgs["result"]["section"]>
  export type SectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    students?: boolean | Section$studentsArgs<ExtArgs>
    timePeriods?: boolean | Section$timePeriodsArgs<ExtArgs>
    marksheets?: boolean | Section$marksheetsArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Section"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      students: Prisma.$StudentPayload<ExtArgs>[]
      timePeriods: Prisma.$TimePeriodPayload<ExtArgs>[]
      marksheets: Prisma.$MarksSheetMasterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      classId: number
    }, ExtArgs["result"]["section"]>
    composites: {}
  }

  type SectionGetPayload<S extends boolean | null | undefined | SectionDefaultArgs> = $Result.GetResult<Prisma.$SectionPayload, S>

  type SectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SectionCountAggregateInputType | true
    }

  export interface SectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Section'], meta: { name: 'Section' } }
    /**
     * Find zero or one Section that matches the filter.
     * @param {SectionFindUniqueArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectionFindUniqueArgs>(args: SelectSubset<T, SectionFindUniqueArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Section that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SectionFindUniqueOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectionFindFirstArgs>(args?: SelectSubset<T, SectionFindFirstArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.section.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.section.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionWithIdOnly = await prisma.section.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectionFindManyArgs>(args?: SelectSubset<T, SectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Section.
     * @param {SectionCreateArgs} args - Arguments to create a Section.
     * @example
     * // Create one Section
     * const Section = await prisma.section.create({
     *   data: {
     *     // ... data to create a Section
     *   }
     * })
     * 
     */
    create<T extends SectionCreateArgs>(args: SelectSubset<T, SectionCreateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sections.
     * @param {SectionCreateManyArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectionCreateManyArgs>(args?: SelectSubset<T, SectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Section.
     * @param {SectionDeleteArgs} args - Arguments to delete one Section.
     * @example
     * // Delete one Section
     * const Section = await prisma.section.delete({
     *   where: {
     *     // ... filter to delete one Section
     *   }
     * })
     * 
     */
    delete<T extends SectionDeleteArgs>(args: SelectSubset<T, SectionDeleteArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Section.
     * @param {SectionUpdateArgs} args - Arguments to update one Section.
     * @example
     * // Update one Section
     * const section = await prisma.section.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectionUpdateArgs>(args: SelectSubset<T, SectionUpdateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sections.
     * @param {SectionDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.section.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectionDeleteManyArgs>(args?: SelectSubset<T, SectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectionUpdateManyArgs>(args: SelectSubset<T, SectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Section.
     * @param {SectionUpsertArgs} args - Arguments to update or create a Section.
     * @example
     * // Update or create a Section
     * const section = await prisma.section.upsert({
     *   create: {
     *     // ... data to create a Section
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Section we want to update
     *   }
     * })
     */
    upsert<T extends SectionUpsertArgs>(args: SelectSubset<T, SectionUpsertArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.section.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends SectionCountArgs>(
      args?: Subset<T, SectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionAggregateArgs>(args: Subset<T, SectionAggregateArgs>): Prisma.PrismaPromise<GetSectionAggregateType<T>>

    /**
     * Group by Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionGroupByArgs['orderBy'] }
        : { orderBy?: SectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Section model
   */
  readonly fields: SectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Section.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    students<T extends Section$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Section$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    timePeriods<T extends Section$timePeriodsArgs<ExtArgs> = {}>(args?: Subset<T, Section$timePeriodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    marksheets<T extends Section$marksheetsArgs<ExtArgs> = {}>(args?: Subset<T, Section$marksheetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Section model
   */
  interface SectionFieldRefs {
    readonly id: FieldRef<"Section", 'Int'>
    readonly name: FieldRef<"Section", 'String'>
    readonly classId: FieldRef<"Section", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Section findUnique
   */
  export type SectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findUniqueOrThrow
   */
  export type SectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findFirst
   */
  export type SectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findFirstOrThrow
   */
  export type SectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findMany
   */
  export type SectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Sections to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section create
   */
  export type SectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Section.
     */
    data: XOR<SectionCreateInput, SectionUncheckedCreateInput>
  }

  /**
   * Section createMany
   */
  export type SectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Section update
   */
  export type SectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Section.
     */
    data: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
    /**
     * Choose, which Section to update.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section updateMany
   */
  export type SectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
  }

  /**
   * Section upsert
   */
  export type SectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Section to update in case it exists.
     */
    where: SectionWhereUniqueInput
    /**
     * In case the Section found by the `where` argument doesn't exist, create a new Section with this data.
     */
    create: XOR<SectionCreateInput, SectionUncheckedCreateInput>
    /**
     * In case the Section was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
  }

  /**
   * Section delete
   */
  export type SectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter which Section to delete.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section deleteMany
   */
  export type SectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sections to delete
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to delete.
     */
    limit?: number
  }

  /**
   * Section.students
   */
  export type Section$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Section.timePeriods
   */
  export type Section$timePeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    where?: TimePeriodWhereInput
    orderBy?: TimePeriodOrderByWithRelationInput | TimePeriodOrderByWithRelationInput[]
    cursor?: TimePeriodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimePeriodScalarFieldEnum | TimePeriodScalarFieldEnum[]
  }

  /**
   * Section.marksheets
   */
  export type Section$marksheetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    where?: MarksSheetMasterWhereInput
    orderBy?: MarksSheetMasterOrderByWithRelationInput | MarksSheetMasterOrderByWithRelationInput[]
    cursor?: MarksSheetMasterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarksSheetMasterScalarFieldEnum | MarksSheetMasterScalarFieldEnum[]
  }

  /**
   * Section without action
   */
  export type SectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
    genderId: number | null
    classId: number | null
    sectionId: number | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
    genderId: number | null
    classId: number | null
    sectionId: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    genderId: number | null
    fatherName: string | null
    motherName: string | null
    fatherOccupation: string | null
    motherOccupation: string | null
    mobileNumber: string | null
    motherMobileNumber: string | null
    fatherEmail: string | null
    address: string | null
    isTransportRequired: boolean | null
    classId: number | null
    sectionId: number | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    genderId: number | null
    fatherName: string | null
    motherName: string | null
    fatherOccupation: string | null
    motherOccupation: string | null
    mobileNumber: string | null
    motherMobileNumber: string | null
    fatherEmail: string | null
    address: string | null
    isTransportRequired: boolean | null
    classId: number | null
    sectionId: number | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    username: number
    password: number
    firstName: number
    lastName: number
    genderId: number
    fatherName: number
    motherName: number
    fatherOccupation: number
    motherOccupation: number
    mobileNumber: number
    motherMobileNumber: number
    fatherEmail: number
    address: number
    isTransportRequired: number
    classId: number
    sectionId: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
    genderId?: true
    classId?: true
    sectionId?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
    genderId?: true
    classId?: true
    sectionId?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    genderId?: true
    fatherName?: true
    motherName?: true
    fatherOccupation?: true
    motherOccupation?: true
    mobileNumber?: true
    motherMobileNumber?: true
    fatherEmail?: true
    address?: true
    isTransportRequired?: true
    classId?: true
    sectionId?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    genderId?: true
    fatherName?: true
    motherName?: true
    fatherOccupation?: true
    motherOccupation?: true
    mobileNumber?: true
    motherMobileNumber?: true
    fatherEmail?: true
    address?: true
    isTransportRequired?: true
    classId?: true
    sectionId?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    genderId?: true
    fatherName?: true
    motherName?: true
    fatherOccupation?: true
    motherOccupation?: true
    mobileNumber?: true
    motherMobileNumber?: true
    fatherEmail?: true
    address?: true
    isTransportRequired?: true
    classId?: true
    sectionId?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: number
    username: string
    password: string
    firstName: string
    lastName: string
    genderId: number | null
    fatherName: string | null
    motherName: string | null
    fatherOccupation: string | null
    motherOccupation: string | null
    mobileNumber: string | null
    motherMobileNumber: string | null
    fatherEmail: string | null
    address: string | null
    isTransportRequired: boolean | null
    classId: number
    sectionId: number
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    genderId?: boolean
    fatherName?: boolean
    motherName?: boolean
    fatherOccupation?: boolean
    motherOccupation?: boolean
    mobileNumber?: boolean
    motherMobileNumber?: boolean
    fatherEmail?: boolean
    address?: boolean
    isTransportRequired?: boolean
    classId?: boolean
    sectionId?: boolean
    gender?: boolean | Student$genderArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    section?: boolean | SectionDefaultArgs<ExtArgs>
    feeDetails?: boolean | Student$feeDetailsArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>



  export type StudentSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    genderId?: boolean
    fatherName?: boolean
    motherName?: boolean
    fatherOccupation?: boolean
    motherOccupation?: boolean
    mobileNumber?: boolean
    motherMobileNumber?: boolean
    fatherEmail?: boolean
    address?: boolean
    isTransportRequired?: boolean
    classId?: boolean
    sectionId?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "firstName" | "lastName" | "genderId" | "fatherName" | "motherName" | "fatherOccupation" | "motherOccupation" | "mobileNumber" | "motherMobileNumber" | "fatherEmail" | "address" | "isTransportRequired" | "classId" | "sectionId", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gender?: boolean | Student$genderArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    section?: boolean | SectionDefaultArgs<ExtArgs>
    feeDetails?: boolean | Student$feeDetailsArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      gender: Prisma.$MasterDropdownPayload<ExtArgs> | null
      class: Prisma.$ClassPayload<ExtArgs>
      section: Prisma.$SectionPayload<ExtArgs>
      feeDetails: Prisma.$FeeDetailsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      firstName: string
      lastName: string
      genderId: number | null
      fatherName: string | null
      motherName: string | null
      fatherOccupation: string | null
      motherOccupation: string | null
      mobileNumber: string | null
      motherMobileNumber: string | null
      fatherEmail: string | null
      address: string | null
      isTransportRequired: boolean | null
      classId: number
      sectionId: number
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gender<T extends Student$genderArgs<ExtArgs> = {}>(args?: Subset<T, Student$genderArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    section<T extends SectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SectionDefaultArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    feeDetails<T extends Student$feeDetailsArgs<ExtArgs> = {}>(args?: Subset<T, Student$feeDetailsArgs<ExtArgs>>): Prisma__FeeDetailsClient<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'Int'>
    readonly username: FieldRef<"Student", 'String'>
    readonly password: FieldRef<"Student", 'String'>
    readonly firstName: FieldRef<"Student", 'String'>
    readonly lastName: FieldRef<"Student", 'String'>
    readonly genderId: FieldRef<"Student", 'Int'>
    readonly fatherName: FieldRef<"Student", 'String'>
    readonly motherName: FieldRef<"Student", 'String'>
    readonly fatherOccupation: FieldRef<"Student", 'String'>
    readonly motherOccupation: FieldRef<"Student", 'String'>
    readonly mobileNumber: FieldRef<"Student", 'String'>
    readonly motherMobileNumber: FieldRef<"Student", 'String'>
    readonly fatherEmail: FieldRef<"Student", 'String'>
    readonly address: FieldRef<"Student", 'String'>
    readonly isTransportRequired: FieldRef<"Student", 'Boolean'>
    readonly classId: FieldRef<"Student", 'Int'>
    readonly sectionId: FieldRef<"Student", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.gender
   */
  export type Student$genderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    where?: MasterDropdownWhereInput
  }

  /**
   * Student.feeDetails
   */
  export type Student$feeDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
    where?: FeeDetailsWhereInput
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model FeeDetails
   */

  export type AggregateFeeDetails = {
    _count: FeeDetailsCountAggregateOutputType | null
    _avg: FeeDetailsAvgAggregateOutputType | null
    _sum: FeeDetailsSumAggregateOutputType | null
    _min: FeeDetailsMinAggregateOutputType | null
    _max: FeeDetailsMaxAggregateOutputType | null
  }

  export type FeeDetailsAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    totalFee: number | null
    discountAmount: number | null
    totalTerms: number | null
    remainingAmount: number | null
  }

  export type FeeDetailsSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    totalFee: number | null
    discountAmount: number | null
    totalTerms: number | null
    remainingAmount: number | null
  }

  export type FeeDetailsMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    totalFee: number | null
    discountAmount: number | null
    totalTerms: number | null
    remainingAmount: number | null
  }

  export type FeeDetailsMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    totalFee: number | null
    discountAmount: number | null
    totalTerms: number | null
    remainingAmount: number | null
  }

  export type FeeDetailsCountAggregateOutputType = {
    id: number
    studentId: number
    totalFee: number
    discountAmount: number
    totalTerms: number
    remainingAmount: number
    _all: number
  }


  export type FeeDetailsAvgAggregateInputType = {
    id?: true
    studentId?: true
    totalFee?: true
    discountAmount?: true
    totalTerms?: true
    remainingAmount?: true
  }

  export type FeeDetailsSumAggregateInputType = {
    id?: true
    studentId?: true
    totalFee?: true
    discountAmount?: true
    totalTerms?: true
    remainingAmount?: true
  }

  export type FeeDetailsMinAggregateInputType = {
    id?: true
    studentId?: true
    totalFee?: true
    discountAmount?: true
    totalTerms?: true
    remainingAmount?: true
  }

  export type FeeDetailsMaxAggregateInputType = {
    id?: true
    studentId?: true
    totalFee?: true
    discountAmount?: true
    totalTerms?: true
    remainingAmount?: true
  }

  export type FeeDetailsCountAggregateInputType = {
    id?: true
    studentId?: true
    totalFee?: true
    discountAmount?: true
    totalTerms?: true
    remainingAmount?: true
    _all?: true
  }

  export type FeeDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeDetails to aggregate.
     */
    where?: FeeDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeDetails to fetch.
     */
    orderBy?: FeeDetailsOrderByWithRelationInput | FeeDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeeDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeeDetails
    **/
    _count?: true | FeeDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeeDetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeeDetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeeDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeeDetailsMaxAggregateInputType
  }

  export type GetFeeDetailsAggregateType<T extends FeeDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateFeeDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeeDetails[P]>
      : GetScalarType<T[P], AggregateFeeDetails[P]>
  }




  export type FeeDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeDetailsWhereInput
    orderBy?: FeeDetailsOrderByWithAggregationInput | FeeDetailsOrderByWithAggregationInput[]
    by: FeeDetailsScalarFieldEnum[] | FeeDetailsScalarFieldEnum
    having?: FeeDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeeDetailsCountAggregateInputType | true
    _avg?: FeeDetailsAvgAggregateInputType
    _sum?: FeeDetailsSumAggregateInputType
    _min?: FeeDetailsMinAggregateInputType
    _max?: FeeDetailsMaxAggregateInputType
  }

  export type FeeDetailsGroupByOutputType = {
    id: number
    studentId: number
    totalFee: number
    discountAmount: number
    totalTerms: number
    remainingAmount: number
    _count: FeeDetailsCountAggregateOutputType | null
    _avg: FeeDetailsAvgAggregateOutputType | null
    _sum: FeeDetailsSumAggregateOutputType | null
    _min: FeeDetailsMinAggregateOutputType | null
    _max: FeeDetailsMaxAggregateOutputType | null
  }

  type GetFeeDetailsGroupByPayload<T extends FeeDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeeDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeeDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeeDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], FeeDetailsGroupByOutputType[P]>
        }
      >
    >


  export type FeeDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    totalFee?: boolean
    discountAmount?: boolean
    totalTerms?: boolean
    remainingAmount?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    terms?: boolean | FeeDetails$termsArgs<ExtArgs>
    _count?: boolean | FeeDetailsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feeDetails"]>



  export type FeeDetailsSelectScalar = {
    id?: boolean
    studentId?: boolean
    totalFee?: boolean
    discountAmount?: boolean
    totalTerms?: boolean
    remainingAmount?: boolean
  }

  export type FeeDetailsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "totalFee" | "discountAmount" | "totalTerms" | "remainingAmount", ExtArgs["result"]["feeDetails"]>
  export type FeeDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    terms?: boolean | FeeDetails$termsArgs<ExtArgs>
    _count?: boolean | FeeDetailsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FeeDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeeDetails"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      terms: Prisma.$TermPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      totalFee: number
      discountAmount: number
      totalTerms: number
      remainingAmount: number
    }, ExtArgs["result"]["feeDetails"]>
    composites: {}
  }

  type FeeDetailsGetPayload<S extends boolean | null | undefined | FeeDetailsDefaultArgs> = $Result.GetResult<Prisma.$FeeDetailsPayload, S>

  type FeeDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeeDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeeDetailsCountAggregateInputType | true
    }

  export interface FeeDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeeDetails'], meta: { name: 'FeeDetails' } }
    /**
     * Find zero or one FeeDetails that matches the filter.
     * @param {FeeDetailsFindUniqueArgs} args - Arguments to find a FeeDetails
     * @example
     * // Get one FeeDetails
     * const feeDetails = await prisma.feeDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeeDetailsFindUniqueArgs>(args: SelectSubset<T, FeeDetailsFindUniqueArgs<ExtArgs>>): Prisma__FeeDetailsClient<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeeDetails that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeeDetailsFindUniqueOrThrowArgs} args - Arguments to find a FeeDetails
     * @example
     * // Get one FeeDetails
     * const feeDetails = await prisma.feeDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeeDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, FeeDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeeDetailsClient<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeeDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeDetailsFindFirstArgs} args - Arguments to find a FeeDetails
     * @example
     * // Get one FeeDetails
     * const feeDetails = await prisma.feeDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeeDetailsFindFirstArgs>(args?: SelectSubset<T, FeeDetailsFindFirstArgs<ExtArgs>>): Prisma__FeeDetailsClient<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeeDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeDetailsFindFirstOrThrowArgs} args - Arguments to find a FeeDetails
     * @example
     * // Get one FeeDetails
     * const feeDetails = await prisma.feeDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeeDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, FeeDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeeDetailsClient<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeeDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeeDetails
     * const feeDetails = await prisma.feeDetails.findMany()
     * 
     * // Get first 10 FeeDetails
     * const feeDetails = await prisma.feeDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feeDetailsWithIdOnly = await prisma.feeDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeeDetailsFindManyArgs>(args?: SelectSubset<T, FeeDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeeDetails.
     * @param {FeeDetailsCreateArgs} args - Arguments to create a FeeDetails.
     * @example
     * // Create one FeeDetails
     * const FeeDetails = await prisma.feeDetails.create({
     *   data: {
     *     // ... data to create a FeeDetails
     *   }
     * })
     * 
     */
    create<T extends FeeDetailsCreateArgs>(args: SelectSubset<T, FeeDetailsCreateArgs<ExtArgs>>): Prisma__FeeDetailsClient<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeeDetails.
     * @param {FeeDetailsCreateManyArgs} args - Arguments to create many FeeDetails.
     * @example
     * // Create many FeeDetails
     * const feeDetails = await prisma.feeDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeeDetailsCreateManyArgs>(args?: SelectSubset<T, FeeDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeeDetails.
     * @param {FeeDetailsDeleteArgs} args - Arguments to delete one FeeDetails.
     * @example
     * // Delete one FeeDetails
     * const FeeDetails = await prisma.feeDetails.delete({
     *   where: {
     *     // ... filter to delete one FeeDetails
     *   }
     * })
     * 
     */
    delete<T extends FeeDetailsDeleteArgs>(args: SelectSubset<T, FeeDetailsDeleteArgs<ExtArgs>>): Prisma__FeeDetailsClient<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeeDetails.
     * @param {FeeDetailsUpdateArgs} args - Arguments to update one FeeDetails.
     * @example
     * // Update one FeeDetails
     * const feeDetails = await prisma.feeDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeeDetailsUpdateArgs>(args: SelectSubset<T, FeeDetailsUpdateArgs<ExtArgs>>): Prisma__FeeDetailsClient<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeeDetails.
     * @param {FeeDetailsDeleteManyArgs} args - Arguments to filter FeeDetails to delete.
     * @example
     * // Delete a few FeeDetails
     * const { count } = await prisma.feeDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeeDetailsDeleteManyArgs>(args?: SelectSubset<T, FeeDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeeDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeeDetails
     * const feeDetails = await prisma.feeDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeeDetailsUpdateManyArgs>(args: SelectSubset<T, FeeDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeeDetails.
     * @param {FeeDetailsUpsertArgs} args - Arguments to update or create a FeeDetails.
     * @example
     * // Update or create a FeeDetails
     * const feeDetails = await prisma.feeDetails.upsert({
     *   create: {
     *     // ... data to create a FeeDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeeDetails we want to update
     *   }
     * })
     */
    upsert<T extends FeeDetailsUpsertArgs>(args: SelectSubset<T, FeeDetailsUpsertArgs<ExtArgs>>): Prisma__FeeDetailsClient<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeeDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeDetailsCountArgs} args - Arguments to filter FeeDetails to count.
     * @example
     * // Count the number of FeeDetails
     * const count = await prisma.feeDetails.count({
     *   where: {
     *     // ... the filter for the FeeDetails we want to count
     *   }
     * })
    **/
    count<T extends FeeDetailsCountArgs>(
      args?: Subset<T, FeeDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeeDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeeDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeeDetailsAggregateArgs>(args: Subset<T, FeeDetailsAggregateArgs>): Prisma.PrismaPromise<GetFeeDetailsAggregateType<T>>

    /**
     * Group by FeeDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeeDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeeDetailsGroupByArgs['orderBy'] }
        : { orderBy?: FeeDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeeDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeeDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeeDetails model
   */
  readonly fields: FeeDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeeDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeeDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    terms<T extends FeeDetails$termsArgs<ExtArgs> = {}>(args?: Subset<T, FeeDetails$termsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeeDetails model
   */
  interface FeeDetailsFieldRefs {
    readonly id: FieldRef<"FeeDetails", 'Int'>
    readonly studentId: FieldRef<"FeeDetails", 'Int'>
    readonly totalFee: FieldRef<"FeeDetails", 'Float'>
    readonly discountAmount: FieldRef<"FeeDetails", 'Float'>
    readonly totalTerms: FieldRef<"FeeDetails", 'Int'>
    readonly remainingAmount: FieldRef<"FeeDetails", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * FeeDetails findUnique
   */
  export type FeeDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
    /**
     * Filter, which FeeDetails to fetch.
     */
    where: FeeDetailsWhereUniqueInput
  }

  /**
   * FeeDetails findUniqueOrThrow
   */
  export type FeeDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
    /**
     * Filter, which FeeDetails to fetch.
     */
    where: FeeDetailsWhereUniqueInput
  }

  /**
   * FeeDetails findFirst
   */
  export type FeeDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
    /**
     * Filter, which FeeDetails to fetch.
     */
    where?: FeeDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeDetails to fetch.
     */
    orderBy?: FeeDetailsOrderByWithRelationInput | FeeDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeDetails.
     */
    cursor?: FeeDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeDetails.
     */
    distinct?: FeeDetailsScalarFieldEnum | FeeDetailsScalarFieldEnum[]
  }

  /**
   * FeeDetails findFirstOrThrow
   */
  export type FeeDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
    /**
     * Filter, which FeeDetails to fetch.
     */
    where?: FeeDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeDetails to fetch.
     */
    orderBy?: FeeDetailsOrderByWithRelationInput | FeeDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeDetails.
     */
    cursor?: FeeDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeDetails.
     */
    distinct?: FeeDetailsScalarFieldEnum | FeeDetailsScalarFieldEnum[]
  }

  /**
   * FeeDetails findMany
   */
  export type FeeDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
    /**
     * Filter, which FeeDetails to fetch.
     */
    where?: FeeDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeDetails to fetch.
     */
    orderBy?: FeeDetailsOrderByWithRelationInput | FeeDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeeDetails.
     */
    cursor?: FeeDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeDetails.
     */
    skip?: number
    distinct?: FeeDetailsScalarFieldEnum | FeeDetailsScalarFieldEnum[]
  }

  /**
   * FeeDetails create
   */
  export type FeeDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a FeeDetails.
     */
    data: XOR<FeeDetailsCreateInput, FeeDetailsUncheckedCreateInput>
  }

  /**
   * FeeDetails createMany
   */
  export type FeeDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeeDetails.
     */
    data: FeeDetailsCreateManyInput | FeeDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeeDetails update
   */
  export type FeeDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a FeeDetails.
     */
    data: XOR<FeeDetailsUpdateInput, FeeDetailsUncheckedUpdateInput>
    /**
     * Choose, which FeeDetails to update.
     */
    where: FeeDetailsWhereUniqueInput
  }

  /**
   * FeeDetails updateMany
   */
  export type FeeDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeeDetails.
     */
    data: XOR<FeeDetailsUpdateManyMutationInput, FeeDetailsUncheckedUpdateManyInput>
    /**
     * Filter which FeeDetails to update
     */
    where?: FeeDetailsWhereInput
    /**
     * Limit how many FeeDetails to update.
     */
    limit?: number
  }

  /**
   * FeeDetails upsert
   */
  export type FeeDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the FeeDetails to update in case it exists.
     */
    where: FeeDetailsWhereUniqueInput
    /**
     * In case the FeeDetails found by the `where` argument doesn't exist, create a new FeeDetails with this data.
     */
    create: XOR<FeeDetailsCreateInput, FeeDetailsUncheckedCreateInput>
    /**
     * In case the FeeDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeeDetailsUpdateInput, FeeDetailsUncheckedUpdateInput>
  }

  /**
   * FeeDetails delete
   */
  export type FeeDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
    /**
     * Filter which FeeDetails to delete.
     */
    where: FeeDetailsWhereUniqueInput
  }

  /**
   * FeeDetails deleteMany
   */
  export type FeeDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeDetails to delete
     */
    where?: FeeDetailsWhereInput
    /**
     * Limit how many FeeDetails to delete.
     */
    limit?: number
  }

  /**
   * FeeDetails.terms
   */
  export type FeeDetails$termsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    where?: TermWhereInput
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    cursor?: TermWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * FeeDetails without action
   */
  export type FeeDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeDetails
     */
    select?: FeeDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeDetails
     */
    omit?: FeeDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeDetailsInclude<ExtArgs> | null
  }


  /**
   * Model Term
   */

  export type AggregateTerm = {
    _count: TermCountAggregateOutputType | null
    _avg: TermAvgAggregateOutputType | null
    _sum: TermSumAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  export type TermAvgAggregateOutputType = {
    id: number | null
    feeId: number | null
    termNumber: number | null
    amount: number | null
  }

  export type TermSumAggregateOutputType = {
    id: number | null
    feeId: number | null
    termNumber: number | null
    amount: number | null
  }

  export type TermMinAggregateOutputType = {
    id: number | null
    feeId: number | null
    termNumber: number | null
    amount: number | null
    dueDate: Date | null
    isPaid: boolean | null
  }

  export type TermMaxAggregateOutputType = {
    id: number | null
    feeId: number | null
    termNumber: number | null
    amount: number | null
    dueDate: Date | null
    isPaid: boolean | null
  }

  export type TermCountAggregateOutputType = {
    id: number
    feeId: number
    termNumber: number
    amount: number
    dueDate: number
    isPaid: number
    _all: number
  }


  export type TermAvgAggregateInputType = {
    id?: true
    feeId?: true
    termNumber?: true
    amount?: true
  }

  export type TermSumAggregateInputType = {
    id?: true
    feeId?: true
    termNumber?: true
    amount?: true
  }

  export type TermMinAggregateInputType = {
    id?: true
    feeId?: true
    termNumber?: true
    amount?: true
    dueDate?: true
    isPaid?: true
  }

  export type TermMaxAggregateInputType = {
    id?: true
    feeId?: true
    termNumber?: true
    amount?: true
    dueDate?: true
    isPaid?: true
  }

  export type TermCountAggregateInputType = {
    id?: true
    feeId?: true
    termNumber?: true
    amount?: true
    dueDate?: true
    isPaid?: true
    _all?: true
  }

  export type TermAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Term to aggregate.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Terms
    **/
    _count?: true | TermCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TermAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TermSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TermMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TermMaxAggregateInputType
  }

  export type GetTermAggregateType<T extends TermAggregateArgs> = {
        [P in keyof T & keyof AggregateTerm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerm[P]>
      : GetScalarType<T[P], AggregateTerm[P]>
  }




  export type TermGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermWhereInput
    orderBy?: TermOrderByWithAggregationInput | TermOrderByWithAggregationInput[]
    by: TermScalarFieldEnum[] | TermScalarFieldEnum
    having?: TermScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TermCountAggregateInputType | true
    _avg?: TermAvgAggregateInputType
    _sum?: TermSumAggregateInputType
    _min?: TermMinAggregateInputType
    _max?: TermMaxAggregateInputType
  }

  export type TermGroupByOutputType = {
    id: number
    feeId: number
    termNumber: number
    amount: number
    dueDate: Date
    isPaid: boolean
    _count: TermCountAggregateOutputType | null
    _avg: TermAvgAggregateOutputType | null
    _sum: TermSumAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  type GetTermGroupByPayload<T extends TermGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TermGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TermGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TermGroupByOutputType[P]>
            : GetScalarType<T[P], TermGroupByOutputType[P]>
        }
      >
    >


  export type TermSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    feeId?: boolean
    termNumber?: boolean
    amount?: boolean
    dueDate?: boolean
    isPaid?: boolean
    feeDetail?: boolean | FeeDetailsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["term"]>



  export type TermSelectScalar = {
    id?: boolean
    feeId?: boolean
    termNumber?: boolean
    amount?: boolean
    dueDate?: boolean
    isPaid?: boolean
  }

  export type TermOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "feeId" | "termNumber" | "amount" | "dueDate" | "isPaid", ExtArgs["result"]["term"]>
  export type TermInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeDetail?: boolean | FeeDetailsDefaultArgs<ExtArgs>
  }

  export type $TermPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Term"
    objects: {
      feeDetail: Prisma.$FeeDetailsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      feeId: number
      termNumber: number
      amount: number
      dueDate: Date
      isPaid: boolean
    }, ExtArgs["result"]["term"]>
    composites: {}
  }

  type TermGetPayload<S extends boolean | null | undefined | TermDefaultArgs> = $Result.GetResult<Prisma.$TermPayload, S>

  type TermCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TermFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TermCountAggregateInputType | true
    }

  export interface TermDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Term'], meta: { name: 'Term' } }
    /**
     * Find zero or one Term that matches the filter.
     * @param {TermFindUniqueArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TermFindUniqueArgs>(args: SelectSubset<T, TermFindUniqueArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Term that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TermFindUniqueOrThrowArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TermFindUniqueOrThrowArgs>(args: SelectSubset<T, TermFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Term that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindFirstArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TermFindFirstArgs>(args?: SelectSubset<T, TermFindFirstArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Term that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindFirstOrThrowArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TermFindFirstOrThrowArgs>(args?: SelectSubset<T, TermFindFirstOrThrowArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Terms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Terms
     * const terms = await prisma.term.findMany()
     * 
     * // Get first 10 Terms
     * const terms = await prisma.term.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termWithIdOnly = await prisma.term.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TermFindManyArgs>(args?: SelectSubset<T, TermFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Term.
     * @param {TermCreateArgs} args - Arguments to create a Term.
     * @example
     * // Create one Term
     * const Term = await prisma.term.create({
     *   data: {
     *     // ... data to create a Term
     *   }
     * })
     * 
     */
    create<T extends TermCreateArgs>(args: SelectSubset<T, TermCreateArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Terms.
     * @param {TermCreateManyArgs} args - Arguments to create many Terms.
     * @example
     * // Create many Terms
     * const term = await prisma.term.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TermCreateManyArgs>(args?: SelectSubset<T, TermCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Term.
     * @param {TermDeleteArgs} args - Arguments to delete one Term.
     * @example
     * // Delete one Term
     * const Term = await prisma.term.delete({
     *   where: {
     *     // ... filter to delete one Term
     *   }
     * })
     * 
     */
    delete<T extends TermDeleteArgs>(args: SelectSubset<T, TermDeleteArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Term.
     * @param {TermUpdateArgs} args - Arguments to update one Term.
     * @example
     * // Update one Term
     * const term = await prisma.term.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TermUpdateArgs>(args: SelectSubset<T, TermUpdateArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Terms.
     * @param {TermDeleteManyArgs} args - Arguments to filter Terms to delete.
     * @example
     * // Delete a few Terms
     * const { count } = await prisma.term.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TermDeleteManyArgs>(args?: SelectSubset<T, TermDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Terms
     * const term = await prisma.term.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TermUpdateManyArgs>(args: SelectSubset<T, TermUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Term.
     * @param {TermUpsertArgs} args - Arguments to update or create a Term.
     * @example
     * // Update or create a Term
     * const term = await prisma.term.upsert({
     *   create: {
     *     // ... data to create a Term
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Term we want to update
     *   }
     * })
     */
    upsert<T extends TermUpsertArgs>(args: SelectSubset<T, TermUpsertArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermCountArgs} args - Arguments to filter Terms to count.
     * @example
     * // Count the number of Terms
     * const count = await prisma.term.count({
     *   where: {
     *     // ... the filter for the Terms we want to count
     *   }
     * })
    **/
    count<T extends TermCountArgs>(
      args?: Subset<T, TermCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TermCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TermAggregateArgs>(args: Subset<T, TermAggregateArgs>): Prisma.PrismaPromise<GetTermAggregateType<T>>

    /**
     * Group by Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TermGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TermGroupByArgs['orderBy'] }
        : { orderBy?: TermGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Term model
   */
  readonly fields: TermFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Term.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TermClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feeDetail<T extends FeeDetailsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeeDetailsDefaultArgs<ExtArgs>>): Prisma__FeeDetailsClient<$Result.GetResult<Prisma.$FeeDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Term model
   */
  interface TermFieldRefs {
    readonly id: FieldRef<"Term", 'Int'>
    readonly feeId: FieldRef<"Term", 'Int'>
    readonly termNumber: FieldRef<"Term", 'Int'>
    readonly amount: FieldRef<"Term", 'Float'>
    readonly dueDate: FieldRef<"Term", 'DateTime'>
    readonly isPaid: FieldRef<"Term", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Term findUnique
   */
  export type TermFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term findUniqueOrThrow
   */
  export type TermFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term findFirst
   */
  export type TermFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     */
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * Term findFirstOrThrow
   */
  export type TermFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     */
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * Term findMany
   */
  export type TermFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Terms to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * Term create
   */
  export type TermCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * The data needed to create a Term.
     */
    data: XOR<TermCreateInput, TermUncheckedCreateInput>
  }

  /**
   * Term createMany
   */
  export type TermCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Terms.
     */
    data: TermCreateManyInput | TermCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Term update
   */
  export type TermUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * The data needed to update a Term.
     */
    data: XOR<TermUpdateInput, TermUncheckedUpdateInput>
    /**
     * Choose, which Term to update.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term updateMany
   */
  export type TermUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Terms.
     */
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyInput>
    /**
     * Filter which Terms to update
     */
    where?: TermWhereInput
    /**
     * Limit how many Terms to update.
     */
    limit?: number
  }

  /**
   * Term upsert
   */
  export type TermUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * The filter to search for the Term to update in case it exists.
     */
    where: TermWhereUniqueInput
    /**
     * In case the Term found by the `where` argument doesn't exist, create a new Term with this data.
     */
    create: XOR<TermCreateInput, TermUncheckedCreateInput>
    /**
     * In case the Term was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TermUpdateInput, TermUncheckedUpdateInput>
  }

  /**
   * Term delete
   */
  export type TermDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter which Term to delete.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term deleteMany
   */
  export type TermDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Terms to delete
     */
    where?: TermWhereInput
    /**
     * Limit how many Terms to delete.
     */
    limit?: number
  }

  /**
   * Term without action
   */
  export type TermDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type SubjectSumAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    classId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    classId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    name: number
    code: number
    classId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    id?: true
    classId?: true
  }

  export type SubjectSumAggregateInputType = {
    id?: true
    classId?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    classId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    classId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    classId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: number
    name: string
    code: string | null
    classId: number
    createdAt: Date
    updatedAt: Date
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    classId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    timePeriods?: boolean | Subject$timePeriodsArgs<ExtArgs>
    marksheets?: boolean | Subject$marksheetsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>



  export type SubjectSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    classId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "classId" | "createdAt" | "updatedAt", ExtArgs["result"]["subject"]>
  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    timePeriods?: boolean | Subject$timePeriodsArgs<ExtArgs>
    marksheets?: boolean | Subject$marksheetsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      timePeriods: Prisma.$TimePeriodPayload<ExtArgs>[]
      marksheets: Prisma.$MarksSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string | null
      classId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    timePeriods<T extends Subject$timePeriodsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$timePeriodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    marksheets<T extends Subject$marksheetsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$marksheetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'Int'>
    readonly name: FieldRef<"Subject", 'String'>
    readonly code: FieldRef<"Subject", 'String'>
    readonly classId: FieldRef<"Subject", 'Int'>
    readonly createdAt: FieldRef<"Subject", 'DateTime'>
    readonly updatedAt: FieldRef<"Subject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to delete.
     */
    limit?: number
  }

  /**
   * Subject.timePeriods
   */
  export type Subject$timePeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    where?: TimePeriodWhereInput
    orderBy?: TimePeriodOrderByWithRelationInput | TimePeriodOrderByWithRelationInput[]
    cursor?: TimePeriodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimePeriodScalarFieldEnum | TimePeriodScalarFieldEnum[]
  }

  /**
   * Subject.marksheets
   */
  export type Subject$marksheetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    where?: MarksSubjectWhereInput
    orderBy?: MarksSubjectOrderByWithRelationInput | MarksSubjectOrderByWithRelationInput[]
    cursor?: MarksSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarksSubjectScalarFieldEnum | MarksSubjectScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model MasterDropdown
   */

  export type AggregateMasterDropdown = {
    _count: MasterDropdownCountAggregateOutputType | null
    _avg: MasterDropdownAvgAggregateOutputType | null
    _sum: MasterDropdownSumAggregateOutputType | null
    _min: MasterDropdownMinAggregateOutputType | null
    _max: MasterDropdownMaxAggregateOutputType | null
  }

  export type MasterDropdownAvgAggregateOutputType = {
    id: number | null
  }

  export type MasterDropdownSumAggregateOutputType = {
    id: number | null
  }

  export type MasterDropdownMinAggregateOutputType = {
    id: number | null
    type: string | null
    value: string | null
  }

  export type MasterDropdownMaxAggregateOutputType = {
    id: number | null
    type: string | null
    value: string | null
  }

  export type MasterDropdownCountAggregateOutputType = {
    id: number
    type: number
    value: number
    _all: number
  }


  export type MasterDropdownAvgAggregateInputType = {
    id?: true
  }

  export type MasterDropdownSumAggregateInputType = {
    id?: true
  }

  export type MasterDropdownMinAggregateInputType = {
    id?: true
    type?: true
    value?: true
  }

  export type MasterDropdownMaxAggregateInputType = {
    id?: true
    type?: true
    value?: true
  }

  export type MasterDropdownCountAggregateInputType = {
    id?: true
    type?: true
    value?: true
    _all?: true
  }

  export type MasterDropdownAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterDropdown to aggregate.
     */
    where?: MasterDropdownWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterDropdowns to fetch.
     */
    orderBy?: MasterDropdownOrderByWithRelationInput | MasterDropdownOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterDropdownWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterDropdowns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterDropdowns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterDropdowns
    **/
    _count?: true | MasterDropdownCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterDropdownAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterDropdownSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterDropdownMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterDropdownMaxAggregateInputType
  }

  export type GetMasterDropdownAggregateType<T extends MasterDropdownAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterDropdown]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterDropdown[P]>
      : GetScalarType<T[P], AggregateMasterDropdown[P]>
  }




  export type MasterDropdownGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterDropdownWhereInput
    orderBy?: MasterDropdownOrderByWithAggregationInput | MasterDropdownOrderByWithAggregationInput[]
    by: MasterDropdownScalarFieldEnum[] | MasterDropdownScalarFieldEnum
    having?: MasterDropdownScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterDropdownCountAggregateInputType | true
    _avg?: MasterDropdownAvgAggregateInputType
    _sum?: MasterDropdownSumAggregateInputType
    _min?: MasterDropdownMinAggregateInputType
    _max?: MasterDropdownMaxAggregateInputType
  }

  export type MasterDropdownGroupByOutputType = {
    id: number
    type: string
    value: string
    _count: MasterDropdownCountAggregateOutputType | null
    _avg: MasterDropdownAvgAggregateOutputType | null
    _sum: MasterDropdownSumAggregateOutputType | null
    _min: MasterDropdownMinAggregateOutputType | null
    _max: MasterDropdownMaxAggregateOutputType | null
  }

  type GetMasterDropdownGroupByPayload<T extends MasterDropdownGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterDropdownGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterDropdownGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterDropdownGroupByOutputType[P]>
            : GetScalarType<T[P], MasterDropdownGroupByOutputType[P]>
        }
      >
    >


  export type MasterDropdownSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    value?: boolean
    students?: boolean | MasterDropdown$studentsArgs<ExtArgs>
    genderStaff?: boolean | MasterDropdown$genderStaffArgs<ExtArgs>
    qualificationStaff?: boolean | MasterDropdown$qualificationStaffArgs<ExtArgs>
    departmentStaff?: boolean | MasterDropdown$departmentStaffArgs<ExtArgs>
    designationStaff?: boolean | MasterDropdown$designationStaffArgs<ExtArgs>
    staffTypeStaff?: boolean | MasterDropdown$staffTypeStaffArgs<ExtArgs>
    feeItems?: boolean | MasterDropdown$feeItemsArgs<ExtArgs>
    _count?: boolean | MasterDropdownCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterDropdown"]>



  export type MasterDropdownSelectScalar = {
    id?: boolean
    type?: boolean
    value?: boolean
  }

  export type MasterDropdownOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "value", ExtArgs["result"]["masterDropdown"]>
  export type MasterDropdownInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | MasterDropdown$studentsArgs<ExtArgs>
    genderStaff?: boolean | MasterDropdown$genderStaffArgs<ExtArgs>
    qualificationStaff?: boolean | MasterDropdown$qualificationStaffArgs<ExtArgs>
    departmentStaff?: boolean | MasterDropdown$departmentStaffArgs<ExtArgs>
    designationStaff?: boolean | MasterDropdown$designationStaffArgs<ExtArgs>
    staffTypeStaff?: boolean | MasterDropdown$staffTypeStaffArgs<ExtArgs>
    feeItems?: boolean | MasterDropdown$feeItemsArgs<ExtArgs>
    _count?: boolean | MasterDropdownCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MasterDropdownPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterDropdown"
    objects: {
      students: Prisma.$StudentPayload<ExtArgs>[]
      genderStaff: Prisma.$StaffPayload<ExtArgs>[]
      qualificationStaff: Prisma.$StaffPayload<ExtArgs>[]
      departmentStaff: Prisma.$StaffPayload<ExtArgs>[]
      designationStaff: Prisma.$StaffPayload<ExtArgs>[]
      staffTypeStaff: Prisma.$StaffPayload<ExtArgs>[]
      feeItems: Prisma.$FeeItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
      value: string
    }, ExtArgs["result"]["masterDropdown"]>
    composites: {}
  }

  type MasterDropdownGetPayload<S extends boolean | null | undefined | MasterDropdownDefaultArgs> = $Result.GetResult<Prisma.$MasterDropdownPayload, S>

  type MasterDropdownCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterDropdownFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterDropdownCountAggregateInputType | true
    }

  export interface MasterDropdownDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterDropdown'], meta: { name: 'MasterDropdown' } }
    /**
     * Find zero or one MasterDropdown that matches the filter.
     * @param {MasterDropdownFindUniqueArgs} args - Arguments to find a MasterDropdown
     * @example
     * // Get one MasterDropdown
     * const masterDropdown = await prisma.masterDropdown.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterDropdownFindUniqueArgs>(args: SelectSubset<T, MasterDropdownFindUniqueArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MasterDropdown that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterDropdownFindUniqueOrThrowArgs} args - Arguments to find a MasterDropdown
     * @example
     * // Get one MasterDropdown
     * const masterDropdown = await prisma.masterDropdown.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterDropdownFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterDropdownFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterDropdown that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterDropdownFindFirstArgs} args - Arguments to find a MasterDropdown
     * @example
     * // Get one MasterDropdown
     * const masterDropdown = await prisma.masterDropdown.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterDropdownFindFirstArgs>(args?: SelectSubset<T, MasterDropdownFindFirstArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterDropdown that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterDropdownFindFirstOrThrowArgs} args - Arguments to find a MasterDropdown
     * @example
     * // Get one MasterDropdown
     * const masterDropdown = await prisma.masterDropdown.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterDropdownFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterDropdownFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MasterDropdowns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterDropdownFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterDropdowns
     * const masterDropdowns = await prisma.masterDropdown.findMany()
     * 
     * // Get first 10 MasterDropdowns
     * const masterDropdowns = await prisma.masterDropdown.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterDropdownWithIdOnly = await prisma.masterDropdown.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterDropdownFindManyArgs>(args?: SelectSubset<T, MasterDropdownFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MasterDropdown.
     * @param {MasterDropdownCreateArgs} args - Arguments to create a MasterDropdown.
     * @example
     * // Create one MasterDropdown
     * const MasterDropdown = await prisma.masterDropdown.create({
     *   data: {
     *     // ... data to create a MasterDropdown
     *   }
     * })
     * 
     */
    create<T extends MasterDropdownCreateArgs>(args: SelectSubset<T, MasterDropdownCreateArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MasterDropdowns.
     * @param {MasterDropdownCreateManyArgs} args - Arguments to create many MasterDropdowns.
     * @example
     * // Create many MasterDropdowns
     * const masterDropdown = await prisma.masterDropdown.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterDropdownCreateManyArgs>(args?: SelectSubset<T, MasterDropdownCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MasterDropdown.
     * @param {MasterDropdownDeleteArgs} args - Arguments to delete one MasterDropdown.
     * @example
     * // Delete one MasterDropdown
     * const MasterDropdown = await prisma.masterDropdown.delete({
     *   where: {
     *     // ... filter to delete one MasterDropdown
     *   }
     * })
     * 
     */
    delete<T extends MasterDropdownDeleteArgs>(args: SelectSubset<T, MasterDropdownDeleteArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MasterDropdown.
     * @param {MasterDropdownUpdateArgs} args - Arguments to update one MasterDropdown.
     * @example
     * // Update one MasterDropdown
     * const masterDropdown = await prisma.masterDropdown.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterDropdownUpdateArgs>(args: SelectSubset<T, MasterDropdownUpdateArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MasterDropdowns.
     * @param {MasterDropdownDeleteManyArgs} args - Arguments to filter MasterDropdowns to delete.
     * @example
     * // Delete a few MasterDropdowns
     * const { count } = await prisma.masterDropdown.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterDropdownDeleteManyArgs>(args?: SelectSubset<T, MasterDropdownDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterDropdowns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterDropdownUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterDropdowns
     * const masterDropdown = await prisma.masterDropdown.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterDropdownUpdateManyArgs>(args: SelectSubset<T, MasterDropdownUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MasterDropdown.
     * @param {MasterDropdownUpsertArgs} args - Arguments to update or create a MasterDropdown.
     * @example
     * // Update or create a MasterDropdown
     * const masterDropdown = await prisma.masterDropdown.upsert({
     *   create: {
     *     // ... data to create a MasterDropdown
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterDropdown we want to update
     *   }
     * })
     */
    upsert<T extends MasterDropdownUpsertArgs>(args: SelectSubset<T, MasterDropdownUpsertArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MasterDropdowns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterDropdownCountArgs} args - Arguments to filter MasterDropdowns to count.
     * @example
     * // Count the number of MasterDropdowns
     * const count = await prisma.masterDropdown.count({
     *   where: {
     *     // ... the filter for the MasterDropdowns we want to count
     *   }
     * })
    **/
    count<T extends MasterDropdownCountArgs>(
      args?: Subset<T, MasterDropdownCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterDropdownCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterDropdown.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterDropdownAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterDropdownAggregateArgs>(args: Subset<T, MasterDropdownAggregateArgs>): Prisma.PrismaPromise<GetMasterDropdownAggregateType<T>>

    /**
     * Group by MasterDropdown.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterDropdownGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterDropdownGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterDropdownGroupByArgs['orderBy'] }
        : { orderBy?: MasterDropdownGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterDropdownGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterDropdownGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterDropdown model
   */
  readonly fields: MasterDropdownFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterDropdown.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterDropdownClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends MasterDropdown$studentsArgs<ExtArgs> = {}>(args?: Subset<T, MasterDropdown$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    genderStaff<T extends MasterDropdown$genderStaffArgs<ExtArgs> = {}>(args?: Subset<T, MasterDropdown$genderStaffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    qualificationStaff<T extends MasterDropdown$qualificationStaffArgs<ExtArgs> = {}>(args?: Subset<T, MasterDropdown$qualificationStaffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    departmentStaff<T extends MasterDropdown$departmentStaffArgs<ExtArgs> = {}>(args?: Subset<T, MasterDropdown$departmentStaffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    designationStaff<T extends MasterDropdown$designationStaffArgs<ExtArgs> = {}>(args?: Subset<T, MasterDropdown$designationStaffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    staffTypeStaff<T extends MasterDropdown$staffTypeStaffArgs<ExtArgs> = {}>(args?: Subset<T, MasterDropdown$staffTypeStaffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feeItems<T extends MasterDropdown$feeItemsArgs<ExtArgs> = {}>(args?: Subset<T, MasterDropdown$feeItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterDropdown model
   */
  interface MasterDropdownFieldRefs {
    readonly id: FieldRef<"MasterDropdown", 'Int'>
    readonly type: FieldRef<"MasterDropdown", 'String'>
    readonly value: FieldRef<"MasterDropdown", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MasterDropdown findUnique
   */
  export type MasterDropdownFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    /**
     * Filter, which MasterDropdown to fetch.
     */
    where: MasterDropdownWhereUniqueInput
  }

  /**
   * MasterDropdown findUniqueOrThrow
   */
  export type MasterDropdownFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    /**
     * Filter, which MasterDropdown to fetch.
     */
    where: MasterDropdownWhereUniqueInput
  }

  /**
   * MasterDropdown findFirst
   */
  export type MasterDropdownFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    /**
     * Filter, which MasterDropdown to fetch.
     */
    where?: MasterDropdownWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterDropdowns to fetch.
     */
    orderBy?: MasterDropdownOrderByWithRelationInput | MasterDropdownOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterDropdowns.
     */
    cursor?: MasterDropdownWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterDropdowns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterDropdowns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterDropdowns.
     */
    distinct?: MasterDropdownScalarFieldEnum | MasterDropdownScalarFieldEnum[]
  }

  /**
   * MasterDropdown findFirstOrThrow
   */
  export type MasterDropdownFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    /**
     * Filter, which MasterDropdown to fetch.
     */
    where?: MasterDropdownWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterDropdowns to fetch.
     */
    orderBy?: MasterDropdownOrderByWithRelationInput | MasterDropdownOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterDropdowns.
     */
    cursor?: MasterDropdownWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterDropdowns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterDropdowns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterDropdowns.
     */
    distinct?: MasterDropdownScalarFieldEnum | MasterDropdownScalarFieldEnum[]
  }

  /**
   * MasterDropdown findMany
   */
  export type MasterDropdownFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    /**
     * Filter, which MasterDropdowns to fetch.
     */
    where?: MasterDropdownWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterDropdowns to fetch.
     */
    orderBy?: MasterDropdownOrderByWithRelationInput | MasterDropdownOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterDropdowns.
     */
    cursor?: MasterDropdownWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterDropdowns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterDropdowns.
     */
    skip?: number
    distinct?: MasterDropdownScalarFieldEnum | MasterDropdownScalarFieldEnum[]
  }

  /**
   * MasterDropdown create
   */
  export type MasterDropdownCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterDropdown.
     */
    data: XOR<MasterDropdownCreateInput, MasterDropdownUncheckedCreateInput>
  }

  /**
   * MasterDropdown createMany
   */
  export type MasterDropdownCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterDropdowns.
     */
    data: MasterDropdownCreateManyInput | MasterDropdownCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterDropdown update
   */
  export type MasterDropdownUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterDropdown.
     */
    data: XOR<MasterDropdownUpdateInput, MasterDropdownUncheckedUpdateInput>
    /**
     * Choose, which MasterDropdown to update.
     */
    where: MasterDropdownWhereUniqueInput
  }

  /**
   * MasterDropdown updateMany
   */
  export type MasterDropdownUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterDropdowns.
     */
    data: XOR<MasterDropdownUpdateManyMutationInput, MasterDropdownUncheckedUpdateManyInput>
    /**
     * Filter which MasterDropdowns to update
     */
    where?: MasterDropdownWhereInput
    /**
     * Limit how many MasterDropdowns to update.
     */
    limit?: number
  }

  /**
   * MasterDropdown upsert
   */
  export type MasterDropdownUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterDropdown to update in case it exists.
     */
    where: MasterDropdownWhereUniqueInput
    /**
     * In case the MasterDropdown found by the `where` argument doesn't exist, create a new MasterDropdown with this data.
     */
    create: XOR<MasterDropdownCreateInput, MasterDropdownUncheckedCreateInput>
    /**
     * In case the MasterDropdown was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterDropdownUpdateInput, MasterDropdownUncheckedUpdateInput>
  }

  /**
   * MasterDropdown delete
   */
  export type MasterDropdownDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    /**
     * Filter which MasterDropdown to delete.
     */
    where: MasterDropdownWhereUniqueInput
  }

  /**
   * MasterDropdown deleteMany
   */
  export type MasterDropdownDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterDropdowns to delete
     */
    where?: MasterDropdownWhereInput
    /**
     * Limit how many MasterDropdowns to delete.
     */
    limit?: number
  }

  /**
   * MasterDropdown.students
   */
  export type MasterDropdown$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * MasterDropdown.genderStaff
   */
  export type MasterDropdown$genderStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    cursor?: StaffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * MasterDropdown.qualificationStaff
   */
  export type MasterDropdown$qualificationStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    cursor?: StaffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * MasterDropdown.departmentStaff
   */
  export type MasterDropdown$departmentStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    cursor?: StaffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * MasterDropdown.designationStaff
   */
  export type MasterDropdown$designationStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    cursor?: StaffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * MasterDropdown.staffTypeStaff
   */
  export type MasterDropdown$staffTypeStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    cursor?: StaffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * MasterDropdown.feeItems
   */
  export type MasterDropdown$feeItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    where?: FeeItemWhereInput
    orderBy?: FeeItemOrderByWithRelationInput | FeeItemOrderByWithRelationInput[]
    cursor?: FeeItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeeItemScalarFieldEnum | FeeItemScalarFieldEnum[]
  }

  /**
   * MasterDropdown without action
   */
  export type MasterDropdownDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
  }


  /**
   * Model Staff
   */

  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffAvgAggregateOutputType = {
    id: number | null
    genderId: number | null
    qualificationId: number | null
    departmentId: number | null
    designationId: number | null
    staffTypeId: number | null
    salary: number | null
  }

  export type StaffSumAggregateOutputType = {
    id: number | null
    genderId: number | null
    qualificationId: number | null
    departmentId: number | null
    designationId: number | null
    staffTypeId: number | null
    salary: number | null
  }

  export type StaffMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    genderId: number | null
    qualificationId: number | null
    departmentId: number | null
    designationId: number | null
    staffTypeId: number | null
    experience: string | null
    mobileNumber: string | null
    email: string | null
    username: string | null
    password: string | null
    salary: number | null
    isActive: boolean | null
    isTransportRequired: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    genderId: number | null
    qualificationId: number | null
    departmentId: number | null
    designationId: number | null
    staffTypeId: number | null
    experience: string | null
    mobileNumber: string | null
    email: string | null
    username: string | null
    password: string | null
    salary: number | null
    isActive: boolean | null
    isTransportRequired: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    genderId: number
    qualificationId: number
    departmentId: number
    designationId: number
    staffTypeId: number
    experience: number
    mobileNumber: number
    email: number
    username: number
    password: number
    salary: number
    isActive: number
    isTransportRequired: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StaffAvgAggregateInputType = {
    id?: true
    genderId?: true
    qualificationId?: true
    departmentId?: true
    designationId?: true
    staffTypeId?: true
    salary?: true
  }

  export type StaffSumAggregateInputType = {
    id?: true
    genderId?: true
    qualificationId?: true
    departmentId?: true
    designationId?: true
    staffTypeId?: true
    salary?: true
  }

  export type StaffMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    genderId?: true
    qualificationId?: true
    departmentId?: true
    designationId?: true
    staffTypeId?: true
    experience?: true
    mobileNumber?: true
    email?: true
    username?: true
    password?: true
    salary?: true
    isActive?: true
    isTransportRequired?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    genderId?: true
    qualificationId?: true
    departmentId?: true
    designationId?: true
    staffTypeId?: true
    experience?: true
    mobileNumber?: true
    email?: true
    username?: true
    password?: true
    salary?: true
    isActive?: true
    isTransportRequired?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    genderId?: true
    qualificationId?: true
    departmentId?: true
    designationId?: true
    staffTypeId?: true
    experience?: true
    mobileNumber?: true
    email?: true
    username?: true
    password?: true
    salary?: true
    isActive?: true
    isTransportRequired?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StaffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to aggregate.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type StaffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithAggregationInput | StaffOrderByWithAggregationInput[]
    by: StaffScalarFieldEnum[] | StaffScalarFieldEnum
    having?: StaffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _avg?: StaffAvgAggregateInputType
    _sum?: StaffSumAggregateInputType
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }

  export type StaffGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    genderId: number | null
    qualificationId: number | null
    departmentId: number | null
    designationId: number | null
    staffTypeId: number | null
    experience: string | null
    mobileNumber: string | null
    email: string | null
    username: string
    password: string
    salary: number | null
    isActive: boolean
    isTransportRequired: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends StaffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type StaffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    genderId?: boolean
    qualificationId?: boolean
    departmentId?: boolean
    designationId?: boolean
    staffTypeId?: boolean
    experience?: boolean
    mobileNumber?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    salary?: boolean
    isActive?: boolean
    isTransportRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gender?: boolean | Staff$genderArgs<ExtArgs>
    qualification?: boolean | Staff$qualificationArgs<ExtArgs>
    department?: boolean | Staff$departmentArgs<ExtArgs>
    designation?: boolean | Staff$designationArgs<ExtArgs>
    staffType?: boolean | Staff$staffTypeArgs<ExtArgs>
    timePeriods?: boolean | Staff$timePeriodsArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>



  export type StaffSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    genderId?: boolean
    qualificationId?: boolean
    departmentId?: boolean
    designationId?: boolean
    staffTypeId?: boolean
    experience?: boolean
    mobileNumber?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    salary?: boolean
    isActive?: boolean
    isTransportRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StaffOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "genderId" | "qualificationId" | "departmentId" | "designationId" | "staffTypeId" | "experience" | "mobileNumber" | "email" | "username" | "password" | "salary" | "isActive" | "isTransportRequired" | "createdAt" | "updatedAt", ExtArgs["result"]["staff"]>
  export type StaffInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gender?: boolean | Staff$genderArgs<ExtArgs>
    qualification?: boolean | Staff$qualificationArgs<ExtArgs>
    department?: boolean | Staff$departmentArgs<ExtArgs>
    designation?: boolean | Staff$designationArgs<ExtArgs>
    staffType?: boolean | Staff$staffTypeArgs<ExtArgs>
    timePeriods?: boolean | Staff$timePeriodsArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $StaffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Staff"
    objects: {
      gender: Prisma.$MasterDropdownPayload<ExtArgs> | null
      qualification: Prisma.$MasterDropdownPayload<ExtArgs> | null
      department: Prisma.$MasterDropdownPayload<ExtArgs> | null
      designation: Prisma.$MasterDropdownPayload<ExtArgs> | null
      staffType: Prisma.$MasterDropdownPayload<ExtArgs> | null
      timePeriods: Prisma.$TimePeriodPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      genderId: number | null
      qualificationId: number | null
      departmentId: number | null
      designationId: number | null
      staffTypeId: number | null
      experience: string | null
      mobileNumber: string | null
      email: string | null
      username: string
      password: string
      salary: number | null
      isActive: boolean
      isTransportRequired: boolean | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["staff"]>
    composites: {}
  }

  type StaffGetPayload<S extends boolean | null | undefined | StaffDefaultArgs> = $Result.GetResult<Prisma.$StaffPayload, S>

  type StaffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffCountAggregateInputType | true
    }

  export interface StaffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Staff'], meta: { name: 'Staff' } }
    /**
     * Find zero or one Staff that matches the filter.
     * @param {StaffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffFindUniqueArgs>(args: SelectSubset<T, StaffFindUniqueArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Staff that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffFindFirstArgs>(args?: SelectSubset<T, StaffFindFirstArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffWithIdOnly = await prisma.staff.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffFindManyArgs>(args?: SelectSubset<T, StaffFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Staff.
     * @param {StaffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
     */
    create<T extends StaffCreateArgs>(args: SelectSubset<T, StaffCreateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Staff.
     * @param {StaffCreateManyArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffCreateManyArgs>(args?: SelectSubset<T, StaffCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Staff.
     * @param {StaffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
     */
    delete<T extends StaffDeleteArgs>(args: SelectSubset<T, StaffDeleteArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Staff.
     * @param {StaffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffUpdateArgs>(args: SelectSubset<T, StaffUpdateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Staff.
     * @param {StaffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffDeleteManyArgs>(args?: SelectSubset<T, StaffDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffUpdateManyArgs>(args: SelectSubset<T, StaffUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Staff.
     * @param {StaffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
     */
    upsert<T extends StaffUpsertArgs>(args: SelectSubset<T, StaffUpsertArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends StaffCountArgs>(
      args?: Subset<T, StaffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): Prisma.PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffGroupByArgs['orderBy'] }
        : { orderBy?: StaffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Staff model
   */
  readonly fields: StaffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gender<T extends Staff$genderArgs<ExtArgs> = {}>(args?: Subset<T, Staff$genderArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    qualification<T extends Staff$qualificationArgs<ExtArgs> = {}>(args?: Subset<T, Staff$qualificationArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    department<T extends Staff$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Staff$departmentArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    designation<T extends Staff$designationArgs<ExtArgs> = {}>(args?: Subset<T, Staff$designationArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    staffType<T extends Staff$staffTypeArgs<ExtArgs> = {}>(args?: Subset<T, Staff$staffTypeArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    timePeriods<T extends Staff$timePeriodsArgs<ExtArgs> = {}>(args?: Subset<T, Staff$timePeriodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Staff model
   */
  interface StaffFieldRefs {
    readonly id: FieldRef<"Staff", 'Int'>
    readonly firstName: FieldRef<"Staff", 'String'>
    readonly lastName: FieldRef<"Staff", 'String'>
    readonly genderId: FieldRef<"Staff", 'Int'>
    readonly qualificationId: FieldRef<"Staff", 'Int'>
    readonly departmentId: FieldRef<"Staff", 'Int'>
    readonly designationId: FieldRef<"Staff", 'Int'>
    readonly staffTypeId: FieldRef<"Staff", 'Int'>
    readonly experience: FieldRef<"Staff", 'String'>
    readonly mobileNumber: FieldRef<"Staff", 'String'>
    readonly email: FieldRef<"Staff", 'String'>
    readonly username: FieldRef<"Staff", 'String'>
    readonly password: FieldRef<"Staff", 'String'>
    readonly salary: FieldRef<"Staff", 'Float'>
    readonly isActive: FieldRef<"Staff", 'Boolean'>
    readonly isTransportRequired: FieldRef<"Staff", 'Boolean'>
    readonly createdAt: FieldRef<"Staff", 'DateTime'>
    readonly updatedAt: FieldRef<"Staff", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Staff findUnique
   */
  export type StaffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findUniqueOrThrow
   */
  export type StaffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findFirst
   */
  export type StaffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findFirstOrThrow
   */
  export type StaffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findMany
   */
  export type StaffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff create
   */
  export type StaffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to create a Staff.
     */
    data: XOR<StaffCreateInput, StaffUncheckedCreateInput>
  }

  /**
   * Staff createMany
   */
  export type StaffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Staff update
   */
  export type StaffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to update a Staff.
     */
    data: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
    /**
     * Choose, which Staff to update.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff updateMany
   */
  export type StaffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to update.
     */
    limit?: number
  }

  /**
   * Staff upsert
   */
  export type StaffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The filter to search for the Staff to update in case it exists.
     */
    where: StaffWhereUniqueInput
    /**
     * In case the Staff found by the `where` argument doesn't exist, create a new Staff with this data.
     */
    create: XOR<StaffCreateInput, StaffUncheckedCreateInput>
    /**
     * In case the Staff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
  }

  /**
   * Staff delete
   */
  export type StaffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter which Staff to delete.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff deleteMany
   */
  export type StaffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to delete
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to delete.
     */
    limit?: number
  }

  /**
   * Staff.gender
   */
  export type Staff$genderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    where?: MasterDropdownWhereInput
  }

  /**
   * Staff.qualification
   */
  export type Staff$qualificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    where?: MasterDropdownWhereInput
  }

  /**
   * Staff.department
   */
  export type Staff$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    where?: MasterDropdownWhereInput
  }

  /**
   * Staff.designation
   */
  export type Staff$designationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    where?: MasterDropdownWhereInput
  }

  /**
   * Staff.staffType
   */
  export type Staff$staffTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterDropdown
     */
    select?: MasterDropdownSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterDropdown
     */
    omit?: MasterDropdownOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterDropdownInclude<ExtArgs> | null
    where?: MasterDropdownWhereInput
  }

  /**
   * Staff.timePeriods
   */
  export type Staff$timePeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    where?: TimePeriodWhereInput
    orderBy?: TimePeriodOrderByWithRelationInput | TimePeriodOrderByWithRelationInput[]
    cursor?: TimePeriodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimePeriodScalarFieldEnum | TimePeriodScalarFieldEnum[]
  }

  /**
   * Staff without action
   */
  export type StaffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
  }


  /**
   * Model TimePeriod
   */

  export type AggregateTimePeriod = {
    _count: TimePeriodCountAggregateOutputType | null
    _avg: TimePeriodAvgAggregateOutputType | null
    _sum: TimePeriodSumAggregateOutputType | null
    _min: TimePeriodMinAggregateOutputType | null
    _max: TimePeriodMaxAggregateOutputType | null
  }

  export type TimePeriodAvgAggregateOutputType = {
    id: number | null
    subjectId: number | null
    classId: number | null
    sectionId: number | null
    teacherId: number | null
  }

  export type TimePeriodSumAggregateOutputType = {
    id: number | null
    subjectId: number | null
    classId: number | null
    sectionId: number | null
    teacherId: number | null
  }

  export type TimePeriodMinAggregateOutputType = {
    id: number | null
    periodName: string | null
    subjectId: number | null
    classId: number | null
    sectionId: number | null
    startDate: Date | null
    endDate: Date | null
    startTime: string | null
    endTime: string | null
    teacherId: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TimePeriodMaxAggregateOutputType = {
    id: number | null
    periodName: string | null
    subjectId: number | null
    classId: number | null
    sectionId: number | null
    startDate: Date | null
    endDate: Date | null
    startTime: string | null
    endTime: string | null
    teacherId: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TimePeriodCountAggregateOutputType = {
    id: number
    periodName: number
    subjectId: number
    classId: number
    sectionId: number
    startDate: number
    endDate: number
    startTime: number
    endTime: number
    teacherId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TimePeriodAvgAggregateInputType = {
    id?: true
    subjectId?: true
    classId?: true
    sectionId?: true
    teacherId?: true
  }

  export type TimePeriodSumAggregateInputType = {
    id?: true
    subjectId?: true
    classId?: true
    sectionId?: true
    teacherId?: true
  }

  export type TimePeriodMinAggregateInputType = {
    id?: true
    periodName?: true
    subjectId?: true
    classId?: true
    sectionId?: true
    startDate?: true
    endDate?: true
    startTime?: true
    endTime?: true
    teacherId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TimePeriodMaxAggregateInputType = {
    id?: true
    periodName?: true
    subjectId?: true
    classId?: true
    sectionId?: true
    startDate?: true
    endDate?: true
    startTime?: true
    endTime?: true
    teacherId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TimePeriodCountAggregateInputType = {
    id?: true
    periodName?: true
    subjectId?: true
    classId?: true
    sectionId?: true
    startDate?: true
    endDate?: true
    startTime?: true
    endTime?: true
    teacherId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TimePeriodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimePeriod to aggregate.
     */
    where?: TimePeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimePeriods to fetch.
     */
    orderBy?: TimePeriodOrderByWithRelationInput | TimePeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimePeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimePeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimePeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TimePeriods
    **/
    _count?: true | TimePeriodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TimePeriodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TimePeriodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimePeriodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimePeriodMaxAggregateInputType
  }

  export type GetTimePeriodAggregateType<T extends TimePeriodAggregateArgs> = {
        [P in keyof T & keyof AggregateTimePeriod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimePeriod[P]>
      : GetScalarType<T[P], AggregateTimePeriod[P]>
  }




  export type TimePeriodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimePeriodWhereInput
    orderBy?: TimePeriodOrderByWithAggregationInput | TimePeriodOrderByWithAggregationInput[]
    by: TimePeriodScalarFieldEnum[] | TimePeriodScalarFieldEnum
    having?: TimePeriodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimePeriodCountAggregateInputType | true
    _avg?: TimePeriodAvgAggregateInputType
    _sum?: TimePeriodSumAggregateInputType
    _min?: TimePeriodMinAggregateInputType
    _max?: TimePeriodMaxAggregateInputType
  }

  export type TimePeriodGroupByOutputType = {
    id: number
    periodName: string
    subjectId: number
    classId: number
    sectionId: number
    startDate: Date
    endDate: Date
    startTime: string
    endTime: string
    teacherId: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: TimePeriodCountAggregateOutputType | null
    _avg: TimePeriodAvgAggregateOutputType | null
    _sum: TimePeriodSumAggregateOutputType | null
    _min: TimePeriodMinAggregateOutputType | null
    _max: TimePeriodMaxAggregateOutputType | null
  }

  type GetTimePeriodGroupByPayload<T extends TimePeriodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimePeriodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimePeriodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimePeriodGroupByOutputType[P]>
            : GetScalarType<T[P], TimePeriodGroupByOutputType[P]>
        }
      >
    >


  export type TimePeriodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    periodName?: boolean
    subjectId?: boolean
    classId?: boolean
    sectionId?: boolean
    startDate?: boolean
    endDate?: boolean
    startTime?: boolean
    endTime?: boolean
    teacherId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    section?: boolean | SectionDefaultArgs<ExtArgs>
    assignedTeacher?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timePeriod"]>



  export type TimePeriodSelectScalar = {
    id?: boolean
    periodName?: boolean
    subjectId?: boolean
    classId?: boolean
    sectionId?: boolean
    startDate?: boolean
    endDate?: boolean
    startTime?: boolean
    endTime?: boolean
    teacherId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TimePeriodOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "periodName" | "subjectId" | "classId" | "sectionId" | "startDate" | "endDate" | "startTime" | "endTime" | "teacherId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["timePeriod"]>
  export type TimePeriodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    section?: boolean | SectionDefaultArgs<ExtArgs>
    assignedTeacher?: boolean | StaffDefaultArgs<ExtArgs>
  }

  export type $TimePeriodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TimePeriod"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
      section: Prisma.$SectionPayload<ExtArgs>
      assignedTeacher: Prisma.$StaffPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      periodName: string
      subjectId: number
      classId: number
      sectionId: number
      startDate: Date
      endDate: Date
      startTime: string
      endTime: string
      teacherId: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["timePeriod"]>
    composites: {}
  }

  type TimePeriodGetPayload<S extends boolean | null | undefined | TimePeriodDefaultArgs> = $Result.GetResult<Prisma.$TimePeriodPayload, S>

  type TimePeriodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TimePeriodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TimePeriodCountAggregateInputType | true
    }

  export interface TimePeriodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TimePeriod'], meta: { name: 'TimePeriod' } }
    /**
     * Find zero or one TimePeriod that matches the filter.
     * @param {TimePeriodFindUniqueArgs} args - Arguments to find a TimePeriod
     * @example
     * // Get one TimePeriod
     * const timePeriod = await prisma.timePeriod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TimePeriodFindUniqueArgs>(args: SelectSubset<T, TimePeriodFindUniqueArgs<ExtArgs>>): Prisma__TimePeriodClient<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TimePeriod that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TimePeriodFindUniqueOrThrowArgs} args - Arguments to find a TimePeriod
     * @example
     * // Get one TimePeriod
     * const timePeriod = await prisma.timePeriod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TimePeriodFindUniqueOrThrowArgs>(args: SelectSubset<T, TimePeriodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TimePeriodClient<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TimePeriod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimePeriodFindFirstArgs} args - Arguments to find a TimePeriod
     * @example
     * // Get one TimePeriod
     * const timePeriod = await prisma.timePeriod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TimePeriodFindFirstArgs>(args?: SelectSubset<T, TimePeriodFindFirstArgs<ExtArgs>>): Prisma__TimePeriodClient<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TimePeriod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimePeriodFindFirstOrThrowArgs} args - Arguments to find a TimePeriod
     * @example
     * // Get one TimePeriod
     * const timePeriod = await prisma.timePeriod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TimePeriodFindFirstOrThrowArgs>(args?: SelectSubset<T, TimePeriodFindFirstOrThrowArgs<ExtArgs>>): Prisma__TimePeriodClient<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TimePeriods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimePeriodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TimePeriods
     * const timePeriods = await prisma.timePeriod.findMany()
     * 
     * // Get first 10 TimePeriods
     * const timePeriods = await prisma.timePeriod.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timePeriodWithIdOnly = await prisma.timePeriod.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TimePeriodFindManyArgs>(args?: SelectSubset<T, TimePeriodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TimePeriod.
     * @param {TimePeriodCreateArgs} args - Arguments to create a TimePeriod.
     * @example
     * // Create one TimePeriod
     * const TimePeriod = await prisma.timePeriod.create({
     *   data: {
     *     // ... data to create a TimePeriod
     *   }
     * })
     * 
     */
    create<T extends TimePeriodCreateArgs>(args: SelectSubset<T, TimePeriodCreateArgs<ExtArgs>>): Prisma__TimePeriodClient<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TimePeriods.
     * @param {TimePeriodCreateManyArgs} args - Arguments to create many TimePeriods.
     * @example
     * // Create many TimePeriods
     * const timePeriod = await prisma.timePeriod.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TimePeriodCreateManyArgs>(args?: SelectSubset<T, TimePeriodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TimePeriod.
     * @param {TimePeriodDeleteArgs} args - Arguments to delete one TimePeriod.
     * @example
     * // Delete one TimePeriod
     * const TimePeriod = await prisma.timePeriod.delete({
     *   where: {
     *     // ... filter to delete one TimePeriod
     *   }
     * })
     * 
     */
    delete<T extends TimePeriodDeleteArgs>(args: SelectSubset<T, TimePeriodDeleteArgs<ExtArgs>>): Prisma__TimePeriodClient<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TimePeriod.
     * @param {TimePeriodUpdateArgs} args - Arguments to update one TimePeriod.
     * @example
     * // Update one TimePeriod
     * const timePeriod = await prisma.timePeriod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TimePeriodUpdateArgs>(args: SelectSubset<T, TimePeriodUpdateArgs<ExtArgs>>): Prisma__TimePeriodClient<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TimePeriods.
     * @param {TimePeriodDeleteManyArgs} args - Arguments to filter TimePeriods to delete.
     * @example
     * // Delete a few TimePeriods
     * const { count } = await prisma.timePeriod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TimePeriodDeleteManyArgs>(args?: SelectSubset<T, TimePeriodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimePeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimePeriodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TimePeriods
     * const timePeriod = await prisma.timePeriod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TimePeriodUpdateManyArgs>(args: SelectSubset<T, TimePeriodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TimePeriod.
     * @param {TimePeriodUpsertArgs} args - Arguments to update or create a TimePeriod.
     * @example
     * // Update or create a TimePeriod
     * const timePeriod = await prisma.timePeriod.upsert({
     *   create: {
     *     // ... data to create a TimePeriod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TimePeriod we want to update
     *   }
     * })
     */
    upsert<T extends TimePeriodUpsertArgs>(args: SelectSubset<T, TimePeriodUpsertArgs<ExtArgs>>): Prisma__TimePeriodClient<$Result.GetResult<Prisma.$TimePeriodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TimePeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimePeriodCountArgs} args - Arguments to filter TimePeriods to count.
     * @example
     * // Count the number of TimePeriods
     * const count = await prisma.timePeriod.count({
     *   where: {
     *     // ... the filter for the TimePeriods we want to count
     *   }
     * })
    **/
    count<T extends TimePeriodCountArgs>(
      args?: Subset<T, TimePeriodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimePeriodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TimePeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimePeriodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimePeriodAggregateArgs>(args: Subset<T, TimePeriodAggregateArgs>): Prisma.PrismaPromise<GetTimePeriodAggregateType<T>>

    /**
     * Group by TimePeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimePeriodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimePeriodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimePeriodGroupByArgs['orderBy'] }
        : { orderBy?: TimePeriodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimePeriodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimePeriodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TimePeriod model
   */
  readonly fields: TimePeriodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TimePeriod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimePeriodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    section<T extends SectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SectionDefaultArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedTeacher<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TimePeriod model
   */
  interface TimePeriodFieldRefs {
    readonly id: FieldRef<"TimePeriod", 'Int'>
    readonly periodName: FieldRef<"TimePeriod", 'String'>
    readonly subjectId: FieldRef<"TimePeriod", 'Int'>
    readonly classId: FieldRef<"TimePeriod", 'Int'>
    readonly sectionId: FieldRef<"TimePeriod", 'Int'>
    readonly startDate: FieldRef<"TimePeriod", 'DateTime'>
    readonly endDate: FieldRef<"TimePeriod", 'DateTime'>
    readonly startTime: FieldRef<"TimePeriod", 'String'>
    readonly endTime: FieldRef<"TimePeriod", 'String'>
    readonly teacherId: FieldRef<"TimePeriod", 'Int'>
    readonly isActive: FieldRef<"TimePeriod", 'Boolean'>
    readonly createdAt: FieldRef<"TimePeriod", 'DateTime'>
    readonly updatedAt: FieldRef<"TimePeriod", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TimePeriod findUnique
   */
  export type TimePeriodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    /**
     * Filter, which TimePeriod to fetch.
     */
    where: TimePeriodWhereUniqueInput
  }

  /**
   * TimePeriod findUniqueOrThrow
   */
  export type TimePeriodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    /**
     * Filter, which TimePeriod to fetch.
     */
    where: TimePeriodWhereUniqueInput
  }

  /**
   * TimePeriod findFirst
   */
  export type TimePeriodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    /**
     * Filter, which TimePeriod to fetch.
     */
    where?: TimePeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimePeriods to fetch.
     */
    orderBy?: TimePeriodOrderByWithRelationInput | TimePeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimePeriods.
     */
    cursor?: TimePeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimePeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimePeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimePeriods.
     */
    distinct?: TimePeriodScalarFieldEnum | TimePeriodScalarFieldEnum[]
  }

  /**
   * TimePeriod findFirstOrThrow
   */
  export type TimePeriodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    /**
     * Filter, which TimePeriod to fetch.
     */
    where?: TimePeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimePeriods to fetch.
     */
    orderBy?: TimePeriodOrderByWithRelationInput | TimePeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimePeriods.
     */
    cursor?: TimePeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimePeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimePeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimePeriods.
     */
    distinct?: TimePeriodScalarFieldEnum | TimePeriodScalarFieldEnum[]
  }

  /**
   * TimePeriod findMany
   */
  export type TimePeriodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    /**
     * Filter, which TimePeriods to fetch.
     */
    where?: TimePeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimePeriods to fetch.
     */
    orderBy?: TimePeriodOrderByWithRelationInput | TimePeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TimePeriods.
     */
    cursor?: TimePeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimePeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimePeriods.
     */
    skip?: number
    distinct?: TimePeriodScalarFieldEnum | TimePeriodScalarFieldEnum[]
  }

  /**
   * TimePeriod create
   */
  export type TimePeriodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    /**
     * The data needed to create a TimePeriod.
     */
    data: XOR<TimePeriodCreateInput, TimePeriodUncheckedCreateInput>
  }

  /**
   * TimePeriod createMany
   */
  export type TimePeriodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TimePeriods.
     */
    data: TimePeriodCreateManyInput | TimePeriodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TimePeriod update
   */
  export type TimePeriodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    /**
     * The data needed to update a TimePeriod.
     */
    data: XOR<TimePeriodUpdateInput, TimePeriodUncheckedUpdateInput>
    /**
     * Choose, which TimePeriod to update.
     */
    where: TimePeriodWhereUniqueInput
  }

  /**
   * TimePeriod updateMany
   */
  export type TimePeriodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TimePeriods.
     */
    data: XOR<TimePeriodUpdateManyMutationInput, TimePeriodUncheckedUpdateManyInput>
    /**
     * Filter which TimePeriods to update
     */
    where?: TimePeriodWhereInput
    /**
     * Limit how many TimePeriods to update.
     */
    limit?: number
  }

  /**
   * TimePeriod upsert
   */
  export type TimePeriodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    /**
     * The filter to search for the TimePeriod to update in case it exists.
     */
    where: TimePeriodWhereUniqueInput
    /**
     * In case the TimePeriod found by the `where` argument doesn't exist, create a new TimePeriod with this data.
     */
    create: XOR<TimePeriodCreateInput, TimePeriodUncheckedCreateInput>
    /**
     * In case the TimePeriod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimePeriodUpdateInput, TimePeriodUncheckedUpdateInput>
  }

  /**
   * TimePeriod delete
   */
  export type TimePeriodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
    /**
     * Filter which TimePeriod to delete.
     */
    where: TimePeriodWhereUniqueInput
  }

  /**
   * TimePeriod deleteMany
   */
  export type TimePeriodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimePeriods to delete
     */
    where?: TimePeriodWhereInput
    /**
     * Limit how many TimePeriods to delete.
     */
    limit?: number
  }

  /**
   * TimePeriod without action
   */
  export type TimePeriodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimePeriod
     */
    select?: TimePeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimePeriod
     */
    omit?: TimePeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimePeriodInclude<ExtArgs> | null
  }


  /**
   * Model Exams
   */

  export type AggregateExams = {
    _count: ExamsCountAggregateOutputType | null
    _avg: ExamsAvgAggregateOutputType | null
    _sum: ExamsSumAggregateOutputType | null
    _min: ExamsMinAggregateOutputType | null
    _max: ExamsMaxAggregateOutputType | null
  }

  export type ExamsAvgAggregateOutputType = {
    id: number | null
  }

  export type ExamsSumAggregateOutputType = {
    id: number | null
  }

  export type ExamsMinAggregateOutputType = {
    id: number | null
    examName: string | null
    remarks: string | null
  }

  export type ExamsMaxAggregateOutputType = {
    id: number | null
    examName: string | null
    remarks: string | null
  }

  export type ExamsCountAggregateOutputType = {
    id: number
    examName: number
    remarks: number
    _all: number
  }


  export type ExamsAvgAggregateInputType = {
    id?: true
  }

  export type ExamsSumAggregateInputType = {
    id?: true
  }

  export type ExamsMinAggregateInputType = {
    id?: true
    examName?: true
    remarks?: true
  }

  export type ExamsMaxAggregateInputType = {
    id?: true
    examName?: true
    remarks?: true
  }

  export type ExamsCountAggregateInputType = {
    id?: true
    examName?: true
    remarks?: true
    _all?: true
  }

  export type ExamsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exams to aggregate.
     */
    where?: ExamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamsOrderByWithRelationInput | ExamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exams
    **/
    _count?: true | ExamsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamsMaxAggregateInputType
  }

  export type GetExamsAggregateType<T extends ExamsAggregateArgs> = {
        [P in keyof T & keyof AggregateExams]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExams[P]>
      : GetScalarType<T[P], AggregateExams[P]>
  }




  export type ExamsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamsWhereInput
    orderBy?: ExamsOrderByWithAggregationInput | ExamsOrderByWithAggregationInput[]
    by: ExamsScalarFieldEnum[] | ExamsScalarFieldEnum
    having?: ExamsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamsCountAggregateInputType | true
    _avg?: ExamsAvgAggregateInputType
    _sum?: ExamsSumAggregateInputType
    _min?: ExamsMinAggregateInputType
    _max?: ExamsMaxAggregateInputType
  }

  export type ExamsGroupByOutputType = {
    id: number
    examName: string
    remarks: string
    _count: ExamsCountAggregateOutputType | null
    _avg: ExamsAvgAggregateOutputType | null
    _sum: ExamsSumAggregateOutputType | null
    _min: ExamsMinAggregateOutputType | null
    _max: ExamsMaxAggregateOutputType | null
  }

  type GetExamsGroupByPayload<T extends ExamsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamsGroupByOutputType[P]>
            : GetScalarType<T[P], ExamsGroupByOutputType[P]>
        }
      >
    >


  export type ExamsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examName?: boolean
    remarks?: boolean
  }, ExtArgs["result"]["exams"]>



  export type ExamsSelectScalar = {
    id?: boolean
    examName?: boolean
    remarks?: boolean
  }

  export type ExamsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "examName" | "remarks", ExtArgs["result"]["exams"]>

  export type $ExamsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exams"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      examName: string
      remarks: string
    }, ExtArgs["result"]["exams"]>
    composites: {}
  }

  type ExamsGetPayload<S extends boolean | null | undefined | ExamsDefaultArgs> = $Result.GetResult<Prisma.$ExamsPayload, S>

  type ExamsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExamsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExamsCountAggregateInputType | true
    }

  export interface ExamsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exams'], meta: { name: 'Exams' } }
    /**
     * Find zero or one Exams that matches the filter.
     * @param {ExamsFindUniqueArgs} args - Arguments to find a Exams
     * @example
     * // Get one Exams
     * const exams = await prisma.exams.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExamsFindUniqueArgs>(args: SelectSubset<T, ExamsFindUniqueArgs<ExtArgs>>): Prisma__ExamsClient<$Result.GetResult<Prisma.$ExamsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Exams that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExamsFindUniqueOrThrowArgs} args - Arguments to find a Exams
     * @example
     * // Get one Exams
     * const exams = await prisma.exams.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExamsFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamsClient<$Result.GetResult<Prisma.$ExamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamsFindFirstArgs} args - Arguments to find a Exams
     * @example
     * // Get one Exams
     * const exams = await prisma.exams.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExamsFindFirstArgs>(args?: SelectSubset<T, ExamsFindFirstArgs<ExtArgs>>): Prisma__ExamsClient<$Result.GetResult<Prisma.$ExamsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exams that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamsFindFirstOrThrowArgs} args - Arguments to find a Exams
     * @example
     * // Get one Exams
     * const exams = await prisma.exams.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExamsFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamsClient<$Result.GetResult<Prisma.$ExamsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Exams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exams
     * const exams = await prisma.exams.findMany()
     * 
     * // Get first 10 Exams
     * const exams = await prisma.exams.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examsWithIdOnly = await prisma.exams.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExamsFindManyArgs>(args?: SelectSubset<T, ExamsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Exams.
     * @param {ExamsCreateArgs} args - Arguments to create a Exams.
     * @example
     * // Create one Exams
     * const Exams = await prisma.exams.create({
     *   data: {
     *     // ... data to create a Exams
     *   }
     * })
     * 
     */
    create<T extends ExamsCreateArgs>(args: SelectSubset<T, ExamsCreateArgs<ExtArgs>>): Prisma__ExamsClient<$Result.GetResult<Prisma.$ExamsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Exams.
     * @param {ExamsCreateManyArgs} args - Arguments to create many Exams.
     * @example
     * // Create many Exams
     * const exams = await prisma.exams.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExamsCreateManyArgs>(args?: SelectSubset<T, ExamsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exams.
     * @param {ExamsDeleteArgs} args - Arguments to delete one Exams.
     * @example
     * // Delete one Exams
     * const Exams = await prisma.exams.delete({
     *   where: {
     *     // ... filter to delete one Exams
     *   }
     * })
     * 
     */
    delete<T extends ExamsDeleteArgs>(args: SelectSubset<T, ExamsDeleteArgs<ExtArgs>>): Prisma__ExamsClient<$Result.GetResult<Prisma.$ExamsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Exams.
     * @param {ExamsUpdateArgs} args - Arguments to update one Exams.
     * @example
     * // Update one Exams
     * const exams = await prisma.exams.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExamsUpdateArgs>(args: SelectSubset<T, ExamsUpdateArgs<ExtArgs>>): Prisma__ExamsClient<$Result.GetResult<Prisma.$ExamsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Exams.
     * @param {ExamsDeleteManyArgs} args - Arguments to filter Exams to delete.
     * @example
     * // Delete a few Exams
     * const { count } = await prisma.exams.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExamsDeleteManyArgs>(args?: SelectSubset<T, ExamsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exams
     * const exams = await prisma.exams.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExamsUpdateManyArgs>(args: SelectSubset<T, ExamsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exams.
     * @param {ExamsUpsertArgs} args - Arguments to update or create a Exams.
     * @example
     * // Update or create a Exams
     * const exams = await prisma.exams.upsert({
     *   create: {
     *     // ... data to create a Exams
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exams we want to update
     *   }
     * })
     */
    upsert<T extends ExamsUpsertArgs>(args: SelectSubset<T, ExamsUpsertArgs<ExtArgs>>): Prisma__ExamsClient<$Result.GetResult<Prisma.$ExamsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamsCountArgs} args - Arguments to filter Exams to count.
     * @example
     * // Count the number of Exams
     * const count = await prisma.exams.count({
     *   where: {
     *     // ... the filter for the Exams we want to count
     *   }
     * })
    **/
    count<T extends ExamsCountArgs>(
      args?: Subset<T, ExamsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamsAggregateArgs>(args: Subset<T, ExamsAggregateArgs>): Prisma.PrismaPromise<GetExamsAggregateType<T>>

    /**
     * Group by Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamsGroupByArgs['orderBy'] }
        : { orderBy?: ExamsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exams model
   */
  readonly fields: ExamsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exams.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Exams model
   */
  interface ExamsFieldRefs {
    readonly id: FieldRef<"Exams", 'Int'>
    readonly examName: FieldRef<"Exams", 'String'>
    readonly remarks: FieldRef<"Exams", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Exams findUnique
   */
  export type ExamsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exams
     */
    select?: ExamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exams
     */
    omit?: ExamsOmit<ExtArgs> | null
    /**
     * Filter, which Exams to fetch.
     */
    where: ExamsWhereUniqueInput
  }

  /**
   * Exams findUniqueOrThrow
   */
  export type ExamsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exams
     */
    select?: ExamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exams
     */
    omit?: ExamsOmit<ExtArgs> | null
    /**
     * Filter, which Exams to fetch.
     */
    where: ExamsWhereUniqueInput
  }

  /**
   * Exams findFirst
   */
  export type ExamsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exams
     */
    select?: ExamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exams
     */
    omit?: ExamsOmit<ExtArgs> | null
    /**
     * Filter, which Exams to fetch.
     */
    where?: ExamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamsOrderByWithRelationInput | ExamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exams.
     */
    cursor?: ExamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exams.
     */
    distinct?: ExamsScalarFieldEnum | ExamsScalarFieldEnum[]
  }

  /**
   * Exams findFirstOrThrow
   */
  export type ExamsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exams
     */
    select?: ExamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exams
     */
    omit?: ExamsOmit<ExtArgs> | null
    /**
     * Filter, which Exams to fetch.
     */
    where?: ExamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamsOrderByWithRelationInput | ExamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exams.
     */
    cursor?: ExamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exams.
     */
    distinct?: ExamsScalarFieldEnum | ExamsScalarFieldEnum[]
  }

  /**
   * Exams findMany
   */
  export type ExamsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exams
     */
    select?: ExamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exams
     */
    omit?: ExamsOmit<ExtArgs> | null
    /**
     * Filter, which Exams to fetch.
     */
    where?: ExamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamsOrderByWithRelationInput | ExamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exams.
     */
    cursor?: ExamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    distinct?: ExamsScalarFieldEnum | ExamsScalarFieldEnum[]
  }

  /**
   * Exams create
   */
  export type ExamsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exams
     */
    select?: ExamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exams
     */
    omit?: ExamsOmit<ExtArgs> | null
    /**
     * The data needed to create a Exams.
     */
    data: XOR<ExamsCreateInput, ExamsUncheckedCreateInput>
  }

  /**
   * Exams createMany
   */
  export type ExamsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exams.
     */
    data: ExamsCreateManyInput | ExamsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exams update
   */
  export type ExamsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exams
     */
    select?: ExamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exams
     */
    omit?: ExamsOmit<ExtArgs> | null
    /**
     * The data needed to update a Exams.
     */
    data: XOR<ExamsUpdateInput, ExamsUncheckedUpdateInput>
    /**
     * Choose, which Exams to update.
     */
    where: ExamsWhereUniqueInput
  }

  /**
   * Exams updateMany
   */
  export type ExamsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exams.
     */
    data: XOR<ExamsUpdateManyMutationInput, ExamsUncheckedUpdateManyInput>
    /**
     * Filter which Exams to update
     */
    where?: ExamsWhereInput
    /**
     * Limit how many Exams to update.
     */
    limit?: number
  }

  /**
   * Exams upsert
   */
  export type ExamsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exams
     */
    select?: ExamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exams
     */
    omit?: ExamsOmit<ExtArgs> | null
    /**
     * The filter to search for the Exams to update in case it exists.
     */
    where: ExamsWhereUniqueInput
    /**
     * In case the Exams found by the `where` argument doesn't exist, create a new Exams with this data.
     */
    create: XOR<ExamsCreateInput, ExamsUncheckedCreateInput>
    /**
     * In case the Exams was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamsUpdateInput, ExamsUncheckedUpdateInput>
  }

  /**
   * Exams delete
   */
  export type ExamsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exams
     */
    select?: ExamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exams
     */
    omit?: ExamsOmit<ExtArgs> | null
    /**
     * Filter which Exams to delete.
     */
    where: ExamsWhereUniqueInput
  }

  /**
   * Exams deleteMany
   */
  export type ExamsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exams to delete
     */
    where?: ExamsWhereInput
    /**
     * Limit how many Exams to delete.
     */
    limit?: number
  }

  /**
   * Exams without action
   */
  export type ExamsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exams
     */
    select?: ExamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exams
     */
    omit?: ExamsOmit<ExtArgs> | null
  }


  /**
   * Model FeeStructure
   */

  export type AggregateFeeStructure = {
    _count: FeeStructureCountAggregateOutputType | null
    _avg: FeeStructureAvgAggregateOutputType | null
    _sum: FeeStructureSumAggregateOutputType | null
    _min: FeeStructureMinAggregateOutputType | null
    _max: FeeStructureMaxAggregateOutputType | null
  }

  export type FeeStructureAvgAggregateOutputType = {
    id: number | null
    classId: number | null
    numberOfTerms: number | null
    totalAmount: number | null
  }

  export type FeeStructureSumAggregateOutputType = {
    id: number | null
    classId: number | null
    numberOfTerms: number | null
    totalAmount: number | null
  }

  export type FeeStructureMinAggregateOutputType = {
    id: number | null
    classId: number | null
    academicYear: string | null
    numberOfTerms: number | null
    isActive: boolean | null
    totalAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeeStructureMaxAggregateOutputType = {
    id: number | null
    classId: number | null
    academicYear: string | null
    numberOfTerms: number | null
    isActive: boolean | null
    totalAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeeStructureCountAggregateOutputType = {
    id: number
    classId: number
    academicYear: number
    numberOfTerms: number
    isActive: number
    totalAmount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FeeStructureAvgAggregateInputType = {
    id?: true
    classId?: true
    numberOfTerms?: true
    totalAmount?: true
  }

  export type FeeStructureSumAggregateInputType = {
    id?: true
    classId?: true
    numberOfTerms?: true
    totalAmount?: true
  }

  export type FeeStructureMinAggregateInputType = {
    id?: true
    classId?: true
    academicYear?: true
    numberOfTerms?: true
    isActive?: true
    totalAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeeStructureMaxAggregateInputType = {
    id?: true
    classId?: true
    academicYear?: true
    numberOfTerms?: true
    isActive?: true
    totalAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeeStructureCountAggregateInputType = {
    id?: true
    classId?: true
    academicYear?: true
    numberOfTerms?: true
    isActive?: true
    totalAmount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FeeStructureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeStructure to aggregate.
     */
    where?: FeeStructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeStructures to fetch.
     */
    orderBy?: FeeStructureOrderByWithRelationInput | FeeStructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeeStructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeStructures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeStructures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeeStructures
    **/
    _count?: true | FeeStructureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeeStructureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeeStructureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeeStructureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeeStructureMaxAggregateInputType
  }

  export type GetFeeStructureAggregateType<T extends FeeStructureAggregateArgs> = {
        [P in keyof T & keyof AggregateFeeStructure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeeStructure[P]>
      : GetScalarType<T[P], AggregateFeeStructure[P]>
  }




  export type FeeStructureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeStructureWhereInput
    orderBy?: FeeStructureOrderByWithAggregationInput | FeeStructureOrderByWithAggregationInput[]
    by: FeeStructureScalarFieldEnum[] | FeeStructureScalarFieldEnum
    having?: FeeStructureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeeStructureCountAggregateInputType | true
    _avg?: FeeStructureAvgAggregateInputType
    _sum?: FeeStructureSumAggregateInputType
    _min?: FeeStructureMinAggregateInputType
    _max?: FeeStructureMaxAggregateInputType
  }

  export type FeeStructureGroupByOutputType = {
    id: number
    classId: number
    academicYear: string
    numberOfTerms: number
    isActive: boolean
    totalAmount: number
    createdAt: Date
    updatedAt: Date
    _count: FeeStructureCountAggregateOutputType | null
    _avg: FeeStructureAvgAggregateOutputType | null
    _sum: FeeStructureSumAggregateOutputType | null
    _min: FeeStructureMinAggregateOutputType | null
    _max: FeeStructureMaxAggregateOutputType | null
  }

  type GetFeeStructureGroupByPayload<T extends FeeStructureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeeStructureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeeStructureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeeStructureGroupByOutputType[P]>
            : GetScalarType<T[P], FeeStructureGroupByOutputType[P]>
        }
      >
    >


  export type FeeStructureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    academicYear?: boolean
    numberOfTerms?: boolean
    isActive?: boolean
    totalAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    feeItems?: boolean | FeeStructure$feeItemsArgs<ExtArgs>
    _count?: boolean | FeeStructureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feeStructure"]>



  export type FeeStructureSelectScalar = {
    id?: boolean
    classId?: boolean
    academicYear?: boolean
    numberOfTerms?: boolean
    isActive?: boolean
    totalAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FeeStructureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classId" | "academicYear" | "numberOfTerms" | "isActive" | "totalAmount" | "createdAt" | "updatedAt", ExtArgs["result"]["feeStructure"]>
  export type FeeStructureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    feeItems?: boolean | FeeStructure$feeItemsArgs<ExtArgs>
    _count?: boolean | FeeStructureCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FeeStructurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeeStructure"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      feeItems: Prisma.$FeeItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      classId: number
      academicYear: string
      numberOfTerms: number
      isActive: boolean
      totalAmount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["feeStructure"]>
    composites: {}
  }

  type FeeStructureGetPayload<S extends boolean | null | undefined | FeeStructureDefaultArgs> = $Result.GetResult<Prisma.$FeeStructurePayload, S>

  type FeeStructureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeeStructureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeeStructureCountAggregateInputType | true
    }

  export interface FeeStructureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeeStructure'], meta: { name: 'FeeStructure' } }
    /**
     * Find zero or one FeeStructure that matches the filter.
     * @param {FeeStructureFindUniqueArgs} args - Arguments to find a FeeStructure
     * @example
     * // Get one FeeStructure
     * const feeStructure = await prisma.feeStructure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeeStructureFindUniqueArgs>(args: SelectSubset<T, FeeStructureFindUniqueArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeeStructure that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeeStructureFindUniqueOrThrowArgs} args - Arguments to find a FeeStructure
     * @example
     * // Get one FeeStructure
     * const feeStructure = await prisma.feeStructure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeeStructureFindUniqueOrThrowArgs>(args: SelectSubset<T, FeeStructureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeeStructure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureFindFirstArgs} args - Arguments to find a FeeStructure
     * @example
     * // Get one FeeStructure
     * const feeStructure = await prisma.feeStructure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeeStructureFindFirstArgs>(args?: SelectSubset<T, FeeStructureFindFirstArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeeStructure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureFindFirstOrThrowArgs} args - Arguments to find a FeeStructure
     * @example
     * // Get one FeeStructure
     * const feeStructure = await prisma.feeStructure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeeStructureFindFirstOrThrowArgs>(args?: SelectSubset<T, FeeStructureFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeeStructures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeeStructures
     * const feeStructures = await prisma.feeStructure.findMany()
     * 
     * // Get first 10 FeeStructures
     * const feeStructures = await prisma.feeStructure.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feeStructureWithIdOnly = await prisma.feeStructure.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeeStructureFindManyArgs>(args?: SelectSubset<T, FeeStructureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeeStructure.
     * @param {FeeStructureCreateArgs} args - Arguments to create a FeeStructure.
     * @example
     * // Create one FeeStructure
     * const FeeStructure = await prisma.feeStructure.create({
     *   data: {
     *     // ... data to create a FeeStructure
     *   }
     * })
     * 
     */
    create<T extends FeeStructureCreateArgs>(args: SelectSubset<T, FeeStructureCreateArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeeStructures.
     * @param {FeeStructureCreateManyArgs} args - Arguments to create many FeeStructures.
     * @example
     * // Create many FeeStructures
     * const feeStructure = await prisma.feeStructure.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeeStructureCreateManyArgs>(args?: SelectSubset<T, FeeStructureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeeStructure.
     * @param {FeeStructureDeleteArgs} args - Arguments to delete one FeeStructure.
     * @example
     * // Delete one FeeStructure
     * const FeeStructure = await prisma.feeStructure.delete({
     *   where: {
     *     // ... filter to delete one FeeStructure
     *   }
     * })
     * 
     */
    delete<T extends FeeStructureDeleteArgs>(args: SelectSubset<T, FeeStructureDeleteArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeeStructure.
     * @param {FeeStructureUpdateArgs} args - Arguments to update one FeeStructure.
     * @example
     * // Update one FeeStructure
     * const feeStructure = await prisma.feeStructure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeeStructureUpdateArgs>(args: SelectSubset<T, FeeStructureUpdateArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeeStructures.
     * @param {FeeStructureDeleteManyArgs} args - Arguments to filter FeeStructures to delete.
     * @example
     * // Delete a few FeeStructures
     * const { count } = await prisma.feeStructure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeeStructureDeleteManyArgs>(args?: SelectSubset<T, FeeStructureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeeStructures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeeStructures
     * const feeStructure = await prisma.feeStructure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeeStructureUpdateManyArgs>(args: SelectSubset<T, FeeStructureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeeStructure.
     * @param {FeeStructureUpsertArgs} args - Arguments to update or create a FeeStructure.
     * @example
     * // Update or create a FeeStructure
     * const feeStructure = await prisma.feeStructure.upsert({
     *   create: {
     *     // ... data to create a FeeStructure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeeStructure we want to update
     *   }
     * })
     */
    upsert<T extends FeeStructureUpsertArgs>(args: SelectSubset<T, FeeStructureUpsertArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeeStructures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureCountArgs} args - Arguments to filter FeeStructures to count.
     * @example
     * // Count the number of FeeStructures
     * const count = await prisma.feeStructure.count({
     *   where: {
     *     // ... the filter for the FeeStructures we want to count
     *   }
     * })
    **/
    count<T extends FeeStructureCountArgs>(
      args?: Subset<T, FeeStructureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeeStructureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeeStructure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeeStructureAggregateArgs>(args: Subset<T, FeeStructureAggregateArgs>): Prisma.PrismaPromise<GetFeeStructureAggregateType<T>>

    /**
     * Group by FeeStructure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeeStructureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeeStructureGroupByArgs['orderBy'] }
        : { orderBy?: FeeStructureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeeStructureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeeStructureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeeStructure model
   */
  readonly fields: FeeStructureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeeStructure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeeStructureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    feeItems<T extends FeeStructure$feeItemsArgs<ExtArgs> = {}>(args?: Subset<T, FeeStructure$feeItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeeStructure model
   */
  interface FeeStructureFieldRefs {
    readonly id: FieldRef<"FeeStructure", 'Int'>
    readonly classId: FieldRef<"FeeStructure", 'Int'>
    readonly academicYear: FieldRef<"FeeStructure", 'String'>
    readonly numberOfTerms: FieldRef<"FeeStructure", 'Int'>
    readonly isActive: FieldRef<"FeeStructure", 'Boolean'>
    readonly totalAmount: FieldRef<"FeeStructure", 'Float'>
    readonly createdAt: FieldRef<"FeeStructure", 'DateTime'>
    readonly updatedAt: FieldRef<"FeeStructure", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FeeStructure findUnique
   */
  export type FeeStructureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter, which FeeStructure to fetch.
     */
    where: FeeStructureWhereUniqueInput
  }

  /**
   * FeeStructure findUniqueOrThrow
   */
  export type FeeStructureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter, which FeeStructure to fetch.
     */
    where: FeeStructureWhereUniqueInput
  }

  /**
   * FeeStructure findFirst
   */
  export type FeeStructureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter, which FeeStructure to fetch.
     */
    where?: FeeStructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeStructures to fetch.
     */
    orderBy?: FeeStructureOrderByWithRelationInput | FeeStructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeStructures.
     */
    cursor?: FeeStructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeStructures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeStructures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeStructures.
     */
    distinct?: FeeStructureScalarFieldEnum | FeeStructureScalarFieldEnum[]
  }

  /**
   * FeeStructure findFirstOrThrow
   */
  export type FeeStructureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter, which FeeStructure to fetch.
     */
    where?: FeeStructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeStructures to fetch.
     */
    orderBy?: FeeStructureOrderByWithRelationInput | FeeStructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeStructures.
     */
    cursor?: FeeStructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeStructures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeStructures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeStructures.
     */
    distinct?: FeeStructureScalarFieldEnum | FeeStructureScalarFieldEnum[]
  }

  /**
   * FeeStructure findMany
   */
  export type FeeStructureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter, which FeeStructures to fetch.
     */
    where?: FeeStructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeStructures to fetch.
     */
    orderBy?: FeeStructureOrderByWithRelationInput | FeeStructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeeStructures.
     */
    cursor?: FeeStructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeStructures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeStructures.
     */
    skip?: number
    distinct?: FeeStructureScalarFieldEnum | FeeStructureScalarFieldEnum[]
  }

  /**
   * FeeStructure create
   */
  export type FeeStructureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * The data needed to create a FeeStructure.
     */
    data: XOR<FeeStructureCreateInput, FeeStructureUncheckedCreateInput>
  }

  /**
   * FeeStructure createMany
   */
  export type FeeStructureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeeStructures.
     */
    data: FeeStructureCreateManyInput | FeeStructureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeeStructure update
   */
  export type FeeStructureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * The data needed to update a FeeStructure.
     */
    data: XOR<FeeStructureUpdateInput, FeeStructureUncheckedUpdateInput>
    /**
     * Choose, which FeeStructure to update.
     */
    where: FeeStructureWhereUniqueInput
  }

  /**
   * FeeStructure updateMany
   */
  export type FeeStructureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeeStructures.
     */
    data: XOR<FeeStructureUpdateManyMutationInput, FeeStructureUncheckedUpdateManyInput>
    /**
     * Filter which FeeStructures to update
     */
    where?: FeeStructureWhereInput
    /**
     * Limit how many FeeStructures to update.
     */
    limit?: number
  }

  /**
   * FeeStructure upsert
   */
  export type FeeStructureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * The filter to search for the FeeStructure to update in case it exists.
     */
    where: FeeStructureWhereUniqueInput
    /**
     * In case the FeeStructure found by the `where` argument doesn't exist, create a new FeeStructure with this data.
     */
    create: XOR<FeeStructureCreateInput, FeeStructureUncheckedCreateInput>
    /**
     * In case the FeeStructure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeeStructureUpdateInput, FeeStructureUncheckedUpdateInput>
  }

  /**
   * FeeStructure delete
   */
  export type FeeStructureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter which FeeStructure to delete.
     */
    where: FeeStructureWhereUniqueInput
  }

  /**
   * FeeStructure deleteMany
   */
  export type FeeStructureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeStructures to delete
     */
    where?: FeeStructureWhereInput
    /**
     * Limit how many FeeStructures to delete.
     */
    limit?: number
  }

  /**
   * FeeStructure.feeItems
   */
  export type FeeStructure$feeItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    where?: FeeItemWhereInput
    orderBy?: FeeItemOrderByWithRelationInput | FeeItemOrderByWithRelationInput[]
    cursor?: FeeItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeeItemScalarFieldEnum | FeeItemScalarFieldEnum[]
  }

  /**
   * FeeStructure without action
   */
  export type FeeStructureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
  }


  /**
   * Model FeeItem
   */

  export type AggregateFeeItem = {
    _count: FeeItemCountAggregateOutputType | null
    _avg: FeeItemAvgAggregateOutputType | null
    _sum: FeeItemSumAggregateOutputType | null
    _min: FeeItemMinAggregateOutputType | null
    _max: FeeItemMaxAggregateOutputType | null
  }

  export type FeeItemAvgAggregateOutputType = {
    id: number | null
    feeStructureId: number | null
    feeTypeId: number | null
    amount: number | null
  }

  export type FeeItemSumAggregateOutputType = {
    id: number | null
    feeStructureId: number | null
    feeTypeId: number | null
    amount: number | null
  }

  export type FeeItemMinAggregateOutputType = {
    id: number | null
    feeStructureId: number | null
    feeTypeId: number | null
    feeName: string | null
    amount: number | null
    description: string | null
  }

  export type FeeItemMaxAggregateOutputType = {
    id: number | null
    feeStructureId: number | null
    feeTypeId: number | null
    feeName: string | null
    amount: number | null
    description: string | null
  }

  export type FeeItemCountAggregateOutputType = {
    id: number
    feeStructureId: number
    feeTypeId: number
    feeName: number
    amount: number
    description: number
    _all: number
  }


  export type FeeItemAvgAggregateInputType = {
    id?: true
    feeStructureId?: true
    feeTypeId?: true
    amount?: true
  }

  export type FeeItemSumAggregateInputType = {
    id?: true
    feeStructureId?: true
    feeTypeId?: true
    amount?: true
  }

  export type FeeItemMinAggregateInputType = {
    id?: true
    feeStructureId?: true
    feeTypeId?: true
    feeName?: true
    amount?: true
    description?: true
  }

  export type FeeItemMaxAggregateInputType = {
    id?: true
    feeStructureId?: true
    feeTypeId?: true
    feeName?: true
    amount?: true
    description?: true
  }

  export type FeeItemCountAggregateInputType = {
    id?: true
    feeStructureId?: true
    feeTypeId?: true
    feeName?: true
    amount?: true
    description?: true
    _all?: true
  }

  export type FeeItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeItem to aggregate.
     */
    where?: FeeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeItems to fetch.
     */
    orderBy?: FeeItemOrderByWithRelationInput | FeeItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeeItems
    **/
    _count?: true | FeeItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeeItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeeItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeeItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeeItemMaxAggregateInputType
  }

  export type GetFeeItemAggregateType<T extends FeeItemAggregateArgs> = {
        [P in keyof T & keyof AggregateFeeItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeeItem[P]>
      : GetScalarType<T[P], AggregateFeeItem[P]>
  }




  export type FeeItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeItemWhereInput
    orderBy?: FeeItemOrderByWithAggregationInput | FeeItemOrderByWithAggregationInput[]
    by: FeeItemScalarFieldEnum[] | FeeItemScalarFieldEnum
    having?: FeeItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeeItemCountAggregateInputType | true
    _avg?: FeeItemAvgAggregateInputType
    _sum?: FeeItemSumAggregateInputType
    _min?: FeeItemMinAggregateInputType
    _max?: FeeItemMaxAggregateInputType
  }

  export type FeeItemGroupByOutputType = {
    id: number
    feeStructureId: number
    feeTypeId: number
    feeName: string
    amount: number
    description: string | null
    _count: FeeItemCountAggregateOutputType | null
    _avg: FeeItemAvgAggregateOutputType | null
    _sum: FeeItemSumAggregateOutputType | null
    _min: FeeItemMinAggregateOutputType | null
    _max: FeeItemMaxAggregateOutputType | null
  }

  type GetFeeItemGroupByPayload<T extends FeeItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeeItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeeItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeeItemGroupByOutputType[P]>
            : GetScalarType<T[P], FeeItemGroupByOutputType[P]>
        }
      >
    >


  export type FeeItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    feeStructureId?: boolean
    feeTypeId?: boolean
    feeName?: boolean
    amount?: boolean
    description?: boolean
    feeStructure?: boolean | FeeStructureDefaultArgs<ExtArgs>
    feeType?: boolean | MasterDropdownDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feeItem"]>



  export type FeeItemSelectScalar = {
    id?: boolean
    feeStructureId?: boolean
    feeTypeId?: boolean
    feeName?: boolean
    amount?: boolean
    description?: boolean
  }

  export type FeeItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "feeStructureId" | "feeTypeId" | "feeName" | "amount" | "description", ExtArgs["result"]["feeItem"]>
  export type FeeItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeStructure?: boolean | FeeStructureDefaultArgs<ExtArgs>
    feeType?: boolean | MasterDropdownDefaultArgs<ExtArgs>
  }

  export type $FeeItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeeItem"
    objects: {
      feeStructure: Prisma.$FeeStructurePayload<ExtArgs>
      feeType: Prisma.$MasterDropdownPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      feeStructureId: number
      feeTypeId: number
      feeName: string
      amount: number
      description: string | null
    }, ExtArgs["result"]["feeItem"]>
    composites: {}
  }

  type FeeItemGetPayload<S extends boolean | null | undefined | FeeItemDefaultArgs> = $Result.GetResult<Prisma.$FeeItemPayload, S>

  type FeeItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeeItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeeItemCountAggregateInputType | true
    }

  export interface FeeItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeeItem'], meta: { name: 'FeeItem' } }
    /**
     * Find zero or one FeeItem that matches the filter.
     * @param {FeeItemFindUniqueArgs} args - Arguments to find a FeeItem
     * @example
     * // Get one FeeItem
     * const feeItem = await prisma.feeItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeeItemFindUniqueArgs>(args: SelectSubset<T, FeeItemFindUniqueArgs<ExtArgs>>): Prisma__FeeItemClient<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeeItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeeItemFindUniqueOrThrowArgs} args - Arguments to find a FeeItem
     * @example
     * // Get one FeeItem
     * const feeItem = await prisma.feeItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeeItemFindUniqueOrThrowArgs>(args: SelectSubset<T, FeeItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeeItemClient<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeeItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeItemFindFirstArgs} args - Arguments to find a FeeItem
     * @example
     * // Get one FeeItem
     * const feeItem = await prisma.feeItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeeItemFindFirstArgs>(args?: SelectSubset<T, FeeItemFindFirstArgs<ExtArgs>>): Prisma__FeeItemClient<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeeItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeItemFindFirstOrThrowArgs} args - Arguments to find a FeeItem
     * @example
     * // Get one FeeItem
     * const feeItem = await prisma.feeItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeeItemFindFirstOrThrowArgs>(args?: SelectSubset<T, FeeItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeeItemClient<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeeItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeeItems
     * const feeItems = await prisma.feeItem.findMany()
     * 
     * // Get first 10 FeeItems
     * const feeItems = await prisma.feeItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feeItemWithIdOnly = await prisma.feeItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeeItemFindManyArgs>(args?: SelectSubset<T, FeeItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeeItem.
     * @param {FeeItemCreateArgs} args - Arguments to create a FeeItem.
     * @example
     * // Create one FeeItem
     * const FeeItem = await prisma.feeItem.create({
     *   data: {
     *     // ... data to create a FeeItem
     *   }
     * })
     * 
     */
    create<T extends FeeItemCreateArgs>(args: SelectSubset<T, FeeItemCreateArgs<ExtArgs>>): Prisma__FeeItemClient<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeeItems.
     * @param {FeeItemCreateManyArgs} args - Arguments to create many FeeItems.
     * @example
     * // Create many FeeItems
     * const feeItem = await prisma.feeItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeeItemCreateManyArgs>(args?: SelectSubset<T, FeeItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeeItem.
     * @param {FeeItemDeleteArgs} args - Arguments to delete one FeeItem.
     * @example
     * // Delete one FeeItem
     * const FeeItem = await prisma.feeItem.delete({
     *   where: {
     *     // ... filter to delete one FeeItem
     *   }
     * })
     * 
     */
    delete<T extends FeeItemDeleteArgs>(args: SelectSubset<T, FeeItemDeleteArgs<ExtArgs>>): Prisma__FeeItemClient<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeeItem.
     * @param {FeeItemUpdateArgs} args - Arguments to update one FeeItem.
     * @example
     * // Update one FeeItem
     * const feeItem = await prisma.feeItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeeItemUpdateArgs>(args: SelectSubset<T, FeeItemUpdateArgs<ExtArgs>>): Prisma__FeeItemClient<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeeItems.
     * @param {FeeItemDeleteManyArgs} args - Arguments to filter FeeItems to delete.
     * @example
     * // Delete a few FeeItems
     * const { count } = await prisma.feeItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeeItemDeleteManyArgs>(args?: SelectSubset<T, FeeItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeeItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeeItems
     * const feeItem = await prisma.feeItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeeItemUpdateManyArgs>(args: SelectSubset<T, FeeItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeeItem.
     * @param {FeeItemUpsertArgs} args - Arguments to update or create a FeeItem.
     * @example
     * // Update or create a FeeItem
     * const feeItem = await prisma.feeItem.upsert({
     *   create: {
     *     // ... data to create a FeeItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeeItem we want to update
     *   }
     * })
     */
    upsert<T extends FeeItemUpsertArgs>(args: SelectSubset<T, FeeItemUpsertArgs<ExtArgs>>): Prisma__FeeItemClient<$Result.GetResult<Prisma.$FeeItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeeItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeItemCountArgs} args - Arguments to filter FeeItems to count.
     * @example
     * // Count the number of FeeItems
     * const count = await prisma.feeItem.count({
     *   where: {
     *     // ... the filter for the FeeItems we want to count
     *   }
     * })
    **/
    count<T extends FeeItemCountArgs>(
      args?: Subset<T, FeeItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeeItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeeItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeeItemAggregateArgs>(args: Subset<T, FeeItemAggregateArgs>): Prisma.PrismaPromise<GetFeeItemAggregateType<T>>

    /**
     * Group by FeeItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeeItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeeItemGroupByArgs['orderBy'] }
        : { orderBy?: FeeItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeeItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeeItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeeItem model
   */
  readonly fields: FeeItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeeItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeeItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feeStructure<T extends FeeStructureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeeStructureDefaultArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    feeType<T extends MasterDropdownDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDropdownDefaultArgs<ExtArgs>>): Prisma__MasterDropdownClient<$Result.GetResult<Prisma.$MasterDropdownPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeeItem model
   */
  interface FeeItemFieldRefs {
    readonly id: FieldRef<"FeeItem", 'Int'>
    readonly feeStructureId: FieldRef<"FeeItem", 'Int'>
    readonly feeTypeId: FieldRef<"FeeItem", 'Int'>
    readonly feeName: FieldRef<"FeeItem", 'String'>
    readonly amount: FieldRef<"FeeItem", 'Float'>
    readonly description: FieldRef<"FeeItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FeeItem findUnique
   */
  export type FeeItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    /**
     * Filter, which FeeItem to fetch.
     */
    where: FeeItemWhereUniqueInput
  }

  /**
   * FeeItem findUniqueOrThrow
   */
  export type FeeItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    /**
     * Filter, which FeeItem to fetch.
     */
    where: FeeItemWhereUniqueInput
  }

  /**
   * FeeItem findFirst
   */
  export type FeeItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    /**
     * Filter, which FeeItem to fetch.
     */
    where?: FeeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeItems to fetch.
     */
    orderBy?: FeeItemOrderByWithRelationInput | FeeItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeItems.
     */
    cursor?: FeeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeItems.
     */
    distinct?: FeeItemScalarFieldEnum | FeeItemScalarFieldEnum[]
  }

  /**
   * FeeItem findFirstOrThrow
   */
  export type FeeItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    /**
     * Filter, which FeeItem to fetch.
     */
    where?: FeeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeItems to fetch.
     */
    orderBy?: FeeItemOrderByWithRelationInput | FeeItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeItems.
     */
    cursor?: FeeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeItems.
     */
    distinct?: FeeItemScalarFieldEnum | FeeItemScalarFieldEnum[]
  }

  /**
   * FeeItem findMany
   */
  export type FeeItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    /**
     * Filter, which FeeItems to fetch.
     */
    where?: FeeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeItems to fetch.
     */
    orderBy?: FeeItemOrderByWithRelationInput | FeeItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeeItems.
     */
    cursor?: FeeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeItems.
     */
    skip?: number
    distinct?: FeeItemScalarFieldEnum | FeeItemScalarFieldEnum[]
  }

  /**
   * FeeItem create
   */
  export type FeeItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    /**
     * The data needed to create a FeeItem.
     */
    data: XOR<FeeItemCreateInput, FeeItemUncheckedCreateInput>
  }

  /**
   * FeeItem createMany
   */
  export type FeeItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeeItems.
     */
    data: FeeItemCreateManyInput | FeeItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeeItem update
   */
  export type FeeItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    /**
     * The data needed to update a FeeItem.
     */
    data: XOR<FeeItemUpdateInput, FeeItemUncheckedUpdateInput>
    /**
     * Choose, which FeeItem to update.
     */
    where: FeeItemWhereUniqueInput
  }

  /**
   * FeeItem updateMany
   */
  export type FeeItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeeItems.
     */
    data: XOR<FeeItemUpdateManyMutationInput, FeeItemUncheckedUpdateManyInput>
    /**
     * Filter which FeeItems to update
     */
    where?: FeeItemWhereInput
    /**
     * Limit how many FeeItems to update.
     */
    limit?: number
  }

  /**
   * FeeItem upsert
   */
  export type FeeItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    /**
     * The filter to search for the FeeItem to update in case it exists.
     */
    where: FeeItemWhereUniqueInput
    /**
     * In case the FeeItem found by the `where` argument doesn't exist, create a new FeeItem with this data.
     */
    create: XOR<FeeItemCreateInput, FeeItemUncheckedCreateInput>
    /**
     * In case the FeeItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeeItemUpdateInput, FeeItemUncheckedUpdateInput>
  }

  /**
   * FeeItem delete
   */
  export type FeeItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
    /**
     * Filter which FeeItem to delete.
     */
    where: FeeItemWhereUniqueInput
  }

  /**
   * FeeItem deleteMany
   */
  export type FeeItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeItems to delete
     */
    where?: FeeItemWhereInput
    /**
     * Limit how many FeeItems to delete.
     */
    limit?: number
  }

  /**
   * FeeItem without action
   */
  export type FeeItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeItem
     */
    select?: FeeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeItem
     */
    omit?: FeeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeItemInclude<ExtArgs> | null
  }


  /**
   * Model MarksSheetMaster
   */

  export type AggregateMarksSheetMaster = {
    _count: MarksSheetMasterCountAggregateOutputType | null
    _avg: MarksSheetMasterAvgAggregateOutputType | null
    _sum: MarksSheetMasterSumAggregateOutputType | null
    _min: MarksSheetMasterMinAggregateOutputType | null
    _max: MarksSheetMasterMaxAggregateOutputType | null
  }

  export type MarksSheetMasterAvgAggregateOutputType = {
    id: number | null
    classId: number | null
    sectionId: number | null
  }

  export type MarksSheetMasterSumAggregateOutputType = {
    id: number | null
    classId: number | null
    sectionId: number | null
  }

  export type MarksSheetMasterMinAggregateOutputType = {
    id: number | null
    classId: number | null
    sectionId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MarksSheetMasterMaxAggregateOutputType = {
    id: number | null
    classId: number | null
    sectionId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MarksSheetMasterCountAggregateOutputType = {
    id: number
    classId: number
    sectionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MarksSheetMasterAvgAggregateInputType = {
    id?: true
    classId?: true
    sectionId?: true
  }

  export type MarksSheetMasterSumAggregateInputType = {
    id?: true
    classId?: true
    sectionId?: true
  }

  export type MarksSheetMasterMinAggregateInputType = {
    id?: true
    classId?: true
    sectionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MarksSheetMasterMaxAggregateInputType = {
    id?: true
    classId?: true
    sectionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MarksSheetMasterCountAggregateInputType = {
    id?: true
    classId?: true
    sectionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MarksSheetMasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarksSheetMaster to aggregate.
     */
    where?: MarksSheetMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarksSheetMasters to fetch.
     */
    orderBy?: MarksSheetMasterOrderByWithRelationInput | MarksSheetMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarksSheetMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarksSheetMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarksSheetMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarksSheetMasters
    **/
    _count?: true | MarksSheetMasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarksSheetMasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarksSheetMasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarksSheetMasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarksSheetMasterMaxAggregateInputType
  }

  export type GetMarksSheetMasterAggregateType<T extends MarksSheetMasterAggregateArgs> = {
        [P in keyof T & keyof AggregateMarksSheetMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarksSheetMaster[P]>
      : GetScalarType<T[P], AggregateMarksSheetMaster[P]>
  }




  export type MarksSheetMasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarksSheetMasterWhereInput
    orderBy?: MarksSheetMasterOrderByWithAggregationInput | MarksSheetMasterOrderByWithAggregationInput[]
    by: MarksSheetMasterScalarFieldEnum[] | MarksSheetMasterScalarFieldEnum
    having?: MarksSheetMasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarksSheetMasterCountAggregateInputType | true
    _avg?: MarksSheetMasterAvgAggregateInputType
    _sum?: MarksSheetMasterSumAggregateInputType
    _min?: MarksSheetMasterMinAggregateInputType
    _max?: MarksSheetMasterMaxAggregateInputType
  }

  export type MarksSheetMasterGroupByOutputType = {
    id: number
    classId: number
    sectionId: number
    createdAt: Date
    updatedAt: Date
    _count: MarksSheetMasterCountAggregateOutputType | null
    _avg: MarksSheetMasterAvgAggregateOutputType | null
    _sum: MarksSheetMasterSumAggregateOutputType | null
    _min: MarksSheetMasterMinAggregateOutputType | null
    _max: MarksSheetMasterMaxAggregateOutputType | null
  }

  type GetMarksSheetMasterGroupByPayload<T extends MarksSheetMasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarksSheetMasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarksSheetMasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarksSheetMasterGroupByOutputType[P]>
            : GetScalarType<T[P], MarksSheetMasterGroupByOutputType[P]>
        }
      >
    >


  export type MarksSheetMasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    sectionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    section?: boolean | SectionDefaultArgs<ExtArgs>
    subjects?: boolean | MarksSheetMaster$subjectsArgs<ExtArgs>
    _count?: boolean | MarksSheetMasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marksSheetMaster"]>



  export type MarksSheetMasterSelectScalar = {
    id?: boolean
    classId?: boolean
    sectionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MarksSheetMasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classId" | "sectionId" | "createdAt" | "updatedAt", ExtArgs["result"]["marksSheetMaster"]>
  export type MarksSheetMasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    section?: boolean | SectionDefaultArgs<ExtArgs>
    subjects?: boolean | MarksSheetMaster$subjectsArgs<ExtArgs>
    _count?: boolean | MarksSheetMasterCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MarksSheetMasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarksSheetMaster"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      section: Prisma.$SectionPayload<ExtArgs>
      subjects: Prisma.$MarksSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      classId: number
      sectionId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["marksSheetMaster"]>
    composites: {}
  }

  type MarksSheetMasterGetPayload<S extends boolean | null | undefined | MarksSheetMasterDefaultArgs> = $Result.GetResult<Prisma.$MarksSheetMasterPayload, S>

  type MarksSheetMasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarksSheetMasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarksSheetMasterCountAggregateInputType | true
    }

  export interface MarksSheetMasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarksSheetMaster'], meta: { name: 'MarksSheetMaster' } }
    /**
     * Find zero or one MarksSheetMaster that matches the filter.
     * @param {MarksSheetMasterFindUniqueArgs} args - Arguments to find a MarksSheetMaster
     * @example
     * // Get one MarksSheetMaster
     * const marksSheetMaster = await prisma.marksSheetMaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarksSheetMasterFindUniqueArgs>(args: SelectSubset<T, MarksSheetMasterFindUniqueArgs<ExtArgs>>): Prisma__MarksSheetMasterClient<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarksSheetMaster that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarksSheetMasterFindUniqueOrThrowArgs} args - Arguments to find a MarksSheetMaster
     * @example
     * // Get one MarksSheetMaster
     * const marksSheetMaster = await prisma.marksSheetMaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarksSheetMasterFindUniqueOrThrowArgs>(args: SelectSubset<T, MarksSheetMasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarksSheetMasterClient<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarksSheetMaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSheetMasterFindFirstArgs} args - Arguments to find a MarksSheetMaster
     * @example
     * // Get one MarksSheetMaster
     * const marksSheetMaster = await prisma.marksSheetMaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarksSheetMasterFindFirstArgs>(args?: SelectSubset<T, MarksSheetMasterFindFirstArgs<ExtArgs>>): Prisma__MarksSheetMasterClient<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarksSheetMaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSheetMasterFindFirstOrThrowArgs} args - Arguments to find a MarksSheetMaster
     * @example
     * // Get one MarksSheetMaster
     * const marksSheetMaster = await prisma.marksSheetMaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarksSheetMasterFindFirstOrThrowArgs>(args?: SelectSubset<T, MarksSheetMasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarksSheetMasterClient<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarksSheetMasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSheetMasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarksSheetMasters
     * const marksSheetMasters = await prisma.marksSheetMaster.findMany()
     * 
     * // Get first 10 MarksSheetMasters
     * const marksSheetMasters = await prisma.marksSheetMaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marksSheetMasterWithIdOnly = await prisma.marksSheetMaster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarksSheetMasterFindManyArgs>(args?: SelectSubset<T, MarksSheetMasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarksSheetMaster.
     * @param {MarksSheetMasterCreateArgs} args - Arguments to create a MarksSheetMaster.
     * @example
     * // Create one MarksSheetMaster
     * const MarksSheetMaster = await prisma.marksSheetMaster.create({
     *   data: {
     *     // ... data to create a MarksSheetMaster
     *   }
     * })
     * 
     */
    create<T extends MarksSheetMasterCreateArgs>(args: SelectSubset<T, MarksSheetMasterCreateArgs<ExtArgs>>): Prisma__MarksSheetMasterClient<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarksSheetMasters.
     * @param {MarksSheetMasterCreateManyArgs} args - Arguments to create many MarksSheetMasters.
     * @example
     * // Create many MarksSheetMasters
     * const marksSheetMaster = await prisma.marksSheetMaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarksSheetMasterCreateManyArgs>(args?: SelectSubset<T, MarksSheetMasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MarksSheetMaster.
     * @param {MarksSheetMasterDeleteArgs} args - Arguments to delete one MarksSheetMaster.
     * @example
     * // Delete one MarksSheetMaster
     * const MarksSheetMaster = await prisma.marksSheetMaster.delete({
     *   where: {
     *     // ... filter to delete one MarksSheetMaster
     *   }
     * })
     * 
     */
    delete<T extends MarksSheetMasterDeleteArgs>(args: SelectSubset<T, MarksSheetMasterDeleteArgs<ExtArgs>>): Prisma__MarksSheetMasterClient<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarksSheetMaster.
     * @param {MarksSheetMasterUpdateArgs} args - Arguments to update one MarksSheetMaster.
     * @example
     * // Update one MarksSheetMaster
     * const marksSheetMaster = await prisma.marksSheetMaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarksSheetMasterUpdateArgs>(args: SelectSubset<T, MarksSheetMasterUpdateArgs<ExtArgs>>): Prisma__MarksSheetMasterClient<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarksSheetMasters.
     * @param {MarksSheetMasterDeleteManyArgs} args - Arguments to filter MarksSheetMasters to delete.
     * @example
     * // Delete a few MarksSheetMasters
     * const { count } = await prisma.marksSheetMaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarksSheetMasterDeleteManyArgs>(args?: SelectSubset<T, MarksSheetMasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarksSheetMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSheetMasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarksSheetMasters
     * const marksSheetMaster = await prisma.marksSheetMaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarksSheetMasterUpdateManyArgs>(args: SelectSubset<T, MarksSheetMasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MarksSheetMaster.
     * @param {MarksSheetMasterUpsertArgs} args - Arguments to update or create a MarksSheetMaster.
     * @example
     * // Update or create a MarksSheetMaster
     * const marksSheetMaster = await prisma.marksSheetMaster.upsert({
     *   create: {
     *     // ... data to create a MarksSheetMaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarksSheetMaster we want to update
     *   }
     * })
     */
    upsert<T extends MarksSheetMasterUpsertArgs>(args: SelectSubset<T, MarksSheetMasterUpsertArgs<ExtArgs>>): Prisma__MarksSheetMasterClient<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarksSheetMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSheetMasterCountArgs} args - Arguments to filter MarksSheetMasters to count.
     * @example
     * // Count the number of MarksSheetMasters
     * const count = await prisma.marksSheetMaster.count({
     *   where: {
     *     // ... the filter for the MarksSheetMasters we want to count
     *   }
     * })
    **/
    count<T extends MarksSheetMasterCountArgs>(
      args?: Subset<T, MarksSheetMasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarksSheetMasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarksSheetMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSheetMasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarksSheetMasterAggregateArgs>(args: Subset<T, MarksSheetMasterAggregateArgs>): Prisma.PrismaPromise<GetMarksSheetMasterAggregateType<T>>

    /**
     * Group by MarksSheetMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSheetMasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarksSheetMasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarksSheetMasterGroupByArgs['orderBy'] }
        : { orderBy?: MarksSheetMasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarksSheetMasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarksSheetMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarksSheetMaster model
   */
  readonly fields: MarksSheetMasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarksSheetMaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarksSheetMasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    section<T extends SectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SectionDefaultArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subjects<T extends MarksSheetMaster$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, MarksSheetMaster$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarksSheetMaster model
   */
  interface MarksSheetMasterFieldRefs {
    readonly id: FieldRef<"MarksSheetMaster", 'Int'>
    readonly classId: FieldRef<"MarksSheetMaster", 'Int'>
    readonly sectionId: FieldRef<"MarksSheetMaster", 'Int'>
    readonly createdAt: FieldRef<"MarksSheetMaster", 'DateTime'>
    readonly updatedAt: FieldRef<"MarksSheetMaster", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MarksSheetMaster findUnique
   */
  export type MarksSheetMasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    /**
     * Filter, which MarksSheetMaster to fetch.
     */
    where: MarksSheetMasterWhereUniqueInput
  }

  /**
   * MarksSheetMaster findUniqueOrThrow
   */
  export type MarksSheetMasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    /**
     * Filter, which MarksSheetMaster to fetch.
     */
    where: MarksSheetMasterWhereUniqueInput
  }

  /**
   * MarksSheetMaster findFirst
   */
  export type MarksSheetMasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    /**
     * Filter, which MarksSheetMaster to fetch.
     */
    where?: MarksSheetMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarksSheetMasters to fetch.
     */
    orderBy?: MarksSheetMasterOrderByWithRelationInput | MarksSheetMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarksSheetMasters.
     */
    cursor?: MarksSheetMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarksSheetMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarksSheetMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarksSheetMasters.
     */
    distinct?: MarksSheetMasterScalarFieldEnum | MarksSheetMasterScalarFieldEnum[]
  }

  /**
   * MarksSheetMaster findFirstOrThrow
   */
  export type MarksSheetMasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    /**
     * Filter, which MarksSheetMaster to fetch.
     */
    where?: MarksSheetMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarksSheetMasters to fetch.
     */
    orderBy?: MarksSheetMasterOrderByWithRelationInput | MarksSheetMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarksSheetMasters.
     */
    cursor?: MarksSheetMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarksSheetMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarksSheetMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarksSheetMasters.
     */
    distinct?: MarksSheetMasterScalarFieldEnum | MarksSheetMasterScalarFieldEnum[]
  }

  /**
   * MarksSheetMaster findMany
   */
  export type MarksSheetMasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    /**
     * Filter, which MarksSheetMasters to fetch.
     */
    where?: MarksSheetMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarksSheetMasters to fetch.
     */
    orderBy?: MarksSheetMasterOrderByWithRelationInput | MarksSheetMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarksSheetMasters.
     */
    cursor?: MarksSheetMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarksSheetMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarksSheetMasters.
     */
    skip?: number
    distinct?: MarksSheetMasterScalarFieldEnum | MarksSheetMasterScalarFieldEnum[]
  }

  /**
   * MarksSheetMaster create
   */
  export type MarksSheetMasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    /**
     * The data needed to create a MarksSheetMaster.
     */
    data: XOR<MarksSheetMasterCreateInput, MarksSheetMasterUncheckedCreateInput>
  }

  /**
   * MarksSheetMaster createMany
   */
  export type MarksSheetMasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarksSheetMasters.
     */
    data: MarksSheetMasterCreateManyInput | MarksSheetMasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarksSheetMaster update
   */
  export type MarksSheetMasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    /**
     * The data needed to update a MarksSheetMaster.
     */
    data: XOR<MarksSheetMasterUpdateInput, MarksSheetMasterUncheckedUpdateInput>
    /**
     * Choose, which MarksSheetMaster to update.
     */
    where: MarksSheetMasterWhereUniqueInput
  }

  /**
   * MarksSheetMaster updateMany
   */
  export type MarksSheetMasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarksSheetMasters.
     */
    data: XOR<MarksSheetMasterUpdateManyMutationInput, MarksSheetMasterUncheckedUpdateManyInput>
    /**
     * Filter which MarksSheetMasters to update
     */
    where?: MarksSheetMasterWhereInput
    /**
     * Limit how many MarksSheetMasters to update.
     */
    limit?: number
  }

  /**
   * MarksSheetMaster upsert
   */
  export type MarksSheetMasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    /**
     * The filter to search for the MarksSheetMaster to update in case it exists.
     */
    where: MarksSheetMasterWhereUniqueInput
    /**
     * In case the MarksSheetMaster found by the `where` argument doesn't exist, create a new MarksSheetMaster with this data.
     */
    create: XOR<MarksSheetMasterCreateInput, MarksSheetMasterUncheckedCreateInput>
    /**
     * In case the MarksSheetMaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarksSheetMasterUpdateInput, MarksSheetMasterUncheckedUpdateInput>
  }

  /**
   * MarksSheetMaster delete
   */
  export type MarksSheetMasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
    /**
     * Filter which MarksSheetMaster to delete.
     */
    where: MarksSheetMasterWhereUniqueInput
  }

  /**
   * MarksSheetMaster deleteMany
   */
  export type MarksSheetMasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarksSheetMasters to delete
     */
    where?: MarksSheetMasterWhereInput
    /**
     * Limit how many MarksSheetMasters to delete.
     */
    limit?: number
  }

  /**
   * MarksSheetMaster.subjects
   */
  export type MarksSheetMaster$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    where?: MarksSubjectWhereInput
    orderBy?: MarksSubjectOrderByWithRelationInput | MarksSubjectOrderByWithRelationInput[]
    cursor?: MarksSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarksSubjectScalarFieldEnum | MarksSubjectScalarFieldEnum[]
  }

  /**
   * MarksSheetMaster without action
   */
  export type MarksSheetMasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSheetMaster
     */
    select?: MarksSheetMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSheetMaster
     */
    omit?: MarksSheetMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSheetMasterInclude<ExtArgs> | null
  }


  /**
   * Model MarksSubject
   */

  export type AggregateMarksSubject = {
    _count: MarksSubjectCountAggregateOutputType | null
    _avg: MarksSubjectAvgAggregateOutputType | null
    _sum: MarksSubjectSumAggregateOutputType | null
    _min: MarksSubjectMinAggregateOutputType | null
    _max: MarksSubjectMaxAggregateOutputType | null
  }

  export type MarksSubjectAvgAggregateOutputType = {
    id: number | null
    marksheetId: number | null
    subjectId: number | null
    maxMarks: number | null
    passMarks: number | null
  }

  export type MarksSubjectSumAggregateOutputType = {
    id: number | null
    marksheetId: number | null
    subjectId: number | null
    maxMarks: number | null
    passMarks: number | null
  }

  export type MarksSubjectMinAggregateOutputType = {
    id: number | null
    marksheetId: number | null
    subjectId: number | null
    maxMarks: number | null
    passMarks: number | null
    remark: string | null
  }

  export type MarksSubjectMaxAggregateOutputType = {
    id: number | null
    marksheetId: number | null
    subjectId: number | null
    maxMarks: number | null
    passMarks: number | null
    remark: string | null
  }

  export type MarksSubjectCountAggregateOutputType = {
    id: number
    marksheetId: number
    subjectId: number
    maxMarks: number
    passMarks: number
    remark: number
    _all: number
  }


  export type MarksSubjectAvgAggregateInputType = {
    id?: true
    marksheetId?: true
    subjectId?: true
    maxMarks?: true
    passMarks?: true
  }

  export type MarksSubjectSumAggregateInputType = {
    id?: true
    marksheetId?: true
    subjectId?: true
    maxMarks?: true
    passMarks?: true
  }

  export type MarksSubjectMinAggregateInputType = {
    id?: true
    marksheetId?: true
    subjectId?: true
    maxMarks?: true
    passMarks?: true
    remark?: true
  }

  export type MarksSubjectMaxAggregateInputType = {
    id?: true
    marksheetId?: true
    subjectId?: true
    maxMarks?: true
    passMarks?: true
    remark?: true
  }

  export type MarksSubjectCountAggregateInputType = {
    id?: true
    marksheetId?: true
    subjectId?: true
    maxMarks?: true
    passMarks?: true
    remark?: true
    _all?: true
  }

  export type MarksSubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarksSubject to aggregate.
     */
    where?: MarksSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarksSubjects to fetch.
     */
    orderBy?: MarksSubjectOrderByWithRelationInput | MarksSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarksSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarksSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarksSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarksSubjects
    **/
    _count?: true | MarksSubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarksSubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarksSubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarksSubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarksSubjectMaxAggregateInputType
  }

  export type GetMarksSubjectAggregateType<T extends MarksSubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateMarksSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarksSubject[P]>
      : GetScalarType<T[P], AggregateMarksSubject[P]>
  }




  export type MarksSubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarksSubjectWhereInput
    orderBy?: MarksSubjectOrderByWithAggregationInput | MarksSubjectOrderByWithAggregationInput[]
    by: MarksSubjectScalarFieldEnum[] | MarksSubjectScalarFieldEnum
    having?: MarksSubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarksSubjectCountAggregateInputType | true
    _avg?: MarksSubjectAvgAggregateInputType
    _sum?: MarksSubjectSumAggregateInputType
    _min?: MarksSubjectMinAggregateInputType
    _max?: MarksSubjectMaxAggregateInputType
  }

  export type MarksSubjectGroupByOutputType = {
    id: number
    marksheetId: number
    subjectId: number
    maxMarks: number
    passMarks: number
    remark: string | null
    _count: MarksSubjectCountAggregateOutputType | null
    _avg: MarksSubjectAvgAggregateOutputType | null
    _sum: MarksSubjectSumAggregateOutputType | null
    _min: MarksSubjectMinAggregateOutputType | null
    _max: MarksSubjectMaxAggregateOutputType | null
  }

  type GetMarksSubjectGroupByPayload<T extends MarksSubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarksSubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarksSubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarksSubjectGroupByOutputType[P]>
            : GetScalarType<T[P], MarksSubjectGroupByOutputType[P]>
        }
      >
    >


  export type MarksSubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    marksheetId?: boolean
    subjectId?: boolean
    maxMarks?: boolean
    passMarks?: boolean
    remark?: boolean
    marksheet?: boolean | MarksSheetMasterDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marksSubject"]>



  export type MarksSubjectSelectScalar = {
    id?: boolean
    marksheetId?: boolean
    subjectId?: boolean
    maxMarks?: boolean
    passMarks?: boolean
    remark?: boolean
  }

  export type MarksSubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "marksheetId" | "subjectId" | "maxMarks" | "passMarks" | "remark", ExtArgs["result"]["marksSubject"]>
  export type MarksSubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    marksheet?: boolean | MarksSheetMasterDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $MarksSubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarksSubject"
    objects: {
      marksheet: Prisma.$MarksSheetMasterPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      marksheetId: number
      subjectId: number
      maxMarks: number
      passMarks: number
      remark: string | null
    }, ExtArgs["result"]["marksSubject"]>
    composites: {}
  }

  type MarksSubjectGetPayload<S extends boolean | null | undefined | MarksSubjectDefaultArgs> = $Result.GetResult<Prisma.$MarksSubjectPayload, S>

  type MarksSubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarksSubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarksSubjectCountAggregateInputType | true
    }

  export interface MarksSubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarksSubject'], meta: { name: 'MarksSubject' } }
    /**
     * Find zero or one MarksSubject that matches the filter.
     * @param {MarksSubjectFindUniqueArgs} args - Arguments to find a MarksSubject
     * @example
     * // Get one MarksSubject
     * const marksSubject = await prisma.marksSubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarksSubjectFindUniqueArgs>(args: SelectSubset<T, MarksSubjectFindUniqueArgs<ExtArgs>>): Prisma__MarksSubjectClient<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarksSubject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarksSubjectFindUniqueOrThrowArgs} args - Arguments to find a MarksSubject
     * @example
     * // Get one MarksSubject
     * const marksSubject = await prisma.marksSubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarksSubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, MarksSubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarksSubjectClient<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarksSubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSubjectFindFirstArgs} args - Arguments to find a MarksSubject
     * @example
     * // Get one MarksSubject
     * const marksSubject = await prisma.marksSubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarksSubjectFindFirstArgs>(args?: SelectSubset<T, MarksSubjectFindFirstArgs<ExtArgs>>): Prisma__MarksSubjectClient<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarksSubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSubjectFindFirstOrThrowArgs} args - Arguments to find a MarksSubject
     * @example
     * // Get one MarksSubject
     * const marksSubject = await prisma.marksSubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarksSubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, MarksSubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarksSubjectClient<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarksSubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarksSubjects
     * const marksSubjects = await prisma.marksSubject.findMany()
     * 
     * // Get first 10 MarksSubjects
     * const marksSubjects = await prisma.marksSubject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marksSubjectWithIdOnly = await prisma.marksSubject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarksSubjectFindManyArgs>(args?: SelectSubset<T, MarksSubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarksSubject.
     * @param {MarksSubjectCreateArgs} args - Arguments to create a MarksSubject.
     * @example
     * // Create one MarksSubject
     * const MarksSubject = await prisma.marksSubject.create({
     *   data: {
     *     // ... data to create a MarksSubject
     *   }
     * })
     * 
     */
    create<T extends MarksSubjectCreateArgs>(args: SelectSubset<T, MarksSubjectCreateArgs<ExtArgs>>): Prisma__MarksSubjectClient<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarksSubjects.
     * @param {MarksSubjectCreateManyArgs} args - Arguments to create many MarksSubjects.
     * @example
     * // Create many MarksSubjects
     * const marksSubject = await prisma.marksSubject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarksSubjectCreateManyArgs>(args?: SelectSubset<T, MarksSubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MarksSubject.
     * @param {MarksSubjectDeleteArgs} args - Arguments to delete one MarksSubject.
     * @example
     * // Delete one MarksSubject
     * const MarksSubject = await prisma.marksSubject.delete({
     *   where: {
     *     // ... filter to delete one MarksSubject
     *   }
     * })
     * 
     */
    delete<T extends MarksSubjectDeleteArgs>(args: SelectSubset<T, MarksSubjectDeleteArgs<ExtArgs>>): Prisma__MarksSubjectClient<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarksSubject.
     * @param {MarksSubjectUpdateArgs} args - Arguments to update one MarksSubject.
     * @example
     * // Update one MarksSubject
     * const marksSubject = await prisma.marksSubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarksSubjectUpdateArgs>(args: SelectSubset<T, MarksSubjectUpdateArgs<ExtArgs>>): Prisma__MarksSubjectClient<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarksSubjects.
     * @param {MarksSubjectDeleteManyArgs} args - Arguments to filter MarksSubjects to delete.
     * @example
     * // Delete a few MarksSubjects
     * const { count } = await prisma.marksSubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarksSubjectDeleteManyArgs>(args?: SelectSubset<T, MarksSubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarksSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarksSubjects
     * const marksSubject = await prisma.marksSubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarksSubjectUpdateManyArgs>(args: SelectSubset<T, MarksSubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MarksSubject.
     * @param {MarksSubjectUpsertArgs} args - Arguments to update or create a MarksSubject.
     * @example
     * // Update or create a MarksSubject
     * const marksSubject = await prisma.marksSubject.upsert({
     *   create: {
     *     // ... data to create a MarksSubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarksSubject we want to update
     *   }
     * })
     */
    upsert<T extends MarksSubjectUpsertArgs>(args: SelectSubset<T, MarksSubjectUpsertArgs<ExtArgs>>): Prisma__MarksSubjectClient<$Result.GetResult<Prisma.$MarksSubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarksSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSubjectCountArgs} args - Arguments to filter MarksSubjects to count.
     * @example
     * // Count the number of MarksSubjects
     * const count = await prisma.marksSubject.count({
     *   where: {
     *     // ... the filter for the MarksSubjects we want to count
     *   }
     * })
    **/
    count<T extends MarksSubjectCountArgs>(
      args?: Subset<T, MarksSubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarksSubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarksSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarksSubjectAggregateArgs>(args: Subset<T, MarksSubjectAggregateArgs>): Prisma.PrismaPromise<GetMarksSubjectAggregateType<T>>

    /**
     * Group by MarksSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarksSubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarksSubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarksSubjectGroupByArgs['orderBy'] }
        : { orderBy?: MarksSubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarksSubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarksSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarksSubject model
   */
  readonly fields: MarksSubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarksSubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarksSubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    marksheet<T extends MarksSheetMasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MarksSheetMasterDefaultArgs<ExtArgs>>): Prisma__MarksSheetMasterClient<$Result.GetResult<Prisma.$MarksSheetMasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarksSubject model
   */
  interface MarksSubjectFieldRefs {
    readonly id: FieldRef<"MarksSubject", 'Int'>
    readonly marksheetId: FieldRef<"MarksSubject", 'Int'>
    readonly subjectId: FieldRef<"MarksSubject", 'Int'>
    readonly maxMarks: FieldRef<"MarksSubject", 'Int'>
    readonly passMarks: FieldRef<"MarksSubject", 'Int'>
    readonly remark: FieldRef<"MarksSubject", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MarksSubject findUnique
   */
  export type MarksSubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    /**
     * Filter, which MarksSubject to fetch.
     */
    where: MarksSubjectWhereUniqueInput
  }

  /**
   * MarksSubject findUniqueOrThrow
   */
  export type MarksSubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    /**
     * Filter, which MarksSubject to fetch.
     */
    where: MarksSubjectWhereUniqueInput
  }

  /**
   * MarksSubject findFirst
   */
  export type MarksSubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    /**
     * Filter, which MarksSubject to fetch.
     */
    where?: MarksSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarksSubjects to fetch.
     */
    orderBy?: MarksSubjectOrderByWithRelationInput | MarksSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarksSubjects.
     */
    cursor?: MarksSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarksSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarksSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarksSubjects.
     */
    distinct?: MarksSubjectScalarFieldEnum | MarksSubjectScalarFieldEnum[]
  }

  /**
   * MarksSubject findFirstOrThrow
   */
  export type MarksSubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    /**
     * Filter, which MarksSubject to fetch.
     */
    where?: MarksSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarksSubjects to fetch.
     */
    orderBy?: MarksSubjectOrderByWithRelationInput | MarksSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarksSubjects.
     */
    cursor?: MarksSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarksSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarksSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarksSubjects.
     */
    distinct?: MarksSubjectScalarFieldEnum | MarksSubjectScalarFieldEnum[]
  }

  /**
   * MarksSubject findMany
   */
  export type MarksSubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    /**
     * Filter, which MarksSubjects to fetch.
     */
    where?: MarksSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarksSubjects to fetch.
     */
    orderBy?: MarksSubjectOrderByWithRelationInput | MarksSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarksSubjects.
     */
    cursor?: MarksSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarksSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarksSubjects.
     */
    skip?: number
    distinct?: MarksSubjectScalarFieldEnum | MarksSubjectScalarFieldEnum[]
  }

  /**
   * MarksSubject create
   */
  export type MarksSubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a MarksSubject.
     */
    data: XOR<MarksSubjectCreateInput, MarksSubjectUncheckedCreateInput>
  }

  /**
   * MarksSubject createMany
   */
  export type MarksSubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarksSubjects.
     */
    data: MarksSubjectCreateManyInput | MarksSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarksSubject update
   */
  export type MarksSubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a MarksSubject.
     */
    data: XOR<MarksSubjectUpdateInput, MarksSubjectUncheckedUpdateInput>
    /**
     * Choose, which MarksSubject to update.
     */
    where: MarksSubjectWhereUniqueInput
  }

  /**
   * MarksSubject updateMany
   */
  export type MarksSubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarksSubjects.
     */
    data: XOR<MarksSubjectUpdateManyMutationInput, MarksSubjectUncheckedUpdateManyInput>
    /**
     * Filter which MarksSubjects to update
     */
    where?: MarksSubjectWhereInput
    /**
     * Limit how many MarksSubjects to update.
     */
    limit?: number
  }

  /**
   * MarksSubject upsert
   */
  export type MarksSubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the MarksSubject to update in case it exists.
     */
    where: MarksSubjectWhereUniqueInput
    /**
     * In case the MarksSubject found by the `where` argument doesn't exist, create a new MarksSubject with this data.
     */
    create: XOR<MarksSubjectCreateInput, MarksSubjectUncheckedCreateInput>
    /**
     * In case the MarksSubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarksSubjectUpdateInput, MarksSubjectUncheckedUpdateInput>
  }

  /**
   * MarksSubject delete
   */
  export type MarksSubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
    /**
     * Filter which MarksSubject to delete.
     */
    where: MarksSubjectWhereUniqueInput
  }

  /**
   * MarksSubject deleteMany
   */
  export type MarksSubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarksSubjects to delete
     */
    where?: MarksSubjectWhereInput
    /**
     * Limit how many MarksSubjects to delete.
     */
    limit?: number
  }

  /**
   * MarksSubject without action
   */
  export type MarksSubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarksSubject
     */
    select?: MarksSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarksSubject
     */
    omit?: MarksSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarksSubjectInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const SectionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    classId: 'classId'
  };

  export type SectionScalarFieldEnum = (typeof SectionScalarFieldEnum)[keyof typeof SectionScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    genderId: 'genderId',
    fatherName: 'fatherName',
    motherName: 'motherName',
    fatherOccupation: 'fatherOccupation',
    motherOccupation: 'motherOccupation',
    mobileNumber: 'mobileNumber',
    motherMobileNumber: 'motherMobileNumber',
    fatherEmail: 'fatherEmail',
    address: 'address',
    isTransportRequired: 'isTransportRequired',
    classId: 'classId',
    sectionId: 'sectionId'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const FeeDetailsScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    totalFee: 'totalFee',
    discountAmount: 'discountAmount',
    totalTerms: 'totalTerms',
    remainingAmount: 'remainingAmount'
  };

  export type FeeDetailsScalarFieldEnum = (typeof FeeDetailsScalarFieldEnum)[keyof typeof FeeDetailsScalarFieldEnum]


  export const TermScalarFieldEnum: {
    id: 'id',
    feeId: 'feeId',
    termNumber: 'termNumber',
    amount: 'amount',
    dueDate: 'dueDate',
    isPaid: 'isPaid'
  };

  export type TermScalarFieldEnum = (typeof TermScalarFieldEnum)[keyof typeof TermScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    classId: 'classId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const MasterDropdownScalarFieldEnum: {
    id: 'id',
    type: 'type',
    value: 'value'
  };

  export type MasterDropdownScalarFieldEnum = (typeof MasterDropdownScalarFieldEnum)[keyof typeof MasterDropdownScalarFieldEnum]


  export const StaffScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    genderId: 'genderId',
    qualificationId: 'qualificationId',
    departmentId: 'departmentId',
    designationId: 'designationId',
    staffTypeId: 'staffTypeId',
    experience: 'experience',
    mobileNumber: 'mobileNumber',
    email: 'email',
    username: 'username',
    password: 'password',
    salary: 'salary',
    isActive: 'isActive',
    isTransportRequired: 'isTransportRequired',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const TimePeriodScalarFieldEnum: {
    id: 'id',
    periodName: 'periodName',
    subjectId: 'subjectId',
    classId: 'classId',
    sectionId: 'sectionId',
    startDate: 'startDate',
    endDate: 'endDate',
    startTime: 'startTime',
    endTime: 'endTime',
    teacherId: 'teacherId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TimePeriodScalarFieldEnum = (typeof TimePeriodScalarFieldEnum)[keyof typeof TimePeriodScalarFieldEnum]


  export const ExamsScalarFieldEnum: {
    id: 'id',
    examName: 'examName',
    remarks: 'remarks'
  };

  export type ExamsScalarFieldEnum = (typeof ExamsScalarFieldEnum)[keyof typeof ExamsScalarFieldEnum]


  export const FeeStructureScalarFieldEnum: {
    id: 'id',
    classId: 'classId',
    academicYear: 'academicYear',
    numberOfTerms: 'numberOfTerms',
    isActive: 'isActive',
    totalAmount: 'totalAmount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FeeStructureScalarFieldEnum = (typeof FeeStructureScalarFieldEnum)[keyof typeof FeeStructureScalarFieldEnum]


  export const FeeItemScalarFieldEnum: {
    id: 'id',
    feeStructureId: 'feeStructureId',
    feeTypeId: 'feeTypeId',
    feeName: 'feeName',
    amount: 'amount',
    description: 'description'
  };

  export type FeeItemScalarFieldEnum = (typeof FeeItemScalarFieldEnum)[keyof typeof FeeItemScalarFieldEnum]


  export const MarksSheetMasterScalarFieldEnum: {
    id: 'id',
    classId: 'classId',
    sectionId: 'sectionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MarksSheetMasterScalarFieldEnum = (typeof MarksSheetMasterScalarFieldEnum)[keyof typeof MarksSheetMasterScalarFieldEnum]


  export const MarksSubjectScalarFieldEnum: {
    id: 'id',
    marksheetId: 'marksheetId',
    subjectId: 'subjectId',
    maxMarks: 'maxMarks',
    passMarks: 'passMarks',
    remark: 'remark'
  };

  export type MarksSubjectScalarFieldEnum = (typeof MarksSubjectScalarFieldEnum)[keyof typeof MarksSubjectScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const ClassOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type ClassOrderByRelevanceFieldEnum = (typeof ClassOrderByRelevanceFieldEnum)[keyof typeof ClassOrderByRelevanceFieldEnum]


  export const SectionOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type SectionOrderByRelevanceFieldEnum = (typeof SectionOrderByRelevanceFieldEnum)[keyof typeof SectionOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const StudentOrderByRelevanceFieldEnum: {
    username: 'username',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    fatherName: 'fatherName',
    motherName: 'motherName',
    fatherOccupation: 'fatherOccupation',
    motherOccupation: 'motherOccupation',
    mobileNumber: 'mobileNumber',
    motherMobileNumber: 'motherMobileNumber',
    fatherEmail: 'fatherEmail',
    address: 'address'
  };

  export type StudentOrderByRelevanceFieldEnum = (typeof StudentOrderByRelevanceFieldEnum)[keyof typeof StudentOrderByRelevanceFieldEnum]


  export const SubjectOrderByRelevanceFieldEnum: {
    name: 'name',
    code: 'code'
  };

  export type SubjectOrderByRelevanceFieldEnum = (typeof SubjectOrderByRelevanceFieldEnum)[keyof typeof SubjectOrderByRelevanceFieldEnum]


  export const MasterDropdownOrderByRelevanceFieldEnum: {
    type: 'type',
    value: 'value'
  };

  export type MasterDropdownOrderByRelevanceFieldEnum = (typeof MasterDropdownOrderByRelevanceFieldEnum)[keyof typeof MasterDropdownOrderByRelevanceFieldEnum]


  export const StaffOrderByRelevanceFieldEnum: {
    firstName: 'firstName',
    lastName: 'lastName',
    experience: 'experience',
    mobileNumber: 'mobileNumber',
    email: 'email',
    username: 'username',
    password: 'password'
  };

  export type StaffOrderByRelevanceFieldEnum = (typeof StaffOrderByRelevanceFieldEnum)[keyof typeof StaffOrderByRelevanceFieldEnum]


  export const TimePeriodOrderByRelevanceFieldEnum: {
    periodName: 'periodName',
    startTime: 'startTime',
    endTime: 'endTime'
  };

  export type TimePeriodOrderByRelevanceFieldEnum = (typeof TimePeriodOrderByRelevanceFieldEnum)[keyof typeof TimePeriodOrderByRelevanceFieldEnum]


  export const ExamsOrderByRelevanceFieldEnum: {
    examName: 'examName',
    remarks: 'remarks'
  };

  export type ExamsOrderByRelevanceFieldEnum = (typeof ExamsOrderByRelevanceFieldEnum)[keyof typeof ExamsOrderByRelevanceFieldEnum]


  export const FeeStructureOrderByRelevanceFieldEnum: {
    academicYear: 'academicYear'
  };

  export type FeeStructureOrderByRelevanceFieldEnum = (typeof FeeStructureOrderByRelevanceFieldEnum)[keyof typeof FeeStructureOrderByRelevanceFieldEnum]


  export const FeeItemOrderByRelevanceFieldEnum: {
    feeName: 'feeName',
    description: 'description'
  };

  export type FeeItemOrderByRelevanceFieldEnum = (typeof FeeItemOrderByRelevanceFieldEnum)[keyof typeof FeeItemOrderByRelevanceFieldEnum]


  export const MarksSubjectOrderByRelevanceFieldEnum: {
    remark: 'remark'
  };

  export type MarksSubjectOrderByRelevanceFieldEnum = (typeof MarksSubjectOrderByRelevanceFieldEnum)[keyof typeof MarksSubjectOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: IntFilter<"Class"> | number
    name?: StringFilter<"Class"> | string
    sections?: SectionListRelationFilter
    students?: StudentListRelationFilter
    subjects?: SubjectListRelationFilter
    timePeriods?: TimePeriodListRelationFilter
    feeStructures?: FeeStructureListRelationFilter
    marksheets?: MarksSheetMasterListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    sections?: SectionOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
    subjects?: SubjectOrderByRelationAggregateInput
    timePeriods?: TimePeriodOrderByRelationAggregateInput
    feeStructures?: FeeStructureOrderByRelationAggregateInput
    marksheets?: MarksSheetMasterOrderByRelationAggregateInput
    _relevance?: ClassOrderByRelevanceInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    name?: StringFilter<"Class"> | string
    sections?: SectionListRelationFilter
    students?: StudentListRelationFilter
    subjects?: SubjectListRelationFilter
    timePeriods?: TimePeriodListRelationFilter
    feeStructures?: FeeStructureListRelationFilter
    marksheets?: MarksSheetMasterListRelationFilter
  }, "id">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Class"> | number
    name?: StringWithAggregatesFilter<"Class"> | string
  }

  export type SectionWhereInput = {
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    id?: IntFilter<"Section"> | number
    name?: StringFilter<"Section"> | string
    classId?: IntFilter<"Section"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    students?: StudentListRelationFilter
    timePeriods?: TimePeriodListRelationFilter
    marksheets?: MarksSheetMasterListRelationFilter
  }

  export type SectionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
    class?: ClassOrderByWithRelationInput
    students?: StudentOrderByRelationAggregateInput
    timePeriods?: TimePeriodOrderByRelationAggregateInput
    marksheets?: MarksSheetMasterOrderByRelationAggregateInput
    _relevance?: SectionOrderByRelevanceInput
  }

  export type SectionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    name?: StringFilter<"Section"> | string
    classId?: IntFilter<"Section"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    students?: StudentListRelationFilter
    timePeriods?: TimePeriodListRelationFilter
    marksheets?: MarksSheetMasterListRelationFilter
  }, "id">

  export type SectionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
    _count?: SectionCountOrderByAggregateInput
    _avg?: SectionAvgOrderByAggregateInput
    _max?: SectionMaxOrderByAggregateInput
    _min?: SectionMinOrderByAggregateInput
    _sum?: SectionSumOrderByAggregateInput
  }

  export type SectionScalarWhereWithAggregatesInput = {
    AND?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    OR?: SectionScalarWhereWithAggregatesInput[]
    NOT?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Section"> | number
    name?: StringWithAggregatesFilter<"Section"> | string
    classId?: IntWithAggregatesFilter<"Section"> | number
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: IntFilter<"Student"> | number
    username?: StringFilter<"Student"> | string
    password?: StringFilter<"Student"> | string
    firstName?: StringFilter<"Student"> | string
    lastName?: StringFilter<"Student"> | string
    genderId?: IntNullableFilter<"Student"> | number | null
    fatherName?: StringNullableFilter<"Student"> | string | null
    motherName?: StringNullableFilter<"Student"> | string | null
    fatherOccupation?: StringNullableFilter<"Student"> | string | null
    motherOccupation?: StringNullableFilter<"Student"> | string | null
    mobileNumber?: StringNullableFilter<"Student"> | string | null
    motherMobileNumber?: StringNullableFilter<"Student"> | string | null
    fatherEmail?: StringNullableFilter<"Student"> | string | null
    address?: StringNullableFilter<"Student"> | string | null
    isTransportRequired?: BoolNullableFilter<"Student"> | boolean | null
    classId?: IntFilter<"Student"> | number
    sectionId?: IntFilter<"Student"> | number
    gender?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    feeDetails?: XOR<FeeDetailsNullableScalarRelationFilter, FeeDetailsWhereInput> | null
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    genderId?: SortOrderInput | SortOrder
    fatherName?: SortOrderInput | SortOrder
    motherName?: SortOrderInput | SortOrder
    fatherOccupation?: SortOrderInput | SortOrder
    motherOccupation?: SortOrderInput | SortOrder
    mobileNumber?: SortOrderInput | SortOrder
    motherMobileNumber?: SortOrderInput | SortOrder
    fatherEmail?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isTransportRequired?: SortOrderInput | SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    gender?: MasterDropdownOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    section?: SectionOrderByWithRelationInput
    feeDetails?: FeeDetailsOrderByWithRelationInput
    _relevance?: StudentOrderByRelevanceInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    password?: StringFilter<"Student"> | string
    firstName?: StringFilter<"Student"> | string
    lastName?: StringFilter<"Student"> | string
    genderId?: IntNullableFilter<"Student"> | number | null
    fatherName?: StringNullableFilter<"Student"> | string | null
    motherName?: StringNullableFilter<"Student"> | string | null
    fatherOccupation?: StringNullableFilter<"Student"> | string | null
    motherOccupation?: StringNullableFilter<"Student"> | string | null
    mobileNumber?: StringNullableFilter<"Student"> | string | null
    motherMobileNumber?: StringNullableFilter<"Student"> | string | null
    fatherEmail?: StringNullableFilter<"Student"> | string | null
    address?: StringNullableFilter<"Student"> | string | null
    isTransportRequired?: BoolNullableFilter<"Student"> | boolean | null
    classId?: IntFilter<"Student"> | number
    sectionId?: IntFilter<"Student"> | number
    gender?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    feeDetails?: XOR<FeeDetailsNullableScalarRelationFilter, FeeDetailsWhereInput> | null
  }, "id" | "username">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    genderId?: SortOrderInput | SortOrder
    fatherName?: SortOrderInput | SortOrder
    motherName?: SortOrderInput | SortOrder
    fatherOccupation?: SortOrderInput | SortOrder
    motherOccupation?: SortOrderInput | SortOrder
    mobileNumber?: SortOrderInput | SortOrder
    motherMobileNumber?: SortOrderInput | SortOrder
    fatherEmail?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isTransportRequired?: SortOrderInput | SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Student"> | number
    username?: StringWithAggregatesFilter<"Student"> | string
    password?: StringWithAggregatesFilter<"Student"> | string
    firstName?: StringWithAggregatesFilter<"Student"> | string
    lastName?: StringWithAggregatesFilter<"Student"> | string
    genderId?: IntNullableWithAggregatesFilter<"Student"> | number | null
    fatherName?: StringNullableWithAggregatesFilter<"Student"> | string | null
    motherName?: StringNullableWithAggregatesFilter<"Student"> | string | null
    fatherOccupation?: StringNullableWithAggregatesFilter<"Student"> | string | null
    motherOccupation?: StringNullableWithAggregatesFilter<"Student"> | string | null
    mobileNumber?: StringNullableWithAggregatesFilter<"Student"> | string | null
    motherMobileNumber?: StringNullableWithAggregatesFilter<"Student"> | string | null
    fatherEmail?: StringNullableWithAggregatesFilter<"Student"> | string | null
    address?: StringNullableWithAggregatesFilter<"Student"> | string | null
    isTransportRequired?: BoolNullableWithAggregatesFilter<"Student"> | boolean | null
    classId?: IntWithAggregatesFilter<"Student"> | number
    sectionId?: IntWithAggregatesFilter<"Student"> | number
  }

  export type FeeDetailsWhereInput = {
    AND?: FeeDetailsWhereInput | FeeDetailsWhereInput[]
    OR?: FeeDetailsWhereInput[]
    NOT?: FeeDetailsWhereInput | FeeDetailsWhereInput[]
    id?: IntFilter<"FeeDetails"> | number
    studentId?: IntFilter<"FeeDetails"> | number
    totalFee?: FloatFilter<"FeeDetails"> | number
    discountAmount?: FloatFilter<"FeeDetails"> | number
    totalTerms?: IntFilter<"FeeDetails"> | number
    remainingAmount?: FloatFilter<"FeeDetails"> | number
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    terms?: TermListRelationFilter
  }

  export type FeeDetailsOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalFee?: SortOrder
    discountAmount?: SortOrder
    totalTerms?: SortOrder
    remainingAmount?: SortOrder
    student?: StudentOrderByWithRelationInput
    terms?: TermOrderByRelationAggregateInput
  }

  export type FeeDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId?: number
    AND?: FeeDetailsWhereInput | FeeDetailsWhereInput[]
    OR?: FeeDetailsWhereInput[]
    NOT?: FeeDetailsWhereInput | FeeDetailsWhereInput[]
    totalFee?: FloatFilter<"FeeDetails"> | number
    discountAmount?: FloatFilter<"FeeDetails"> | number
    totalTerms?: IntFilter<"FeeDetails"> | number
    remainingAmount?: FloatFilter<"FeeDetails"> | number
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    terms?: TermListRelationFilter
  }, "id" | "studentId">

  export type FeeDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalFee?: SortOrder
    discountAmount?: SortOrder
    totalTerms?: SortOrder
    remainingAmount?: SortOrder
    _count?: FeeDetailsCountOrderByAggregateInput
    _avg?: FeeDetailsAvgOrderByAggregateInput
    _max?: FeeDetailsMaxOrderByAggregateInput
    _min?: FeeDetailsMinOrderByAggregateInput
    _sum?: FeeDetailsSumOrderByAggregateInput
  }

  export type FeeDetailsScalarWhereWithAggregatesInput = {
    AND?: FeeDetailsScalarWhereWithAggregatesInput | FeeDetailsScalarWhereWithAggregatesInput[]
    OR?: FeeDetailsScalarWhereWithAggregatesInput[]
    NOT?: FeeDetailsScalarWhereWithAggregatesInput | FeeDetailsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeeDetails"> | number
    studentId?: IntWithAggregatesFilter<"FeeDetails"> | number
    totalFee?: FloatWithAggregatesFilter<"FeeDetails"> | number
    discountAmount?: FloatWithAggregatesFilter<"FeeDetails"> | number
    totalTerms?: IntWithAggregatesFilter<"FeeDetails"> | number
    remainingAmount?: FloatWithAggregatesFilter<"FeeDetails"> | number
  }

  export type TermWhereInput = {
    AND?: TermWhereInput | TermWhereInput[]
    OR?: TermWhereInput[]
    NOT?: TermWhereInput | TermWhereInput[]
    id?: IntFilter<"Term"> | number
    feeId?: IntFilter<"Term"> | number
    termNumber?: IntFilter<"Term"> | number
    amount?: FloatFilter<"Term"> | number
    dueDate?: DateTimeFilter<"Term"> | Date | string
    isPaid?: BoolFilter<"Term"> | boolean
    feeDetail?: XOR<FeeDetailsScalarRelationFilter, FeeDetailsWhereInput>
  }

  export type TermOrderByWithRelationInput = {
    id?: SortOrder
    feeId?: SortOrder
    termNumber?: SortOrder
    amount?: SortOrder
    dueDate?: SortOrder
    isPaid?: SortOrder
    feeDetail?: FeeDetailsOrderByWithRelationInput
  }

  export type TermWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TermWhereInput | TermWhereInput[]
    OR?: TermWhereInput[]
    NOT?: TermWhereInput | TermWhereInput[]
    feeId?: IntFilter<"Term"> | number
    termNumber?: IntFilter<"Term"> | number
    amount?: FloatFilter<"Term"> | number
    dueDate?: DateTimeFilter<"Term"> | Date | string
    isPaid?: BoolFilter<"Term"> | boolean
    feeDetail?: XOR<FeeDetailsScalarRelationFilter, FeeDetailsWhereInput>
  }, "id">

  export type TermOrderByWithAggregationInput = {
    id?: SortOrder
    feeId?: SortOrder
    termNumber?: SortOrder
    amount?: SortOrder
    dueDate?: SortOrder
    isPaid?: SortOrder
    _count?: TermCountOrderByAggregateInput
    _avg?: TermAvgOrderByAggregateInput
    _max?: TermMaxOrderByAggregateInput
    _min?: TermMinOrderByAggregateInput
    _sum?: TermSumOrderByAggregateInput
  }

  export type TermScalarWhereWithAggregatesInput = {
    AND?: TermScalarWhereWithAggregatesInput | TermScalarWhereWithAggregatesInput[]
    OR?: TermScalarWhereWithAggregatesInput[]
    NOT?: TermScalarWhereWithAggregatesInput | TermScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Term"> | number
    feeId?: IntWithAggregatesFilter<"Term"> | number
    termNumber?: IntWithAggregatesFilter<"Term"> | number
    amount?: FloatWithAggregatesFilter<"Term"> | number
    dueDate?: DateTimeWithAggregatesFilter<"Term"> | Date | string
    isPaid?: BoolWithAggregatesFilter<"Term"> | boolean
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: IntFilter<"Subject"> | number
    name?: StringFilter<"Subject"> | string
    code?: StringNullableFilter<"Subject"> | string | null
    classId?: IntFilter<"Subject"> | number
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    timePeriods?: TimePeriodListRelationFilter
    marksheets?: MarksSubjectListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrderInput | SortOrder
    classId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    class?: ClassOrderByWithRelationInput
    timePeriods?: TimePeriodOrderByRelationAggregateInput
    marksheets?: MarksSubjectOrderByRelationAggregateInput
    _relevance?: SubjectOrderByRelevanceInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    name?: StringFilter<"Subject"> | string
    code?: StringNullableFilter<"Subject"> | string | null
    classId?: IntFilter<"Subject"> | number
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    timePeriods?: TimePeriodListRelationFilter
    marksheets?: MarksSubjectListRelationFilter
  }, "id">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrderInput | SortOrder
    classId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subject"> | number
    name?: StringWithAggregatesFilter<"Subject"> | string
    code?: StringNullableWithAggregatesFilter<"Subject"> | string | null
    classId?: IntWithAggregatesFilter<"Subject"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
  }

  export type MasterDropdownWhereInput = {
    AND?: MasterDropdownWhereInput | MasterDropdownWhereInput[]
    OR?: MasterDropdownWhereInput[]
    NOT?: MasterDropdownWhereInput | MasterDropdownWhereInput[]
    id?: IntFilter<"MasterDropdown"> | number
    type?: StringFilter<"MasterDropdown"> | string
    value?: StringFilter<"MasterDropdown"> | string
    students?: StudentListRelationFilter
    genderStaff?: StaffListRelationFilter
    qualificationStaff?: StaffListRelationFilter
    departmentStaff?: StaffListRelationFilter
    designationStaff?: StaffListRelationFilter
    staffTypeStaff?: StaffListRelationFilter
    feeItems?: FeeItemListRelationFilter
  }

  export type MasterDropdownOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    value?: SortOrder
    students?: StudentOrderByRelationAggregateInput
    genderStaff?: StaffOrderByRelationAggregateInput
    qualificationStaff?: StaffOrderByRelationAggregateInput
    departmentStaff?: StaffOrderByRelationAggregateInput
    designationStaff?: StaffOrderByRelationAggregateInput
    staffTypeStaff?: StaffOrderByRelationAggregateInput
    feeItems?: FeeItemOrderByRelationAggregateInput
    _relevance?: MasterDropdownOrderByRelevanceInput
  }

  export type MasterDropdownWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MasterDropdownWhereInput | MasterDropdownWhereInput[]
    OR?: MasterDropdownWhereInput[]
    NOT?: MasterDropdownWhereInput | MasterDropdownWhereInput[]
    type?: StringFilter<"MasterDropdown"> | string
    value?: StringFilter<"MasterDropdown"> | string
    students?: StudentListRelationFilter
    genderStaff?: StaffListRelationFilter
    qualificationStaff?: StaffListRelationFilter
    departmentStaff?: StaffListRelationFilter
    designationStaff?: StaffListRelationFilter
    staffTypeStaff?: StaffListRelationFilter
    feeItems?: FeeItemListRelationFilter
  }, "id">

  export type MasterDropdownOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    value?: SortOrder
    _count?: MasterDropdownCountOrderByAggregateInput
    _avg?: MasterDropdownAvgOrderByAggregateInput
    _max?: MasterDropdownMaxOrderByAggregateInput
    _min?: MasterDropdownMinOrderByAggregateInput
    _sum?: MasterDropdownSumOrderByAggregateInput
  }

  export type MasterDropdownScalarWhereWithAggregatesInput = {
    AND?: MasterDropdownScalarWhereWithAggregatesInput | MasterDropdownScalarWhereWithAggregatesInput[]
    OR?: MasterDropdownScalarWhereWithAggregatesInput[]
    NOT?: MasterDropdownScalarWhereWithAggregatesInput | MasterDropdownScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MasterDropdown"> | number
    type?: StringWithAggregatesFilter<"MasterDropdown"> | string
    value?: StringWithAggregatesFilter<"MasterDropdown"> | string
  }

  export type StaffWhereInput = {
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    id?: IntFilter<"Staff"> | number
    firstName?: StringFilter<"Staff"> | string
    lastName?: StringFilter<"Staff"> | string
    genderId?: IntNullableFilter<"Staff"> | number | null
    qualificationId?: IntNullableFilter<"Staff"> | number | null
    departmentId?: IntNullableFilter<"Staff"> | number | null
    designationId?: IntNullableFilter<"Staff"> | number | null
    staffTypeId?: IntNullableFilter<"Staff"> | number | null
    experience?: StringNullableFilter<"Staff"> | string | null
    mobileNumber?: StringNullableFilter<"Staff"> | string | null
    email?: StringNullableFilter<"Staff"> | string | null
    username?: StringFilter<"Staff"> | string
    password?: StringFilter<"Staff"> | string
    salary?: FloatNullableFilter<"Staff"> | number | null
    isActive?: BoolFilter<"Staff"> | boolean
    isTransportRequired?: BoolNullableFilter<"Staff"> | boolean | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    gender?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    qualification?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    department?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    designation?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    staffType?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    timePeriods?: TimePeriodListRelationFilter
  }

  export type StaffOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    genderId?: SortOrderInput | SortOrder
    qualificationId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    designationId?: SortOrderInput | SortOrder
    staffTypeId?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    mobileNumber?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrder
    password?: SortOrder
    salary?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isTransportRequired?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gender?: MasterDropdownOrderByWithRelationInput
    qualification?: MasterDropdownOrderByWithRelationInput
    department?: MasterDropdownOrderByWithRelationInput
    designation?: MasterDropdownOrderByWithRelationInput
    staffType?: MasterDropdownOrderByWithRelationInput
    timePeriods?: TimePeriodOrderByRelationAggregateInput
    _relevance?: StaffOrderByRelevanceInput
  }

  export type StaffWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    username?: string
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    firstName?: StringFilter<"Staff"> | string
    lastName?: StringFilter<"Staff"> | string
    genderId?: IntNullableFilter<"Staff"> | number | null
    qualificationId?: IntNullableFilter<"Staff"> | number | null
    departmentId?: IntNullableFilter<"Staff"> | number | null
    designationId?: IntNullableFilter<"Staff"> | number | null
    staffTypeId?: IntNullableFilter<"Staff"> | number | null
    experience?: StringNullableFilter<"Staff"> | string | null
    mobileNumber?: StringNullableFilter<"Staff"> | string | null
    password?: StringFilter<"Staff"> | string
    salary?: FloatNullableFilter<"Staff"> | number | null
    isActive?: BoolFilter<"Staff"> | boolean
    isTransportRequired?: BoolNullableFilter<"Staff"> | boolean | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    gender?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    qualification?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    department?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    designation?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    staffType?: XOR<MasterDropdownNullableScalarRelationFilter, MasterDropdownWhereInput> | null
    timePeriods?: TimePeriodListRelationFilter
  }, "id" | "email" | "username">

  export type StaffOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    genderId?: SortOrderInput | SortOrder
    qualificationId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    designationId?: SortOrderInput | SortOrder
    staffTypeId?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    mobileNumber?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrder
    password?: SortOrder
    salary?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isTransportRequired?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StaffCountOrderByAggregateInput
    _avg?: StaffAvgOrderByAggregateInput
    _max?: StaffMaxOrderByAggregateInput
    _min?: StaffMinOrderByAggregateInput
    _sum?: StaffSumOrderByAggregateInput
  }

  export type StaffScalarWhereWithAggregatesInput = {
    AND?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    OR?: StaffScalarWhereWithAggregatesInput[]
    NOT?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Staff"> | number
    firstName?: StringWithAggregatesFilter<"Staff"> | string
    lastName?: StringWithAggregatesFilter<"Staff"> | string
    genderId?: IntNullableWithAggregatesFilter<"Staff"> | number | null
    qualificationId?: IntNullableWithAggregatesFilter<"Staff"> | number | null
    departmentId?: IntNullableWithAggregatesFilter<"Staff"> | number | null
    designationId?: IntNullableWithAggregatesFilter<"Staff"> | number | null
    staffTypeId?: IntNullableWithAggregatesFilter<"Staff"> | number | null
    experience?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    mobileNumber?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    email?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    username?: StringWithAggregatesFilter<"Staff"> | string
    password?: StringWithAggregatesFilter<"Staff"> | string
    salary?: FloatNullableWithAggregatesFilter<"Staff"> | number | null
    isActive?: BoolWithAggregatesFilter<"Staff"> | boolean
    isTransportRequired?: BoolNullableWithAggregatesFilter<"Staff"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
  }

  export type TimePeriodWhereInput = {
    AND?: TimePeriodWhereInput | TimePeriodWhereInput[]
    OR?: TimePeriodWhereInput[]
    NOT?: TimePeriodWhereInput | TimePeriodWhereInput[]
    id?: IntFilter<"TimePeriod"> | number
    periodName?: StringFilter<"TimePeriod"> | string
    subjectId?: IntFilter<"TimePeriod"> | number
    classId?: IntFilter<"TimePeriod"> | number
    sectionId?: IntFilter<"TimePeriod"> | number
    startDate?: DateTimeFilter<"TimePeriod"> | Date | string
    endDate?: DateTimeFilter<"TimePeriod"> | Date | string
    startTime?: StringFilter<"TimePeriod"> | string
    endTime?: StringFilter<"TimePeriod"> | string
    teacherId?: IntFilter<"TimePeriod"> | number
    isActive?: BoolFilter<"TimePeriod"> | boolean
    createdAt?: DateTimeFilter<"TimePeriod"> | Date | string
    updatedAt?: DateTimeFilter<"TimePeriod"> | Date | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    assignedTeacher?: XOR<StaffScalarRelationFilter, StaffWhereInput>
  }

  export type TimePeriodOrderByWithRelationInput = {
    id?: SortOrder
    periodName?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    teacherId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    section?: SectionOrderByWithRelationInput
    assignedTeacher?: StaffOrderByWithRelationInput
    _relevance?: TimePeriodOrderByRelevanceInput
  }

  export type TimePeriodWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TimePeriodWhereInput | TimePeriodWhereInput[]
    OR?: TimePeriodWhereInput[]
    NOT?: TimePeriodWhereInput | TimePeriodWhereInput[]
    periodName?: StringFilter<"TimePeriod"> | string
    subjectId?: IntFilter<"TimePeriod"> | number
    classId?: IntFilter<"TimePeriod"> | number
    sectionId?: IntFilter<"TimePeriod"> | number
    startDate?: DateTimeFilter<"TimePeriod"> | Date | string
    endDate?: DateTimeFilter<"TimePeriod"> | Date | string
    startTime?: StringFilter<"TimePeriod"> | string
    endTime?: StringFilter<"TimePeriod"> | string
    teacherId?: IntFilter<"TimePeriod"> | number
    isActive?: BoolFilter<"TimePeriod"> | boolean
    createdAt?: DateTimeFilter<"TimePeriod"> | Date | string
    updatedAt?: DateTimeFilter<"TimePeriod"> | Date | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    assignedTeacher?: XOR<StaffScalarRelationFilter, StaffWhereInput>
  }, "id">

  export type TimePeriodOrderByWithAggregationInput = {
    id?: SortOrder
    periodName?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    teacherId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TimePeriodCountOrderByAggregateInput
    _avg?: TimePeriodAvgOrderByAggregateInput
    _max?: TimePeriodMaxOrderByAggregateInput
    _min?: TimePeriodMinOrderByAggregateInput
    _sum?: TimePeriodSumOrderByAggregateInput
  }

  export type TimePeriodScalarWhereWithAggregatesInput = {
    AND?: TimePeriodScalarWhereWithAggregatesInput | TimePeriodScalarWhereWithAggregatesInput[]
    OR?: TimePeriodScalarWhereWithAggregatesInput[]
    NOT?: TimePeriodScalarWhereWithAggregatesInput | TimePeriodScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TimePeriod"> | number
    periodName?: StringWithAggregatesFilter<"TimePeriod"> | string
    subjectId?: IntWithAggregatesFilter<"TimePeriod"> | number
    classId?: IntWithAggregatesFilter<"TimePeriod"> | number
    sectionId?: IntWithAggregatesFilter<"TimePeriod"> | number
    startDate?: DateTimeWithAggregatesFilter<"TimePeriod"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"TimePeriod"> | Date | string
    startTime?: StringWithAggregatesFilter<"TimePeriod"> | string
    endTime?: StringWithAggregatesFilter<"TimePeriod"> | string
    teacherId?: IntWithAggregatesFilter<"TimePeriod"> | number
    isActive?: BoolWithAggregatesFilter<"TimePeriod"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TimePeriod"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TimePeriod"> | Date | string
  }

  export type ExamsWhereInput = {
    AND?: ExamsWhereInput | ExamsWhereInput[]
    OR?: ExamsWhereInput[]
    NOT?: ExamsWhereInput | ExamsWhereInput[]
    id?: IntFilter<"Exams"> | number
    examName?: StringFilter<"Exams"> | string
    remarks?: StringFilter<"Exams"> | string
  }

  export type ExamsOrderByWithRelationInput = {
    id?: SortOrder
    examName?: SortOrder
    remarks?: SortOrder
    _relevance?: ExamsOrderByRelevanceInput
  }

  export type ExamsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExamsWhereInput | ExamsWhereInput[]
    OR?: ExamsWhereInput[]
    NOT?: ExamsWhereInput | ExamsWhereInput[]
    examName?: StringFilter<"Exams"> | string
    remarks?: StringFilter<"Exams"> | string
  }, "id">

  export type ExamsOrderByWithAggregationInput = {
    id?: SortOrder
    examName?: SortOrder
    remarks?: SortOrder
    _count?: ExamsCountOrderByAggregateInput
    _avg?: ExamsAvgOrderByAggregateInput
    _max?: ExamsMaxOrderByAggregateInput
    _min?: ExamsMinOrderByAggregateInput
    _sum?: ExamsSumOrderByAggregateInput
  }

  export type ExamsScalarWhereWithAggregatesInput = {
    AND?: ExamsScalarWhereWithAggregatesInput | ExamsScalarWhereWithAggregatesInput[]
    OR?: ExamsScalarWhereWithAggregatesInput[]
    NOT?: ExamsScalarWhereWithAggregatesInput | ExamsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Exams"> | number
    examName?: StringWithAggregatesFilter<"Exams"> | string
    remarks?: StringWithAggregatesFilter<"Exams"> | string
  }

  export type FeeStructureWhereInput = {
    AND?: FeeStructureWhereInput | FeeStructureWhereInput[]
    OR?: FeeStructureWhereInput[]
    NOT?: FeeStructureWhereInput | FeeStructureWhereInput[]
    id?: IntFilter<"FeeStructure"> | number
    classId?: IntFilter<"FeeStructure"> | number
    academicYear?: StringFilter<"FeeStructure"> | string
    numberOfTerms?: IntFilter<"FeeStructure"> | number
    isActive?: BoolFilter<"FeeStructure"> | boolean
    totalAmount?: FloatFilter<"FeeStructure"> | number
    createdAt?: DateTimeFilter<"FeeStructure"> | Date | string
    updatedAt?: DateTimeFilter<"FeeStructure"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    feeItems?: FeeItemListRelationFilter
  }

  export type FeeStructureOrderByWithRelationInput = {
    id?: SortOrder
    classId?: SortOrder
    academicYear?: SortOrder
    numberOfTerms?: SortOrder
    isActive?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    class?: ClassOrderByWithRelationInput
    feeItems?: FeeItemOrderByRelationAggregateInput
    _relevance?: FeeStructureOrderByRelevanceInput
  }

  export type FeeStructureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeeStructureWhereInput | FeeStructureWhereInput[]
    OR?: FeeStructureWhereInput[]
    NOT?: FeeStructureWhereInput | FeeStructureWhereInput[]
    classId?: IntFilter<"FeeStructure"> | number
    academicYear?: StringFilter<"FeeStructure"> | string
    numberOfTerms?: IntFilter<"FeeStructure"> | number
    isActive?: BoolFilter<"FeeStructure"> | boolean
    totalAmount?: FloatFilter<"FeeStructure"> | number
    createdAt?: DateTimeFilter<"FeeStructure"> | Date | string
    updatedAt?: DateTimeFilter<"FeeStructure"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    feeItems?: FeeItemListRelationFilter
  }, "id">

  export type FeeStructureOrderByWithAggregationInput = {
    id?: SortOrder
    classId?: SortOrder
    academicYear?: SortOrder
    numberOfTerms?: SortOrder
    isActive?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FeeStructureCountOrderByAggregateInput
    _avg?: FeeStructureAvgOrderByAggregateInput
    _max?: FeeStructureMaxOrderByAggregateInput
    _min?: FeeStructureMinOrderByAggregateInput
    _sum?: FeeStructureSumOrderByAggregateInput
  }

  export type FeeStructureScalarWhereWithAggregatesInput = {
    AND?: FeeStructureScalarWhereWithAggregatesInput | FeeStructureScalarWhereWithAggregatesInput[]
    OR?: FeeStructureScalarWhereWithAggregatesInput[]
    NOT?: FeeStructureScalarWhereWithAggregatesInput | FeeStructureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeeStructure"> | number
    classId?: IntWithAggregatesFilter<"FeeStructure"> | number
    academicYear?: StringWithAggregatesFilter<"FeeStructure"> | string
    numberOfTerms?: IntWithAggregatesFilter<"FeeStructure"> | number
    isActive?: BoolWithAggregatesFilter<"FeeStructure"> | boolean
    totalAmount?: FloatWithAggregatesFilter<"FeeStructure"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FeeStructure"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FeeStructure"> | Date | string
  }

  export type FeeItemWhereInput = {
    AND?: FeeItemWhereInput | FeeItemWhereInput[]
    OR?: FeeItemWhereInput[]
    NOT?: FeeItemWhereInput | FeeItemWhereInput[]
    id?: IntFilter<"FeeItem"> | number
    feeStructureId?: IntFilter<"FeeItem"> | number
    feeTypeId?: IntFilter<"FeeItem"> | number
    feeName?: StringFilter<"FeeItem"> | string
    amount?: FloatFilter<"FeeItem"> | number
    description?: StringNullableFilter<"FeeItem"> | string | null
    feeStructure?: XOR<FeeStructureScalarRelationFilter, FeeStructureWhereInput>
    feeType?: XOR<MasterDropdownScalarRelationFilter, MasterDropdownWhereInput>
  }

  export type FeeItemOrderByWithRelationInput = {
    id?: SortOrder
    feeStructureId?: SortOrder
    feeTypeId?: SortOrder
    feeName?: SortOrder
    amount?: SortOrder
    description?: SortOrderInput | SortOrder
    feeStructure?: FeeStructureOrderByWithRelationInput
    feeType?: MasterDropdownOrderByWithRelationInput
    _relevance?: FeeItemOrderByRelevanceInput
  }

  export type FeeItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeeItemWhereInput | FeeItemWhereInput[]
    OR?: FeeItemWhereInput[]
    NOT?: FeeItemWhereInput | FeeItemWhereInput[]
    feeStructureId?: IntFilter<"FeeItem"> | number
    feeTypeId?: IntFilter<"FeeItem"> | number
    feeName?: StringFilter<"FeeItem"> | string
    amount?: FloatFilter<"FeeItem"> | number
    description?: StringNullableFilter<"FeeItem"> | string | null
    feeStructure?: XOR<FeeStructureScalarRelationFilter, FeeStructureWhereInput>
    feeType?: XOR<MasterDropdownScalarRelationFilter, MasterDropdownWhereInput>
  }, "id">

  export type FeeItemOrderByWithAggregationInput = {
    id?: SortOrder
    feeStructureId?: SortOrder
    feeTypeId?: SortOrder
    feeName?: SortOrder
    amount?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: FeeItemCountOrderByAggregateInput
    _avg?: FeeItemAvgOrderByAggregateInput
    _max?: FeeItemMaxOrderByAggregateInput
    _min?: FeeItemMinOrderByAggregateInput
    _sum?: FeeItemSumOrderByAggregateInput
  }

  export type FeeItemScalarWhereWithAggregatesInput = {
    AND?: FeeItemScalarWhereWithAggregatesInput | FeeItemScalarWhereWithAggregatesInput[]
    OR?: FeeItemScalarWhereWithAggregatesInput[]
    NOT?: FeeItemScalarWhereWithAggregatesInput | FeeItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeeItem"> | number
    feeStructureId?: IntWithAggregatesFilter<"FeeItem"> | number
    feeTypeId?: IntWithAggregatesFilter<"FeeItem"> | number
    feeName?: StringWithAggregatesFilter<"FeeItem"> | string
    amount?: FloatWithAggregatesFilter<"FeeItem"> | number
    description?: StringNullableWithAggregatesFilter<"FeeItem"> | string | null
  }

  export type MarksSheetMasterWhereInput = {
    AND?: MarksSheetMasterWhereInput | MarksSheetMasterWhereInput[]
    OR?: MarksSheetMasterWhereInput[]
    NOT?: MarksSheetMasterWhereInput | MarksSheetMasterWhereInput[]
    id?: IntFilter<"MarksSheetMaster"> | number
    classId?: IntFilter<"MarksSheetMaster"> | number
    sectionId?: IntFilter<"MarksSheetMaster"> | number
    createdAt?: DateTimeFilter<"MarksSheetMaster"> | Date | string
    updatedAt?: DateTimeFilter<"MarksSheetMaster"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    subjects?: MarksSubjectListRelationFilter
  }

  export type MarksSheetMasterOrderByWithRelationInput = {
    id?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    class?: ClassOrderByWithRelationInput
    section?: SectionOrderByWithRelationInput
    subjects?: MarksSubjectOrderByRelationAggregateInput
  }

  export type MarksSheetMasterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MarksSheetMasterWhereInput | MarksSheetMasterWhereInput[]
    OR?: MarksSheetMasterWhereInput[]
    NOT?: MarksSheetMasterWhereInput | MarksSheetMasterWhereInput[]
    classId?: IntFilter<"MarksSheetMaster"> | number
    sectionId?: IntFilter<"MarksSheetMaster"> | number
    createdAt?: DateTimeFilter<"MarksSheetMaster"> | Date | string
    updatedAt?: DateTimeFilter<"MarksSheetMaster"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    subjects?: MarksSubjectListRelationFilter
  }, "id">

  export type MarksSheetMasterOrderByWithAggregationInput = {
    id?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MarksSheetMasterCountOrderByAggregateInput
    _avg?: MarksSheetMasterAvgOrderByAggregateInput
    _max?: MarksSheetMasterMaxOrderByAggregateInput
    _min?: MarksSheetMasterMinOrderByAggregateInput
    _sum?: MarksSheetMasterSumOrderByAggregateInput
  }

  export type MarksSheetMasterScalarWhereWithAggregatesInput = {
    AND?: MarksSheetMasterScalarWhereWithAggregatesInput | MarksSheetMasterScalarWhereWithAggregatesInput[]
    OR?: MarksSheetMasterScalarWhereWithAggregatesInput[]
    NOT?: MarksSheetMasterScalarWhereWithAggregatesInput | MarksSheetMasterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MarksSheetMaster"> | number
    classId?: IntWithAggregatesFilter<"MarksSheetMaster"> | number
    sectionId?: IntWithAggregatesFilter<"MarksSheetMaster"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MarksSheetMaster"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MarksSheetMaster"> | Date | string
  }

  export type MarksSubjectWhereInput = {
    AND?: MarksSubjectWhereInput | MarksSubjectWhereInput[]
    OR?: MarksSubjectWhereInput[]
    NOT?: MarksSubjectWhereInput | MarksSubjectWhereInput[]
    id?: IntFilter<"MarksSubject"> | number
    marksheetId?: IntFilter<"MarksSubject"> | number
    subjectId?: IntFilter<"MarksSubject"> | number
    maxMarks?: IntFilter<"MarksSubject"> | number
    passMarks?: IntFilter<"MarksSubject"> | number
    remark?: StringNullableFilter<"MarksSubject"> | string | null
    marksheet?: XOR<MarksSheetMasterScalarRelationFilter, MarksSheetMasterWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }

  export type MarksSubjectOrderByWithRelationInput = {
    id?: SortOrder
    marksheetId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
    passMarks?: SortOrder
    remark?: SortOrderInput | SortOrder
    marksheet?: MarksSheetMasterOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    _relevance?: MarksSubjectOrderByRelevanceInput
  }

  export type MarksSubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MarksSubjectWhereInput | MarksSubjectWhereInput[]
    OR?: MarksSubjectWhereInput[]
    NOT?: MarksSubjectWhereInput | MarksSubjectWhereInput[]
    marksheetId?: IntFilter<"MarksSubject"> | number
    subjectId?: IntFilter<"MarksSubject"> | number
    maxMarks?: IntFilter<"MarksSubject"> | number
    passMarks?: IntFilter<"MarksSubject"> | number
    remark?: StringNullableFilter<"MarksSubject"> | string | null
    marksheet?: XOR<MarksSheetMasterScalarRelationFilter, MarksSheetMasterWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }, "id">

  export type MarksSubjectOrderByWithAggregationInput = {
    id?: SortOrder
    marksheetId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
    passMarks?: SortOrder
    remark?: SortOrderInput | SortOrder
    _count?: MarksSubjectCountOrderByAggregateInput
    _avg?: MarksSubjectAvgOrderByAggregateInput
    _max?: MarksSubjectMaxOrderByAggregateInput
    _min?: MarksSubjectMinOrderByAggregateInput
    _sum?: MarksSubjectSumOrderByAggregateInput
  }

  export type MarksSubjectScalarWhereWithAggregatesInput = {
    AND?: MarksSubjectScalarWhereWithAggregatesInput | MarksSubjectScalarWhereWithAggregatesInput[]
    OR?: MarksSubjectScalarWhereWithAggregatesInput[]
    NOT?: MarksSubjectScalarWhereWithAggregatesInput | MarksSubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MarksSubject"> | number
    marksheetId?: IntWithAggregatesFilter<"MarksSubject"> | number
    subjectId?: IntWithAggregatesFilter<"MarksSubject"> | number
    maxMarks?: IntWithAggregatesFilter<"MarksSubject"> | number
    passMarks?: IntWithAggregatesFilter<"MarksSubject"> | number
    remark?: StringNullableWithAggregatesFilter<"MarksSubject"> | string | null
  }

  export type ClassCreateInput = {
    name: string
    sections?: SectionCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    subjects?: SubjectCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: number
    name: string
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureUncheckedCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    subjects?: SubjectUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUncheckedUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: number
    name: string
  }

  export type ClassUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectionCreateInput = {
    name: string
    class: ClassCreateNestedOneWithoutSectionsInput
    students?: StudentCreateNestedManyWithoutSectionInput
    timePeriods?: TimePeriodCreateNestedManyWithoutSectionInput
    marksheets?: MarksSheetMasterCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateInput = {
    id?: number
    name: string
    classId: number
    students?: StudentUncheckedCreateNestedManyWithoutSectionInput
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutSectionInput
    marksheets?: MarksSheetMasterUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutSectionsNestedInput
    students?: StudentUpdateManyWithoutSectionNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutSectionNestedInput
    marksheets?: MarksSheetMasterUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    students?: StudentUncheckedUpdateManyWithoutSectionNestedInput
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutSectionNestedInput
    marksheets?: MarksSheetMasterUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionCreateManyInput = {
    id?: number
    name: string
    classId: number
  }

  export type SectionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    gender?: MasterDropdownCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    section: SectionCreateNestedOneWithoutStudentsInput
    feeDetails?: FeeDetailsCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    genderId?: number | null
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    classId: number
    sectionId: number
    feeDetails?: FeeDetailsUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gender?: MasterDropdownUpdateOneWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    section?: SectionUpdateOneRequiredWithoutStudentsNestedInput
    feeDetails?: FeeDetailsUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    feeDetails?: FeeDetailsUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    genderId?: number | null
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    classId: number
    sectionId: number
  }

  export type StudentUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
  }

  export type FeeDetailsCreateInput = {
    totalFee: number
    discountAmount: number
    totalTerms: number
    remainingAmount: number
    student: StudentCreateNestedOneWithoutFeeDetailsInput
    terms?: TermCreateNestedManyWithoutFeeDetailInput
  }

  export type FeeDetailsUncheckedCreateInput = {
    id?: number
    studentId: number
    totalFee: number
    discountAmount: number
    totalTerms: number
    remainingAmount: number
    terms?: TermUncheckedCreateNestedManyWithoutFeeDetailInput
  }

  export type FeeDetailsUpdateInput = {
    totalFee?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    totalTerms?: IntFieldUpdateOperationsInput | number
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutFeeDetailsNestedInput
    terms?: TermUpdateManyWithoutFeeDetailNestedInput
  }

  export type FeeDetailsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    totalFee?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    totalTerms?: IntFieldUpdateOperationsInput | number
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    terms?: TermUncheckedUpdateManyWithoutFeeDetailNestedInput
  }

  export type FeeDetailsCreateManyInput = {
    id?: number
    studentId: number
    totalFee: number
    discountAmount: number
    totalTerms: number
    remainingAmount: number
  }

  export type FeeDetailsUpdateManyMutationInput = {
    totalFee?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    totalTerms?: IntFieldUpdateOperationsInput | number
    remainingAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type FeeDetailsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    totalFee?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    totalTerms?: IntFieldUpdateOperationsInput | number
    remainingAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type TermCreateInput = {
    termNumber: number
    amount: number
    dueDate: Date | string
    isPaid: boolean
    feeDetail: FeeDetailsCreateNestedOneWithoutTermsInput
  }

  export type TermUncheckedCreateInput = {
    id?: number
    feeId: number
    termNumber: number
    amount: number
    dueDate: Date | string
    isPaid: boolean
  }

  export type TermUpdateInput = {
    termNumber?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    feeDetail?: FeeDetailsUpdateOneRequiredWithoutTermsNestedInput
  }

  export type TermUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeId?: IntFieldUpdateOperationsInput | number
    termNumber?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TermCreateManyInput = {
    id?: number
    feeId: number
    termNumber: number
    amount: number
    dueDate: Date | string
    isPaid: boolean
  }

  export type TermUpdateManyMutationInput = {
    termNumber?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TermUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeId?: IntFieldUpdateOperationsInput | number
    termNumber?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubjectCreateInput = {
    name: string
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutSubjectsInput
    timePeriods?: TimePeriodCreateNestedManyWithoutSubjectInput
    marksheets?: MarksSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: number
    name: string
    code?: string | null
    classId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutSubjectInput
    marksheets?: MarksSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutSubjectsNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutSubjectNestedInput
    marksheets?: MarksSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutSubjectNestedInput
    marksheets?: MarksSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: number
    name: string
    code?: string | null
    classId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterDropdownCreateInput = {
    type: string
    value: string
    students?: StudentCreateNestedManyWithoutGenderInput
    genderStaff?: StaffCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownUncheckedCreateInput = {
    id?: number
    type: string
    value: string
    students?: StudentUncheckedCreateNestedManyWithoutGenderInput
    genderStaff?: StaffUncheckedCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffUncheckedCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffUncheckedCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffUncheckedCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffUncheckedCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemUncheckedCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUncheckedUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUncheckedUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUncheckedUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUncheckedUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUncheckedUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUncheckedUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownCreateManyInput = {
    id?: number
    type: string
    value: string
  }

  export type MasterDropdownUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type MasterDropdownUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type StaffCreateInput = {
    firstName: string
    lastName: string
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gender?: MasterDropdownCreateNestedOneWithoutGenderStaffInput
    qualification?: MasterDropdownCreateNestedOneWithoutQualificationStaffInput
    department?: MasterDropdownCreateNestedOneWithoutDepartmentStaffInput
    designation?: MasterDropdownCreateNestedOneWithoutDesignationStaffInput
    staffType?: MasterDropdownCreateNestedOneWithoutStaffTypeStaffInput
    timePeriods?: TimePeriodCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    qualificationId?: number | null
    departmentId?: number | null
    designationId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: MasterDropdownUpdateOneWithoutGenderStaffNestedInput
    qualification?: MasterDropdownUpdateOneWithoutQualificationStaffNestedInput
    department?: MasterDropdownUpdateOneWithoutDepartmentStaffNestedInput
    designation?: MasterDropdownUpdateOneWithoutDesignationStaffNestedInput
    staffType?: MasterDropdownUpdateOneWithoutStaffTypeStaffNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    qualificationId?: number | null
    departmentId?: number | null
    designationId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimePeriodCreateInput = {
    periodName: string
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutTimePeriodsInput
    class: ClassCreateNestedOneWithoutTimePeriodsInput
    section: SectionCreateNestedOneWithoutTimePeriodsInput
    assignedTeacher: StaffCreateNestedOneWithoutTimePeriodsInput
  }

  export type TimePeriodUncheckedCreateInput = {
    id?: number
    periodName: string
    subjectId: number
    classId: number
    sectionId: number
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    teacherId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TimePeriodUpdateInput = {
    periodName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutTimePeriodsNestedInput
    class?: ClassUpdateOneRequiredWithoutTimePeriodsNestedInput
    section?: SectionUpdateOneRequiredWithoutTimePeriodsNestedInput
    assignedTeacher?: StaffUpdateOneRequiredWithoutTimePeriodsNestedInput
  }

  export type TimePeriodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodName?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimePeriodCreateManyInput = {
    id?: number
    periodName: string
    subjectId: number
    classId: number
    sectionId: number
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    teacherId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TimePeriodUpdateManyMutationInput = {
    periodName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimePeriodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodName?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamsCreateInput = {
    examName: string
    remarks: string
  }

  export type ExamsUncheckedCreateInput = {
    id?: number
    examName: string
    remarks: string
  }

  export type ExamsUpdateInput = {
    examName?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
  }

  export type ExamsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    examName?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
  }

  export type ExamsCreateManyInput = {
    id?: number
    examName: string
    remarks: string
  }

  export type ExamsUpdateManyMutationInput = {
    examName?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
  }

  export type ExamsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    examName?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
  }

  export type FeeStructureCreateInput = {
    academicYear: string
    numberOfTerms: number
    isActive?: boolean
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutFeeStructuresInput
    feeItems?: FeeItemCreateNestedManyWithoutFeeStructureInput
  }

  export type FeeStructureUncheckedCreateInput = {
    id?: number
    classId: number
    academicYear: string
    numberOfTerms: number
    isActive?: boolean
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    feeItems?: FeeItemUncheckedCreateNestedManyWithoutFeeStructureInput
  }

  export type FeeStructureUpdateInput = {
    academicYear?: StringFieldUpdateOperationsInput | string
    numberOfTerms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutFeeStructuresNestedInput
    feeItems?: FeeItemUpdateManyWithoutFeeStructureNestedInput
  }

  export type FeeStructureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    academicYear?: StringFieldUpdateOperationsInput | string
    numberOfTerms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feeItems?: FeeItemUncheckedUpdateManyWithoutFeeStructureNestedInput
  }

  export type FeeStructureCreateManyInput = {
    id?: number
    classId: number
    academicYear: string
    numberOfTerms: number
    isActive?: boolean
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeeStructureUpdateManyMutationInput = {
    academicYear?: StringFieldUpdateOperationsInput | string
    numberOfTerms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeStructureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    academicYear?: StringFieldUpdateOperationsInput | string
    numberOfTerms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeItemCreateInput = {
    feeName: string
    amount: number
    description?: string | null
    feeStructure: FeeStructureCreateNestedOneWithoutFeeItemsInput
    feeType: MasterDropdownCreateNestedOneWithoutFeeItemsInput
  }

  export type FeeItemUncheckedCreateInput = {
    id?: number
    feeStructureId: number
    feeTypeId: number
    feeName: string
    amount: number
    description?: string | null
  }

  export type FeeItemUpdateInput = {
    feeName?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    feeStructure?: FeeStructureUpdateOneRequiredWithoutFeeItemsNestedInput
    feeType?: MasterDropdownUpdateOneRequiredWithoutFeeItemsNestedInput
  }

  export type FeeItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeStructureId?: IntFieldUpdateOperationsInput | number
    feeTypeId?: IntFieldUpdateOperationsInput | number
    feeName?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeeItemCreateManyInput = {
    id?: number
    feeStructureId: number
    feeTypeId: number
    feeName: string
    amount: number
    description?: string | null
  }

  export type FeeItemUpdateManyMutationInput = {
    feeName?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeeItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeStructureId?: IntFieldUpdateOperationsInput | number
    feeTypeId?: IntFieldUpdateOperationsInput | number
    feeName?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarksSheetMasterCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutMarksheetsInput
    section: SectionCreateNestedOneWithoutMarksheetsInput
    subjects?: MarksSubjectCreateNestedManyWithoutMarksheetInput
  }

  export type MarksSheetMasterUncheckedCreateInput = {
    id?: number
    classId: number
    sectionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: MarksSubjectUncheckedCreateNestedManyWithoutMarksheetInput
  }

  export type MarksSheetMasterUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutMarksheetsNestedInput
    section?: SectionUpdateOneRequiredWithoutMarksheetsNestedInput
    subjects?: MarksSubjectUpdateManyWithoutMarksheetNestedInput
  }

  export type MarksSheetMasterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: MarksSubjectUncheckedUpdateManyWithoutMarksheetNestedInput
  }

  export type MarksSheetMasterCreateManyInput = {
    id?: number
    classId: number
    sectionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarksSheetMasterUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarksSheetMasterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarksSubjectCreateInput = {
    maxMarks: number
    passMarks: number
    remark?: string | null
    marksheet: MarksSheetMasterCreateNestedOneWithoutSubjectsInput
    subject: SubjectCreateNestedOneWithoutMarksheetsInput
  }

  export type MarksSubjectUncheckedCreateInput = {
    id?: number
    marksheetId: number
    subjectId: number
    maxMarks: number
    passMarks: number
    remark?: string | null
  }

  export type MarksSubjectUpdateInput = {
    maxMarks?: IntFieldUpdateOperationsInput | number
    passMarks?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    marksheet?: MarksSheetMasterUpdateOneRequiredWithoutSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutMarksheetsNestedInput
  }

  export type MarksSubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    marksheetId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
    passMarks?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarksSubjectCreateManyInput = {
    id?: number
    marksheetId: number
    subjectId: number
    maxMarks: number
    passMarks: number
    remark?: string | null
  }

  export type MarksSubjectUpdateManyMutationInput = {
    maxMarks?: IntFieldUpdateOperationsInput | number
    passMarks?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarksSubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    marksheetId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
    passMarks?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type SectionListRelationFilter = {
    every?: SectionWhereInput
    some?: SectionWhereInput
    none?: SectionWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type SubjectListRelationFilter = {
    every?: SubjectWhereInput
    some?: SubjectWhereInput
    none?: SubjectWhereInput
  }

  export type TimePeriodListRelationFilter = {
    every?: TimePeriodWhereInput
    some?: TimePeriodWhereInput
    none?: TimePeriodWhereInput
  }

  export type FeeStructureListRelationFilter = {
    every?: FeeStructureWhereInput
    some?: FeeStructureWhereInput
    none?: FeeStructureWhereInput
  }

  export type MarksSheetMasterListRelationFilter = {
    every?: MarksSheetMasterWhereInput
    some?: MarksSheetMasterWhereInput
    none?: MarksSheetMasterWhereInput
  }

  export type SectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimePeriodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeeStructureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MarksSheetMasterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassOrderByRelevanceInput = {
    fields: ClassOrderByRelevanceFieldEnum | ClassOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type SectionOrderByRelevanceInput = {
    fields: SectionOrderByRelevanceFieldEnum | SectionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SectionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
  }

  export type SectionAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type SectionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
  }

  export type SectionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
  }

  export type SectionSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type MasterDropdownNullableScalarRelationFilter = {
    is?: MasterDropdownWhereInput | null
    isNot?: MasterDropdownWhereInput | null
  }

  export type SectionScalarRelationFilter = {
    is?: SectionWhereInput
    isNot?: SectionWhereInput
  }

  export type FeeDetailsNullableScalarRelationFilter = {
    is?: FeeDetailsWhereInput | null
    isNot?: FeeDetailsWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type StudentOrderByRelevanceInput = {
    fields: StudentOrderByRelevanceFieldEnum | StudentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    genderId?: SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    fatherOccupation?: SortOrder
    motherOccupation?: SortOrder
    mobileNumber?: SortOrder
    motherMobileNumber?: SortOrder
    fatherEmail?: SortOrder
    address?: SortOrder
    isTransportRequired?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    id?: SortOrder
    genderId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    genderId?: SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    fatherOccupation?: SortOrder
    motherOccupation?: SortOrder
    mobileNumber?: SortOrder
    motherMobileNumber?: SortOrder
    fatherEmail?: SortOrder
    address?: SortOrder
    isTransportRequired?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    genderId?: SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    fatherOccupation?: SortOrder
    motherOccupation?: SortOrder
    mobileNumber?: SortOrder
    motherMobileNumber?: SortOrder
    fatherEmail?: SortOrder
    address?: SortOrder
    isTransportRequired?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    id?: SortOrder
    genderId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type TermListRelationFilter = {
    every?: TermWhereInput
    some?: TermWhereInput
    none?: TermWhereInput
  }

  export type TermOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeeDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalFee?: SortOrder
    discountAmount?: SortOrder
    totalTerms?: SortOrder
    remainingAmount?: SortOrder
  }

  export type FeeDetailsAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalFee?: SortOrder
    discountAmount?: SortOrder
    totalTerms?: SortOrder
    remainingAmount?: SortOrder
  }

  export type FeeDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalFee?: SortOrder
    discountAmount?: SortOrder
    totalTerms?: SortOrder
    remainingAmount?: SortOrder
  }

  export type FeeDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalFee?: SortOrder
    discountAmount?: SortOrder
    totalTerms?: SortOrder
    remainingAmount?: SortOrder
  }

  export type FeeDetailsSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalFee?: SortOrder
    discountAmount?: SortOrder
    totalTerms?: SortOrder
    remainingAmount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FeeDetailsScalarRelationFilter = {
    is?: FeeDetailsWhereInput
    isNot?: FeeDetailsWhereInput
  }

  export type TermCountOrderByAggregateInput = {
    id?: SortOrder
    feeId?: SortOrder
    termNumber?: SortOrder
    amount?: SortOrder
    dueDate?: SortOrder
    isPaid?: SortOrder
  }

  export type TermAvgOrderByAggregateInput = {
    id?: SortOrder
    feeId?: SortOrder
    termNumber?: SortOrder
    amount?: SortOrder
  }

  export type TermMaxOrderByAggregateInput = {
    id?: SortOrder
    feeId?: SortOrder
    termNumber?: SortOrder
    amount?: SortOrder
    dueDate?: SortOrder
    isPaid?: SortOrder
  }

  export type TermMinOrderByAggregateInput = {
    id?: SortOrder
    feeId?: SortOrder
    termNumber?: SortOrder
    amount?: SortOrder
    dueDate?: SortOrder
    isPaid?: SortOrder
  }

  export type TermSumOrderByAggregateInput = {
    id?: SortOrder
    feeId?: SortOrder
    termNumber?: SortOrder
    amount?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type MarksSubjectListRelationFilter = {
    every?: MarksSubjectWhereInput
    some?: MarksSubjectWhereInput
    none?: MarksSubjectWhereInput
  }

  export type MarksSubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectOrderByRelevanceInput = {
    fields: SubjectOrderByRelevanceFieldEnum | SubjectOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    classId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    classId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    classId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type StaffListRelationFilter = {
    every?: StaffWhereInput
    some?: StaffWhereInput
    none?: StaffWhereInput
  }

  export type FeeItemListRelationFilter = {
    every?: FeeItemWhereInput
    some?: FeeItemWhereInput
    none?: FeeItemWhereInput
  }

  export type StaffOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeeItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MasterDropdownOrderByRelevanceInput = {
    fields: MasterDropdownOrderByRelevanceFieldEnum | MasterDropdownOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MasterDropdownCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    value?: SortOrder
  }

  export type MasterDropdownAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MasterDropdownMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    value?: SortOrder
  }

  export type MasterDropdownMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    value?: SortOrder
  }

  export type MasterDropdownSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StaffOrderByRelevanceInput = {
    fields: StaffOrderByRelevanceFieldEnum | StaffOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StaffCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    genderId?: SortOrder
    qualificationId?: SortOrder
    departmentId?: SortOrder
    designationId?: SortOrder
    staffTypeId?: SortOrder
    experience?: SortOrder
    mobileNumber?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    salary?: SortOrder
    isActive?: SortOrder
    isTransportRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffAvgOrderByAggregateInput = {
    id?: SortOrder
    genderId?: SortOrder
    qualificationId?: SortOrder
    departmentId?: SortOrder
    designationId?: SortOrder
    staffTypeId?: SortOrder
    salary?: SortOrder
  }

  export type StaffMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    genderId?: SortOrder
    qualificationId?: SortOrder
    departmentId?: SortOrder
    designationId?: SortOrder
    staffTypeId?: SortOrder
    experience?: SortOrder
    mobileNumber?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    salary?: SortOrder
    isActive?: SortOrder
    isTransportRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    genderId?: SortOrder
    qualificationId?: SortOrder
    departmentId?: SortOrder
    designationId?: SortOrder
    staffTypeId?: SortOrder
    experience?: SortOrder
    mobileNumber?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    salary?: SortOrder
    isActive?: SortOrder
    isTransportRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffSumOrderByAggregateInput = {
    id?: SortOrder
    genderId?: SortOrder
    qualificationId?: SortOrder
    departmentId?: SortOrder
    designationId?: SortOrder
    staffTypeId?: SortOrder
    salary?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SubjectScalarRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type StaffScalarRelationFilter = {
    is?: StaffWhereInput
    isNot?: StaffWhereInput
  }

  export type TimePeriodOrderByRelevanceInput = {
    fields: TimePeriodOrderByRelevanceFieldEnum | TimePeriodOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TimePeriodCountOrderByAggregateInput = {
    id?: SortOrder
    periodName?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    teacherId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TimePeriodAvgOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    teacherId?: SortOrder
  }

  export type TimePeriodMaxOrderByAggregateInput = {
    id?: SortOrder
    periodName?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    teacherId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TimePeriodMinOrderByAggregateInput = {
    id?: SortOrder
    periodName?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    teacherId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TimePeriodSumOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    teacherId?: SortOrder
  }

  export type ExamsOrderByRelevanceInput = {
    fields: ExamsOrderByRelevanceFieldEnum | ExamsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ExamsCountOrderByAggregateInput = {
    id?: SortOrder
    examName?: SortOrder
    remarks?: SortOrder
  }

  export type ExamsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ExamsMaxOrderByAggregateInput = {
    id?: SortOrder
    examName?: SortOrder
    remarks?: SortOrder
  }

  export type ExamsMinOrderByAggregateInput = {
    id?: SortOrder
    examName?: SortOrder
    remarks?: SortOrder
  }

  export type ExamsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FeeStructureOrderByRelevanceInput = {
    fields: FeeStructureOrderByRelevanceFieldEnum | FeeStructureOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FeeStructureCountOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    academicYear?: SortOrder
    numberOfTerms?: SortOrder
    isActive?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeeStructureAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    numberOfTerms?: SortOrder
    totalAmount?: SortOrder
  }

  export type FeeStructureMaxOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    academicYear?: SortOrder
    numberOfTerms?: SortOrder
    isActive?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeeStructureMinOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    academicYear?: SortOrder
    numberOfTerms?: SortOrder
    isActive?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeeStructureSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    numberOfTerms?: SortOrder
    totalAmount?: SortOrder
  }

  export type FeeStructureScalarRelationFilter = {
    is?: FeeStructureWhereInput
    isNot?: FeeStructureWhereInput
  }

  export type MasterDropdownScalarRelationFilter = {
    is?: MasterDropdownWhereInput
    isNot?: MasterDropdownWhereInput
  }

  export type FeeItemOrderByRelevanceInput = {
    fields: FeeItemOrderByRelevanceFieldEnum | FeeItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FeeItemCountOrderByAggregateInput = {
    id?: SortOrder
    feeStructureId?: SortOrder
    feeTypeId?: SortOrder
    feeName?: SortOrder
    amount?: SortOrder
    description?: SortOrder
  }

  export type FeeItemAvgOrderByAggregateInput = {
    id?: SortOrder
    feeStructureId?: SortOrder
    feeTypeId?: SortOrder
    amount?: SortOrder
  }

  export type FeeItemMaxOrderByAggregateInput = {
    id?: SortOrder
    feeStructureId?: SortOrder
    feeTypeId?: SortOrder
    feeName?: SortOrder
    amount?: SortOrder
    description?: SortOrder
  }

  export type FeeItemMinOrderByAggregateInput = {
    id?: SortOrder
    feeStructureId?: SortOrder
    feeTypeId?: SortOrder
    feeName?: SortOrder
    amount?: SortOrder
    description?: SortOrder
  }

  export type FeeItemSumOrderByAggregateInput = {
    id?: SortOrder
    feeStructureId?: SortOrder
    feeTypeId?: SortOrder
    amount?: SortOrder
  }

  export type MarksSheetMasterCountOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarksSheetMasterAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
  }

  export type MarksSheetMasterMaxOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarksSheetMasterMinOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarksSheetMasterSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
  }

  export type MarksSheetMasterScalarRelationFilter = {
    is?: MarksSheetMasterWhereInput
    isNot?: MarksSheetMasterWhereInput
  }

  export type MarksSubjectOrderByRelevanceInput = {
    fields: MarksSubjectOrderByRelevanceFieldEnum | MarksSubjectOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MarksSubjectCountOrderByAggregateInput = {
    id?: SortOrder
    marksheetId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
    passMarks?: SortOrder
    remark?: SortOrder
  }

  export type MarksSubjectAvgOrderByAggregateInput = {
    id?: SortOrder
    marksheetId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
    passMarks?: SortOrder
  }

  export type MarksSubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    marksheetId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
    passMarks?: SortOrder
    remark?: SortOrder
  }

  export type MarksSubjectMinOrderByAggregateInput = {
    id?: SortOrder
    marksheetId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
    passMarks?: SortOrder
    remark?: SortOrder
  }

  export type MarksSubjectSumOrderByAggregateInput = {
    id?: SortOrder
    marksheetId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
    passMarks?: SortOrder
  }

  export type SectionCreateNestedManyWithoutClassInput = {
    create?: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput> | SectionCreateWithoutClassInput[] | SectionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutClassInput | SectionCreateOrConnectWithoutClassInput[]
    createMany?: SectionCreateManyClassInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type SubjectCreateNestedManyWithoutClassInput = {
    create?: XOR<SubjectCreateWithoutClassInput, SubjectUncheckedCreateWithoutClassInput> | SubjectCreateWithoutClassInput[] | SubjectUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutClassInput | SubjectCreateOrConnectWithoutClassInput[]
    createMany?: SubjectCreateManyClassInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type TimePeriodCreateNestedManyWithoutClassInput = {
    create?: XOR<TimePeriodCreateWithoutClassInput, TimePeriodUncheckedCreateWithoutClassInput> | TimePeriodCreateWithoutClassInput[] | TimePeriodUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutClassInput | TimePeriodCreateOrConnectWithoutClassInput[]
    createMany?: TimePeriodCreateManyClassInputEnvelope
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
  }

  export type FeeStructureCreateNestedManyWithoutClassInput = {
    create?: XOR<FeeStructureCreateWithoutClassInput, FeeStructureUncheckedCreateWithoutClassInput> | FeeStructureCreateWithoutClassInput[] | FeeStructureUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeeStructureCreateOrConnectWithoutClassInput | FeeStructureCreateOrConnectWithoutClassInput[]
    createMany?: FeeStructureCreateManyClassInputEnvelope
    connect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
  }

  export type MarksSheetMasterCreateNestedManyWithoutClassInput = {
    create?: XOR<MarksSheetMasterCreateWithoutClassInput, MarksSheetMasterUncheckedCreateWithoutClassInput> | MarksSheetMasterCreateWithoutClassInput[] | MarksSheetMasterUncheckedCreateWithoutClassInput[]
    connectOrCreate?: MarksSheetMasterCreateOrConnectWithoutClassInput | MarksSheetMasterCreateOrConnectWithoutClassInput[]
    createMany?: MarksSheetMasterCreateManyClassInputEnvelope
    connect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput> | SectionCreateWithoutClassInput[] | SectionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutClassInput | SectionCreateOrConnectWithoutClassInput[]
    createMany?: SectionCreateManyClassInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<SubjectCreateWithoutClassInput, SubjectUncheckedCreateWithoutClassInput> | SubjectCreateWithoutClassInput[] | SubjectUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutClassInput | SubjectCreateOrConnectWithoutClassInput[]
    createMany?: SubjectCreateManyClassInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type TimePeriodUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<TimePeriodCreateWithoutClassInput, TimePeriodUncheckedCreateWithoutClassInput> | TimePeriodCreateWithoutClassInput[] | TimePeriodUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutClassInput | TimePeriodCreateOrConnectWithoutClassInput[]
    createMany?: TimePeriodCreateManyClassInputEnvelope
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
  }

  export type FeeStructureUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<FeeStructureCreateWithoutClassInput, FeeStructureUncheckedCreateWithoutClassInput> | FeeStructureCreateWithoutClassInput[] | FeeStructureUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeeStructureCreateOrConnectWithoutClassInput | FeeStructureCreateOrConnectWithoutClassInput[]
    createMany?: FeeStructureCreateManyClassInputEnvelope
    connect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
  }

  export type MarksSheetMasterUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<MarksSheetMasterCreateWithoutClassInput, MarksSheetMasterUncheckedCreateWithoutClassInput> | MarksSheetMasterCreateWithoutClassInput[] | MarksSheetMasterUncheckedCreateWithoutClassInput[]
    connectOrCreate?: MarksSheetMasterCreateOrConnectWithoutClassInput | MarksSheetMasterCreateOrConnectWithoutClassInput[]
    createMany?: MarksSheetMasterCreateManyClassInputEnvelope
    connect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type SectionUpdateManyWithoutClassNestedInput = {
    create?: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput> | SectionCreateWithoutClassInput[] | SectionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutClassInput | SectionCreateOrConnectWithoutClassInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutClassInput | SectionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: SectionCreateManyClassInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutClassInput | SectionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutClassInput | SectionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassInput | StudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassInput | StudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassInput | StudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type SubjectUpdateManyWithoutClassNestedInput = {
    create?: XOR<SubjectCreateWithoutClassInput, SubjectUncheckedCreateWithoutClassInput> | SubjectCreateWithoutClassInput[] | SubjectUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutClassInput | SubjectCreateOrConnectWithoutClassInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutClassInput | SubjectUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: SubjectCreateManyClassInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutClassInput | SubjectUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutClassInput | SubjectUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type TimePeriodUpdateManyWithoutClassNestedInput = {
    create?: XOR<TimePeriodCreateWithoutClassInput, TimePeriodUncheckedCreateWithoutClassInput> | TimePeriodCreateWithoutClassInput[] | TimePeriodUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutClassInput | TimePeriodCreateOrConnectWithoutClassInput[]
    upsert?: TimePeriodUpsertWithWhereUniqueWithoutClassInput | TimePeriodUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: TimePeriodCreateManyClassInputEnvelope
    set?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    disconnect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    delete?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    update?: TimePeriodUpdateWithWhereUniqueWithoutClassInput | TimePeriodUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: TimePeriodUpdateManyWithWhereWithoutClassInput | TimePeriodUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: TimePeriodScalarWhereInput | TimePeriodScalarWhereInput[]
  }

  export type FeeStructureUpdateManyWithoutClassNestedInput = {
    create?: XOR<FeeStructureCreateWithoutClassInput, FeeStructureUncheckedCreateWithoutClassInput> | FeeStructureCreateWithoutClassInput[] | FeeStructureUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeeStructureCreateOrConnectWithoutClassInput | FeeStructureCreateOrConnectWithoutClassInput[]
    upsert?: FeeStructureUpsertWithWhereUniqueWithoutClassInput | FeeStructureUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: FeeStructureCreateManyClassInputEnvelope
    set?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    disconnect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    delete?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    connect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    update?: FeeStructureUpdateWithWhereUniqueWithoutClassInput | FeeStructureUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: FeeStructureUpdateManyWithWhereWithoutClassInput | FeeStructureUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: FeeStructureScalarWhereInput | FeeStructureScalarWhereInput[]
  }

  export type MarksSheetMasterUpdateManyWithoutClassNestedInput = {
    create?: XOR<MarksSheetMasterCreateWithoutClassInput, MarksSheetMasterUncheckedCreateWithoutClassInput> | MarksSheetMasterCreateWithoutClassInput[] | MarksSheetMasterUncheckedCreateWithoutClassInput[]
    connectOrCreate?: MarksSheetMasterCreateOrConnectWithoutClassInput | MarksSheetMasterCreateOrConnectWithoutClassInput[]
    upsert?: MarksSheetMasterUpsertWithWhereUniqueWithoutClassInput | MarksSheetMasterUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: MarksSheetMasterCreateManyClassInputEnvelope
    set?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    disconnect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    delete?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    connect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    update?: MarksSheetMasterUpdateWithWhereUniqueWithoutClassInput | MarksSheetMasterUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: MarksSheetMasterUpdateManyWithWhereWithoutClassInput | MarksSheetMasterUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: MarksSheetMasterScalarWhereInput | MarksSheetMasterScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SectionUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput> | SectionCreateWithoutClassInput[] | SectionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutClassInput | SectionCreateOrConnectWithoutClassInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutClassInput | SectionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: SectionCreateManyClassInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutClassInput | SectionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutClassInput | SectionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassInput | StudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassInput | StudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassInput | StudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<SubjectCreateWithoutClassInput, SubjectUncheckedCreateWithoutClassInput> | SubjectCreateWithoutClassInput[] | SubjectUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutClassInput | SubjectCreateOrConnectWithoutClassInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutClassInput | SubjectUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: SubjectCreateManyClassInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutClassInput | SubjectUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutClassInput | SubjectUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type TimePeriodUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<TimePeriodCreateWithoutClassInput, TimePeriodUncheckedCreateWithoutClassInput> | TimePeriodCreateWithoutClassInput[] | TimePeriodUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutClassInput | TimePeriodCreateOrConnectWithoutClassInput[]
    upsert?: TimePeriodUpsertWithWhereUniqueWithoutClassInput | TimePeriodUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: TimePeriodCreateManyClassInputEnvelope
    set?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    disconnect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    delete?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    update?: TimePeriodUpdateWithWhereUniqueWithoutClassInput | TimePeriodUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: TimePeriodUpdateManyWithWhereWithoutClassInput | TimePeriodUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: TimePeriodScalarWhereInput | TimePeriodScalarWhereInput[]
  }

  export type FeeStructureUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<FeeStructureCreateWithoutClassInput, FeeStructureUncheckedCreateWithoutClassInput> | FeeStructureCreateWithoutClassInput[] | FeeStructureUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeeStructureCreateOrConnectWithoutClassInput | FeeStructureCreateOrConnectWithoutClassInput[]
    upsert?: FeeStructureUpsertWithWhereUniqueWithoutClassInput | FeeStructureUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: FeeStructureCreateManyClassInputEnvelope
    set?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    disconnect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    delete?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    connect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    update?: FeeStructureUpdateWithWhereUniqueWithoutClassInput | FeeStructureUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: FeeStructureUpdateManyWithWhereWithoutClassInput | FeeStructureUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: FeeStructureScalarWhereInput | FeeStructureScalarWhereInput[]
  }

  export type MarksSheetMasterUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<MarksSheetMasterCreateWithoutClassInput, MarksSheetMasterUncheckedCreateWithoutClassInput> | MarksSheetMasterCreateWithoutClassInput[] | MarksSheetMasterUncheckedCreateWithoutClassInput[]
    connectOrCreate?: MarksSheetMasterCreateOrConnectWithoutClassInput | MarksSheetMasterCreateOrConnectWithoutClassInput[]
    upsert?: MarksSheetMasterUpsertWithWhereUniqueWithoutClassInput | MarksSheetMasterUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: MarksSheetMasterCreateManyClassInputEnvelope
    set?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    disconnect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    delete?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    connect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    update?: MarksSheetMasterUpdateWithWhereUniqueWithoutClassInput | MarksSheetMasterUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: MarksSheetMasterUpdateManyWithWhereWithoutClassInput | MarksSheetMasterUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: MarksSheetMasterScalarWhereInput | MarksSheetMasterScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutSectionsInput = {
    create?: XOR<ClassCreateWithoutSectionsInput, ClassUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutSectionsInput
    connect?: ClassWhereUniqueInput
  }

  export type StudentCreateNestedManyWithoutSectionInput = {
    create?: XOR<StudentCreateWithoutSectionInput, StudentUncheckedCreateWithoutSectionInput> | StudentCreateWithoutSectionInput[] | StudentUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSectionInput | StudentCreateOrConnectWithoutSectionInput[]
    createMany?: StudentCreateManySectionInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type TimePeriodCreateNestedManyWithoutSectionInput = {
    create?: XOR<TimePeriodCreateWithoutSectionInput, TimePeriodUncheckedCreateWithoutSectionInput> | TimePeriodCreateWithoutSectionInput[] | TimePeriodUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutSectionInput | TimePeriodCreateOrConnectWithoutSectionInput[]
    createMany?: TimePeriodCreateManySectionInputEnvelope
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
  }

  export type MarksSheetMasterCreateNestedManyWithoutSectionInput = {
    create?: XOR<MarksSheetMasterCreateWithoutSectionInput, MarksSheetMasterUncheckedCreateWithoutSectionInput> | MarksSheetMasterCreateWithoutSectionInput[] | MarksSheetMasterUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: MarksSheetMasterCreateOrConnectWithoutSectionInput | MarksSheetMasterCreateOrConnectWithoutSectionInput[]
    createMany?: MarksSheetMasterCreateManySectionInputEnvelope
    connect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<StudentCreateWithoutSectionInput, StudentUncheckedCreateWithoutSectionInput> | StudentCreateWithoutSectionInput[] | StudentUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSectionInput | StudentCreateOrConnectWithoutSectionInput[]
    createMany?: StudentCreateManySectionInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type TimePeriodUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<TimePeriodCreateWithoutSectionInput, TimePeriodUncheckedCreateWithoutSectionInput> | TimePeriodCreateWithoutSectionInput[] | TimePeriodUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutSectionInput | TimePeriodCreateOrConnectWithoutSectionInput[]
    createMany?: TimePeriodCreateManySectionInputEnvelope
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
  }

  export type MarksSheetMasterUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<MarksSheetMasterCreateWithoutSectionInput, MarksSheetMasterUncheckedCreateWithoutSectionInput> | MarksSheetMasterCreateWithoutSectionInput[] | MarksSheetMasterUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: MarksSheetMasterCreateOrConnectWithoutSectionInput | MarksSheetMasterCreateOrConnectWithoutSectionInput[]
    createMany?: MarksSheetMasterCreateManySectionInputEnvelope
    connect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<ClassCreateWithoutSectionsInput, ClassUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutSectionsInput
    upsert?: ClassUpsertWithoutSectionsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutSectionsInput, ClassUpdateWithoutSectionsInput>, ClassUncheckedUpdateWithoutSectionsInput>
  }

  export type StudentUpdateManyWithoutSectionNestedInput = {
    create?: XOR<StudentCreateWithoutSectionInput, StudentUncheckedCreateWithoutSectionInput> | StudentCreateWithoutSectionInput[] | StudentUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSectionInput | StudentCreateOrConnectWithoutSectionInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSectionInput | StudentUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: StudentCreateManySectionInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSectionInput | StudentUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSectionInput | StudentUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type TimePeriodUpdateManyWithoutSectionNestedInput = {
    create?: XOR<TimePeriodCreateWithoutSectionInput, TimePeriodUncheckedCreateWithoutSectionInput> | TimePeriodCreateWithoutSectionInput[] | TimePeriodUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutSectionInput | TimePeriodCreateOrConnectWithoutSectionInput[]
    upsert?: TimePeriodUpsertWithWhereUniqueWithoutSectionInput | TimePeriodUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: TimePeriodCreateManySectionInputEnvelope
    set?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    disconnect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    delete?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    update?: TimePeriodUpdateWithWhereUniqueWithoutSectionInput | TimePeriodUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: TimePeriodUpdateManyWithWhereWithoutSectionInput | TimePeriodUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: TimePeriodScalarWhereInput | TimePeriodScalarWhereInput[]
  }

  export type MarksSheetMasterUpdateManyWithoutSectionNestedInput = {
    create?: XOR<MarksSheetMasterCreateWithoutSectionInput, MarksSheetMasterUncheckedCreateWithoutSectionInput> | MarksSheetMasterCreateWithoutSectionInput[] | MarksSheetMasterUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: MarksSheetMasterCreateOrConnectWithoutSectionInput | MarksSheetMasterCreateOrConnectWithoutSectionInput[]
    upsert?: MarksSheetMasterUpsertWithWhereUniqueWithoutSectionInput | MarksSheetMasterUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: MarksSheetMasterCreateManySectionInputEnvelope
    set?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    disconnect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    delete?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    connect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    update?: MarksSheetMasterUpdateWithWhereUniqueWithoutSectionInput | MarksSheetMasterUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: MarksSheetMasterUpdateManyWithWhereWithoutSectionInput | MarksSheetMasterUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: MarksSheetMasterScalarWhereInput | MarksSheetMasterScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<StudentCreateWithoutSectionInput, StudentUncheckedCreateWithoutSectionInput> | StudentCreateWithoutSectionInput[] | StudentUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSectionInput | StudentCreateOrConnectWithoutSectionInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSectionInput | StudentUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: StudentCreateManySectionInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSectionInput | StudentUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSectionInput | StudentUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type TimePeriodUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<TimePeriodCreateWithoutSectionInput, TimePeriodUncheckedCreateWithoutSectionInput> | TimePeriodCreateWithoutSectionInput[] | TimePeriodUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutSectionInput | TimePeriodCreateOrConnectWithoutSectionInput[]
    upsert?: TimePeriodUpsertWithWhereUniqueWithoutSectionInput | TimePeriodUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: TimePeriodCreateManySectionInputEnvelope
    set?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    disconnect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    delete?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    update?: TimePeriodUpdateWithWhereUniqueWithoutSectionInput | TimePeriodUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: TimePeriodUpdateManyWithWhereWithoutSectionInput | TimePeriodUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: TimePeriodScalarWhereInput | TimePeriodScalarWhereInput[]
  }

  export type MarksSheetMasterUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<MarksSheetMasterCreateWithoutSectionInput, MarksSheetMasterUncheckedCreateWithoutSectionInput> | MarksSheetMasterCreateWithoutSectionInput[] | MarksSheetMasterUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: MarksSheetMasterCreateOrConnectWithoutSectionInput | MarksSheetMasterCreateOrConnectWithoutSectionInput[]
    upsert?: MarksSheetMasterUpsertWithWhereUniqueWithoutSectionInput | MarksSheetMasterUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: MarksSheetMasterCreateManySectionInputEnvelope
    set?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    disconnect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    delete?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    connect?: MarksSheetMasterWhereUniqueInput | MarksSheetMasterWhereUniqueInput[]
    update?: MarksSheetMasterUpdateWithWhereUniqueWithoutSectionInput | MarksSheetMasterUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: MarksSheetMasterUpdateManyWithWhereWithoutSectionInput | MarksSheetMasterUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: MarksSheetMasterScalarWhereInput | MarksSheetMasterScalarWhereInput[]
  }

  export type MasterDropdownCreateNestedOneWithoutStudentsInput = {
    create?: XOR<MasterDropdownCreateWithoutStudentsInput, MasterDropdownUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutStudentsInput
    connect?: MasterDropdownWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    connect?: ClassWhereUniqueInput
  }

  export type SectionCreateNestedOneWithoutStudentsInput = {
    create?: XOR<SectionCreateWithoutStudentsInput, SectionUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutStudentsInput
    connect?: SectionWhereUniqueInput
  }

  export type FeeDetailsCreateNestedOneWithoutStudentInput = {
    create?: XOR<FeeDetailsCreateWithoutStudentInput, FeeDetailsUncheckedCreateWithoutStudentInput>
    connectOrCreate?: FeeDetailsCreateOrConnectWithoutStudentInput
    connect?: FeeDetailsWhereUniqueInput
  }

  export type FeeDetailsUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<FeeDetailsCreateWithoutStudentInput, FeeDetailsUncheckedCreateWithoutStudentInput>
    connectOrCreate?: FeeDetailsCreateOrConnectWithoutStudentInput
    connect?: FeeDetailsWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type MasterDropdownUpdateOneWithoutStudentsNestedInput = {
    create?: XOR<MasterDropdownCreateWithoutStudentsInput, MasterDropdownUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutStudentsInput
    upsert?: MasterDropdownUpsertWithoutStudentsInput
    disconnect?: MasterDropdownWhereInput | boolean
    delete?: MasterDropdownWhereInput | boolean
    connect?: MasterDropdownWhereUniqueInput
    update?: XOR<XOR<MasterDropdownUpdateToOneWithWhereWithoutStudentsInput, MasterDropdownUpdateWithoutStudentsInput>, MasterDropdownUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    upsert?: ClassUpsertWithoutStudentsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutStudentsInput, ClassUpdateWithoutStudentsInput>, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type SectionUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<SectionCreateWithoutStudentsInput, SectionUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutStudentsInput
    upsert?: SectionUpsertWithoutStudentsInput
    connect?: SectionWhereUniqueInput
    update?: XOR<XOR<SectionUpdateToOneWithWhereWithoutStudentsInput, SectionUpdateWithoutStudentsInput>, SectionUncheckedUpdateWithoutStudentsInput>
  }

  export type FeeDetailsUpdateOneWithoutStudentNestedInput = {
    create?: XOR<FeeDetailsCreateWithoutStudentInput, FeeDetailsUncheckedCreateWithoutStudentInput>
    connectOrCreate?: FeeDetailsCreateOrConnectWithoutStudentInput
    upsert?: FeeDetailsUpsertWithoutStudentInput
    disconnect?: FeeDetailsWhereInput | boolean
    delete?: FeeDetailsWhereInput | boolean
    connect?: FeeDetailsWhereUniqueInput
    update?: XOR<XOR<FeeDetailsUpdateToOneWithWhereWithoutStudentInput, FeeDetailsUpdateWithoutStudentInput>, FeeDetailsUncheckedUpdateWithoutStudentInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FeeDetailsUncheckedUpdateOneWithoutStudentNestedInput = {
    create?: XOR<FeeDetailsCreateWithoutStudentInput, FeeDetailsUncheckedCreateWithoutStudentInput>
    connectOrCreate?: FeeDetailsCreateOrConnectWithoutStudentInput
    upsert?: FeeDetailsUpsertWithoutStudentInput
    disconnect?: FeeDetailsWhereInput | boolean
    delete?: FeeDetailsWhereInput | boolean
    connect?: FeeDetailsWhereUniqueInput
    update?: XOR<XOR<FeeDetailsUpdateToOneWithWhereWithoutStudentInput, FeeDetailsUpdateWithoutStudentInput>, FeeDetailsUncheckedUpdateWithoutStudentInput>
  }

  export type StudentCreateNestedOneWithoutFeeDetailsInput = {
    create?: XOR<StudentCreateWithoutFeeDetailsInput, StudentUncheckedCreateWithoutFeeDetailsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutFeeDetailsInput
    connect?: StudentWhereUniqueInput
  }

  export type TermCreateNestedManyWithoutFeeDetailInput = {
    create?: XOR<TermCreateWithoutFeeDetailInput, TermUncheckedCreateWithoutFeeDetailInput> | TermCreateWithoutFeeDetailInput[] | TermUncheckedCreateWithoutFeeDetailInput[]
    connectOrCreate?: TermCreateOrConnectWithoutFeeDetailInput | TermCreateOrConnectWithoutFeeDetailInput[]
    createMany?: TermCreateManyFeeDetailInputEnvelope
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
  }

  export type TermUncheckedCreateNestedManyWithoutFeeDetailInput = {
    create?: XOR<TermCreateWithoutFeeDetailInput, TermUncheckedCreateWithoutFeeDetailInput> | TermCreateWithoutFeeDetailInput[] | TermUncheckedCreateWithoutFeeDetailInput[]
    connectOrCreate?: TermCreateOrConnectWithoutFeeDetailInput | TermCreateOrConnectWithoutFeeDetailInput[]
    createMany?: TermCreateManyFeeDetailInputEnvelope
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentUpdateOneRequiredWithoutFeeDetailsNestedInput = {
    create?: XOR<StudentCreateWithoutFeeDetailsInput, StudentUncheckedCreateWithoutFeeDetailsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutFeeDetailsInput
    upsert?: StudentUpsertWithoutFeeDetailsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutFeeDetailsInput, StudentUpdateWithoutFeeDetailsInput>, StudentUncheckedUpdateWithoutFeeDetailsInput>
  }

  export type TermUpdateManyWithoutFeeDetailNestedInput = {
    create?: XOR<TermCreateWithoutFeeDetailInput, TermUncheckedCreateWithoutFeeDetailInput> | TermCreateWithoutFeeDetailInput[] | TermUncheckedCreateWithoutFeeDetailInput[]
    connectOrCreate?: TermCreateOrConnectWithoutFeeDetailInput | TermCreateOrConnectWithoutFeeDetailInput[]
    upsert?: TermUpsertWithWhereUniqueWithoutFeeDetailInput | TermUpsertWithWhereUniqueWithoutFeeDetailInput[]
    createMany?: TermCreateManyFeeDetailInputEnvelope
    set?: TermWhereUniqueInput | TermWhereUniqueInput[]
    disconnect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    delete?: TermWhereUniqueInput | TermWhereUniqueInput[]
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    update?: TermUpdateWithWhereUniqueWithoutFeeDetailInput | TermUpdateWithWhereUniqueWithoutFeeDetailInput[]
    updateMany?: TermUpdateManyWithWhereWithoutFeeDetailInput | TermUpdateManyWithWhereWithoutFeeDetailInput[]
    deleteMany?: TermScalarWhereInput | TermScalarWhereInput[]
  }

  export type TermUncheckedUpdateManyWithoutFeeDetailNestedInput = {
    create?: XOR<TermCreateWithoutFeeDetailInput, TermUncheckedCreateWithoutFeeDetailInput> | TermCreateWithoutFeeDetailInput[] | TermUncheckedCreateWithoutFeeDetailInput[]
    connectOrCreate?: TermCreateOrConnectWithoutFeeDetailInput | TermCreateOrConnectWithoutFeeDetailInput[]
    upsert?: TermUpsertWithWhereUniqueWithoutFeeDetailInput | TermUpsertWithWhereUniqueWithoutFeeDetailInput[]
    createMany?: TermCreateManyFeeDetailInputEnvelope
    set?: TermWhereUniqueInput | TermWhereUniqueInput[]
    disconnect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    delete?: TermWhereUniqueInput | TermWhereUniqueInput[]
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    update?: TermUpdateWithWhereUniqueWithoutFeeDetailInput | TermUpdateWithWhereUniqueWithoutFeeDetailInput[]
    updateMany?: TermUpdateManyWithWhereWithoutFeeDetailInput | TermUpdateManyWithWhereWithoutFeeDetailInput[]
    deleteMany?: TermScalarWhereInput | TermScalarWhereInput[]
  }

  export type FeeDetailsCreateNestedOneWithoutTermsInput = {
    create?: XOR<FeeDetailsCreateWithoutTermsInput, FeeDetailsUncheckedCreateWithoutTermsInput>
    connectOrCreate?: FeeDetailsCreateOrConnectWithoutTermsInput
    connect?: FeeDetailsWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FeeDetailsUpdateOneRequiredWithoutTermsNestedInput = {
    create?: XOR<FeeDetailsCreateWithoutTermsInput, FeeDetailsUncheckedCreateWithoutTermsInput>
    connectOrCreate?: FeeDetailsCreateOrConnectWithoutTermsInput
    upsert?: FeeDetailsUpsertWithoutTermsInput
    connect?: FeeDetailsWhereUniqueInput
    update?: XOR<XOR<FeeDetailsUpdateToOneWithWhereWithoutTermsInput, FeeDetailsUpdateWithoutTermsInput>, FeeDetailsUncheckedUpdateWithoutTermsInput>
  }

  export type ClassCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<ClassCreateWithoutSubjectsInput, ClassUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutSubjectsInput
    connect?: ClassWhereUniqueInput
  }

  export type TimePeriodCreateNestedManyWithoutSubjectInput = {
    create?: XOR<TimePeriodCreateWithoutSubjectInput, TimePeriodUncheckedCreateWithoutSubjectInput> | TimePeriodCreateWithoutSubjectInput[] | TimePeriodUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutSubjectInput | TimePeriodCreateOrConnectWithoutSubjectInput[]
    createMany?: TimePeriodCreateManySubjectInputEnvelope
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
  }

  export type MarksSubjectCreateNestedManyWithoutSubjectInput = {
    create?: XOR<MarksSubjectCreateWithoutSubjectInput, MarksSubjectUncheckedCreateWithoutSubjectInput> | MarksSubjectCreateWithoutSubjectInput[] | MarksSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: MarksSubjectCreateOrConnectWithoutSubjectInput | MarksSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: MarksSubjectCreateManySubjectInputEnvelope
    connect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
  }

  export type TimePeriodUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<TimePeriodCreateWithoutSubjectInput, TimePeriodUncheckedCreateWithoutSubjectInput> | TimePeriodCreateWithoutSubjectInput[] | TimePeriodUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutSubjectInput | TimePeriodCreateOrConnectWithoutSubjectInput[]
    createMany?: TimePeriodCreateManySubjectInputEnvelope
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
  }

  export type MarksSubjectUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<MarksSubjectCreateWithoutSubjectInput, MarksSubjectUncheckedCreateWithoutSubjectInput> | MarksSubjectCreateWithoutSubjectInput[] | MarksSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: MarksSubjectCreateOrConnectWithoutSubjectInput | MarksSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: MarksSubjectCreateManySubjectInputEnvelope
    connect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<ClassCreateWithoutSubjectsInput, ClassUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutSubjectsInput
    upsert?: ClassUpsertWithoutSubjectsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutSubjectsInput, ClassUpdateWithoutSubjectsInput>, ClassUncheckedUpdateWithoutSubjectsInput>
  }

  export type TimePeriodUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<TimePeriodCreateWithoutSubjectInput, TimePeriodUncheckedCreateWithoutSubjectInput> | TimePeriodCreateWithoutSubjectInput[] | TimePeriodUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutSubjectInput | TimePeriodCreateOrConnectWithoutSubjectInput[]
    upsert?: TimePeriodUpsertWithWhereUniqueWithoutSubjectInput | TimePeriodUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: TimePeriodCreateManySubjectInputEnvelope
    set?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    disconnect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    delete?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    update?: TimePeriodUpdateWithWhereUniqueWithoutSubjectInput | TimePeriodUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: TimePeriodUpdateManyWithWhereWithoutSubjectInput | TimePeriodUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: TimePeriodScalarWhereInput | TimePeriodScalarWhereInput[]
  }

  export type MarksSubjectUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<MarksSubjectCreateWithoutSubjectInput, MarksSubjectUncheckedCreateWithoutSubjectInput> | MarksSubjectCreateWithoutSubjectInput[] | MarksSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: MarksSubjectCreateOrConnectWithoutSubjectInput | MarksSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: MarksSubjectUpsertWithWhereUniqueWithoutSubjectInput | MarksSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: MarksSubjectCreateManySubjectInputEnvelope
    set?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    disconnect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    delete?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    connect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    update?: MarksSubjectUpdateWithWhereUniqueWithoutSubjectInput | MarksSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: MarksSubjectUpdateManyWithWhereWithoutSubjectInput | MarksSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: MarksSubjectScalarWhereInput | MarksSubjectScalarWhereInput[]
  }

  export type TimePeriodUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<TimePeriodCreateWithoutSubjectInput, TimePeriodUncheckedCreateWithoutSubjectInput> | TimePeriodCreateWithoutSubjectInput[] | TimePeriodUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutSubjectInput | TimePeriodCreateOrConnectWithoutSubjectInput[]
    upsert?: TimePeriodUpsertWithWhereUniqueWithoutSubjectInput | TimePeriodUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: TimePeriodCreateManySubjectInputEnvelope
    set?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    disconnect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    delete?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    update?: TimePeriodUpdateWithWhereUniqueWithoutSubjectInput | TimePeriodUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: TimePeriodUpdateManyWithWhereWithoutSubjectInput | TimePeriodUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: TimePeriodScalarWhereInput | TimePeriodScalarWhereInput[]
  }

  export type MarksSubjectUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<MarksSubjectCreateWithoutSubjectInput, MarksSubjectUncheckedCreateWithoutSubjectInput> | MarksSubjectCreateWithoutSubjectInput[] | MarksSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: MarksSubjectCreateOrConnectWithoutSubjectInput | MarksSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: MarksSubjectUpsertWithWhereUniqueWithoutSubjectInput | MarksSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: MarksSubjectCreateManySubjectInputEnvelope
    set?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    disconnect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    delete?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    connect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    update?: MarksSubjectUpdateWithWhereUniqueWithoutSubjectInput | MarksSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: MarksSubjectUpdateManyWithWhereWithoutSubjectInput | MarksSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: MarksSubjectScalarWhereInput | MarksSubjectScalarWhereInput[]
  }

  export type StudentCreateNestedManyWithoutGenderInput = {
    create?: XOR<StudentCreateWithoutGenderInput, StudentUncheckedCreateWithoutGenderInput> | StudentCreateWithoutGenderInput[] | StudentUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutGenderInput | StudentCreateOrConnectWithoutGenderInput[]
    createMany?: StudentCreateManyGenderInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StaffCreateNestedManyWithoutGenderInput = {
    create?: XOR<StaffCreateWithoutGenderInput, StaffUncheckedCreateWithoutGenderInput> | StaffCreateWithoutGenderInput[] | StaffUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutGenderInput | StaffCreateOrConnectWithoutGenderInput[]
    createMany?: StaffCreateManyGenderInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type StaffCreateNestedManyWithoutQualificationInput = {
    create?: XOR<StaffCreateWithoutQualificationInput, StaffUncheckedCreateWithoutQualificationInput> | StaffCreateWithoutQualificationInput[] | StaffUncheckedCreateWithoutQualificationInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutQualificationInput | StaffCreateOrConnectWithoutQualificationInput[]
    createMany?: StaffCreateManyQualificationInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type StaffCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<StaffCreateWithoutDepartmentInput, StaffUncheckedCreateWithoutDepartmentInput> | StaffCreateWithoutDepartmentInput[] | StaffUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutDepartmentInput | StaffCreateOrConnectWithoutDepartmentInput[]
    createMany?: StaffCreateManyDepartmentInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type StaffCreateNestedManyWithoutDesignationInput = {
    create?: XOR<StaffCreateWithoutDesignationInput, StaffUncheckedCreateWithoutDesignationInput> | StaffCreateWithoutDesignationInput[] | StaffUncheckedCreateWithoutDesignationInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutDesignationInput | StaffCreateOrConnectWithoutDesignationInput[]
    createMany?: StaffCreateManyDesignationInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type StaffCreateNestedManyWithoutStaffTypeInput = {
    create?: XOR<StaffCreateWithoutStaffTypeInput, StaffUncheckedCreateWithoutStaffTypeInput> | StaffCreateWithoutStaffTypeInput[] | StaffUncheckedCreateWithoutStaffTypeInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutStaffTypeInput | StaffCreateOrConnectWithoutStaffTypeInput[]
    createMany?: StaffCreateManyStaffTypeInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type FeeItemCreateNestedManyWithoutFeeTypeInput = {
    create?: XOR<FeeItemCreateWithoutFeeTypeInput, FeeItemUncheckedCreateWithoutFeeTypeInput> | FeeItemCreateWithoutFeeTypeInput[] | FeeItemUncheckedCreateWithoutFeeTypeInput[]
    connectOrCreate?: FeeItemCreateOrConnectWithoutFeeTypeInput | FeeItemCreateOrConnectWithoutFeeTypeInput[]
    createMany?: FeeItemCreateManyFeeTypeInputEnvelope
    connect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutGenderInput = {
    create?: XOR<StudentCreateWithoutGenderInput, StudentUncheckedCreateWithoutGenderInput> | StudentCreateWithoutGenderInput[] | StudentUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutGenderInput | StudentCreateOrConnectWithoutGenderInput[]
    createMany?: StudentCreateManyGenderInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StaffUncheckedCreateNestedManyWithoutGenderInput = {
    create?: XOR<StaffCreateWithoutGenderInput, StaffUncheckedCreateWithoutGenderInput> | StaffCreateWithoutGenderInput[] | StaffUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutGenderInput | StaffCreateOrConnectWithoutGenderInput[]
    createMany?: StaffCreateManyGenderInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type StaffUncheckedCreateNestedManyWithoutQualificationInput = {
    create?: XOR<StaffCreateWithoutQualificationInput, StaffUncheckedCreateWithoutQualificationInput> | StaffCreateWithoutQualificationInput[] | StaffUncheckedCreateWithoutQualificationInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutQualificationInput | StaffCreateOrConnectWithoutQualificationInput[]
    createMany?: StaffCreateManyQualificationInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type StaffUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<StaffCreateWithoutDepartmentInput, StaffUncheckedCreateWithoutDepartmentInput> | StaffCreateWithoutDepartmentInput[] | StaffUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutDepartmentInput | StaffCreateOrConnectWithoutDepartmentInput[]
    createMany?: StaffCreateManyDepartmentInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type StaffUncheckedCreateNestedManyWithoutDesignationInput = {
    create?: XOR<StaffCreateWithoutDesignationInput, StaffUncheckedCreateWithoutDesignationInput> | StaffCreateWithoutDesignationInput[] | StaffUncheckedCreateWithoutDesignationInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutDesignationInput | StaffCreateOrConnectWithoutDesignationInput[]
    createMany?: StaffCreateManyDesignationInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type StaffUncheckedCreateNestedManyWithoutStaffTypeInput = {
    create?: XOR<StaffCreateWithoutStaffTypeInput, StaffUncheckedCreateWithoutStaffTypeInput> | StaffCreateWithoutStaffTypeInput[] | StaffUncheckedCreateWithoutStaffTypeInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutStaffTypeInput | StaffCreateOrConnectWithoutStaffTypeInput[]
    createMany?: StaffCreateManyStaffTypeInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type FeeItemUncheckedCreateNestedManyWithoutFeeTypeInput = {
    create?: XOR<FeeItemCreateWithoutFeeTypeInput, FeeItemUncheckedCreateWithoutFeeTypeInput> | FeeItemCreateWithoutFeeTypeInput[] | FeeItemUncheckedCreateWithoutFeeTypeInput[]
    connectOrCreate?: FeeItemCreateOrConnectWithoutFeeTypeInput | FeeItemCreateOrConnectWithoutFeeTypeInput[]
    createMany?: FeeItemCreateManyFeeTypeInputEnvelope
    connect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
  }

  export type StudentUpdateManyWithoutGenderNestedInput = {
    create?: XOR<StudentCreateWithoutGenderInput, StudentUncheckedCreateWithoutGenderInput> | StudentCreateWithoutGenderInput[] | StudentUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutGenderInput | StudentCreateOrConnectWithoutGenderInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutGenderInput | StudentUpsertWithWhereUniqueWithoutGenderInput[]
    createMany?: StudentCreateManyGenderInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutGenderInput | StudentUpdateWithWhereUniqueWithoutGenderInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutGenderInput | StudentUpdateManyWithWhereWithoutGenderInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StaffUpdateManyWithoutGenderNestedInput = {
    create?: XOR<StaffCreateWithoutGenderInput, StaffUncheckedCreateWithoutGenderInput> | StaffCreateWithoutGenderInput[] | StaffUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutGenderInput | StaffCreateOrConnectWithoutGenderInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutGenderInput | StaffUpsertWithWhereUniqueWithoutGenderInput[]
    createMany?: StaffCreateManyGenderInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutGenderInput | StaffUpdateWithWhereUniqueWithoutGenderInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutGenderInput | StaffUpdateManyWithWhereWithoutGenderInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type StaffUpdateManyWithoutQualificationNestedInput = {
    create?: XOR<StaffCreateWithoutQualificationInput, StaffUncheckedCreateWithoutQualificationInput> | StaffCreateWithoutQualificationInput[] | StaffUncheckedCreateWithoutQualificationInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutQualificationInput | StaffCreateOrConnectWithoutQualificationInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutQualificationInput | StaffUpsertWithWhereUniqueWithoutQualificationInput[]
    createMany?: StaffCreateManyQualificationInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutQualificationInput | StaffUpdateWithWhereUniqueWithoutQualificationInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutQualificationInput | StaffUpdateManyWithWhereWithoutQualificationInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type StaffUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<StaffCreateWithoutDepartmentInput, StaffUncheckedCreateWithoutDepartmentInput> | StaffCreateWithoutDepartmentInput[] | StaffUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutDepartmentInput | StaffCreateOrConnectWithoutDepartmentInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutDepartmentInput | StaffUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: StaffCreateManyDepartmentInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutDepartmentInput | StaffUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutDepartmentInput | StaffUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type StaffUpdateManyWithoutDesignationNestedInput = {
    create?: XOR<StaffCreateWithoutDesignationInput, StaffUncheckedCreateWithoutDesignationInput> | StaffCreateWithoutDesignationInput[] | StaffUncheckedCreateWithoutDesignationInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutDesignationInput | StaffCreateOrConnectWithoutDesignationInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutDesignationInput | StaffUpsertWithWhereUniqueWithoutDesignationInput[]
    createMany?: StaffCreateManyDesignationInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutDesignationInput | StaffUpdateWithWhereUniqueWithoutDesignationInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutDesignationInput | StaffUpdateManyWithWhereWithoutDesignationInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type StaffUpdateManyWithoutStaffTypeNestedInput = {
    create?: XOR<StaffCreateWithoutStaffTypeInput, StaffUncheckedCreateWithoutStaffTypeInput> | StaffCreateWithoutStaffTypeInput[] | StaffUncheckedCreateWithoutStaffTypeInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutStaffTypeInput | StaffCreateOrConnectWithoutStaffTypeInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutStaffTypeInput | StaffUpsertWithWhereUniqueWithoutStaffTypeInput[]
    createMany?: StaffCreateManyStaffTypeInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutStaffTypeInput | StaffUpdateWithWhereUniqueWithoutStaffTypeInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutStaffTypeInput | StaffUpdateManyWithWhereWithoutStaffTypeInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type FeeItemUpdateManyWithoutFeeTypeNestedInput = {
    create?: XOR<FeeItemCreateWithoutFeeTypeInput, FeeItemUncheckedCreateWithoutFeeTypeInput> | FeeItemCreateWithoutFeeTypeInput[] | FeeItemUncheckedCreateWithoutFeeTypeInput[]
    connectOrCreate?: FeeItemCreateOrConnectWithoutFeeTypeInput | FeeItemCreateOrConnectWithoutFeeTypeInput[]
    upsert?: FeeItemUpsertWithWhereUniqueWithoutFeeTypeInput | FeeItemUpsertWithWhereUniqueWithoutFeeTypeInput[]
    createMany?: FeeItemCreateManyFeeTypeInputEnvelope
    set?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    disconnect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    delete?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    connect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    update?: FeeItemUpdateWithWhereUniqueWithoutFeeTypeInput | FeeItemUpdateWithWhereUniqueWithoutFeeTypeInput[]
    updateMany?: FeeItemUpdateManyWithWhereWithoutFeeTypeInput | FeeItemUpdateManyWithWhereWithoutFeeTypeInput[]
    deleteMany?: FeeItemScalarWhereInput | FeeItemScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutGenderNestedInput = {
    create?: XOR<StudentCreateWithoutGenderInput, StudentUncheckedCreateWithoutGenderInput> | StudentCreateWithoutGenderInput[] | StudentUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutGenderInput | StudentCreateOrConnectWithoutGenderInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutGenderInput | StudentUpsertWithWhereUniqueWithoutGenderInput[]
    createMany?: StudentCreateManyGenderInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutGenderInput | StudentUpdateWithWhereUniqueWithoutGenderInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutGenderInput | StudentUpdateManyWithWhereWithoutGenderInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StaffUncheckedUpdateManyWithoutGenderNestedInput = {
    create?: XOR<StaffCreateWithoutGenderInput, StaffUncheckedCreateWithoutGenderInput> | StaffCreateWithoutGenderInput[] | StaffUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutGenderInput | StaffCreateOrConnectWithoutGenderInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutGenderInput | StaffUpsertWithWhereUniqueWithoutGenderInput[]
    createMany?: StaffCreateManyGenderInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutGenderInput | StaffUpdateWithWhereUniqueWithoutGenderInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutGenderInput | StaffUpdateManyWithWhereWithoutGenderInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type StaffUncheckedUpdateManyWithoutQualificationNestedInput = {
    create?: XOR<StaffCreateWithoutQualificationInput, StaffUncheckedCreateWithoutQualificationInput> | StaffCreateWithoutQualificationInput[] | StaffUncheckedCreateWithoutQualificationInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutQualificationInput | StaffCreateOrConnectWithoutQualificationInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutQualificationInput | StaffUpsertWithWhereUniqueWithoutQualificationInput[]
    createMany?: StaffCreateManyQualificationInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutQualificationInput | StaffUpdateWithWhereUniqueWithoutQualificationInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutQualificationInput | StaffUpdateManyWithWhereWithoutQualificationInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type StaffUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<StaffCreateWithoutDepartmentInput, StaffUncheckedCreateWithoutDepartmentInput> | StaffCreateWithoutDepartmentInput[] | StaffUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutDepartmentInput | StaffCreateOrConnectWithoutDepartmentInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutDepartmentInput | StaffUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: StaffCreateManyDepartmentInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutDepartmentInput | StaffUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutDepartmentInput | StaffUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type StaffUncheckedUpdateManyWithoutDesignationNestedInput = {
    create?: XOR<StaffCreateWithoutDesignationInput, StaffUncheckedCreateWithoutDesignationInput> | StaffCreateWithoutDesignationInput[] | StaffUncheckedCreateWithoutDesignationInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutDesignationInput | StaffCreateOrConnectWithoutDesignationInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutDesignationInput | StaffUpsertWithWhereUniqueWithoutDesignationInput[]
    createMany?: StaffCreateManyDesignationInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutDesignationInput | StaffUpdateWithWhereUniqueWithoutDesignationInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutDesignationInput | StaffUpdateManyWithWhereWithoutDesignationInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type StaffUncheckedUpdateManyWithoutStaffTypeNestedInput = {
    create?: XOR<StaffCreateWithoutStaffTypeInput, StaffUncheckedCreateWithoutStaffTypeInput> | StaffCreateWithoutStaffTypeInput[] | StaffUncheckedCreateWithoutStaffTypeInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutStaffTypeInput | StaffCreateOrConnectWithoutStaffTypeInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutStaffTypeInput | StaffUpsertWithWhereUniqueWithoutStaffTypeInput[]
    createMany?: StaffCreateManyStaffTypeInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutStaffTypeInput | StaffUpdateWithWhereUniqueWithoutStaffTypeInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutStaffTypeInput | StaffUpdateManyWithWhereWithoutStaffTypeInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type FeeItemUncheckedUpdateManyWithoutFeeTypeNestedInput = {
    create?: XOR<FeeItemCreateWithoutFeeTypeInput, FeeItemUncheckedCreateWithoutFeeTypeInput> | FeeItemCreateWithoutFeeTypeInput[] | FeeItemUncheckedCreateWithoutFeeTypeInput[]
    connectOrCreate?: FeeItemCreateOrConnectWithoutFeeTypeInput | FeeItemCreateOrConnectWithoutFeeTypeInput[]
    upsert?: FeeItemUpsertWithWhereUniqueWithoutFeeTypeInput | FeeItemUpsertWithWhereUniqueWithoutFeeTypeInput[]
    createMany?: FeeItemCreateManyFeeTypeInputEnvelope
    set?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    disconnect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    delete?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    connect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    update?: FeeItemUpdateWithWhereUniqueWithoutFeeTypeInput | FeeItemUpdateWithWhereUniqueWithoutFeeTypeInput[]
    updateMany?: FeeItemUpdateManyWithWhereWithoutFeeTypeInput | FeeItemUpdateManyWithWhereWithoutFeeTypeInput[]
    deleteMany?: FeeItemScalarWhereInput | FeeItemScalarWhereInput[]
  }

  export type MasterDropdownCreateNestedOneWithoutGenderStaffInput = {
    create?: XOR<MasterDropdownCreateWithoutGenderStaffInput, MasterDropdownUncheckedCreateWithoutGenderStaffInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutGenderStaffInput
    connect?: MasterDropdownWhereUniqueInput
  }

  export type MasterDropdownCreateNestedOneWithoutQualificationStaffInput = {
    create?: XOR<MasterDropdownCreateWithoutQualificationStaffInput, MasterDropdownUncheckedCreateWithoutQualificationStaffInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutQualificationStaffInput
    connect?: MasterDropdownWhereUniqueInput
  }

  export type MasterDropdownCreateNestedOneWithoutDepartmentStaffInput = {
    create?: XOR<MasterDropdownCreateWithoutDepartmentStaffInput, MasterDropdownUncheckedCreateWithoutDepartmentStaffInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutDepartmentStaffInput
    connect?: MasterDropdownWhereUniqueInput
  }

  export type MasterDropdownCreateNestedOneWithoutDesignationStaffInput = {
    create?: XOR<MasterDropdownCreateWithoutDesignationStaffInput, MasterDropdownUncheckedCreateWithoutDesignationStaffInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutDesignationStaffInput
    connect?: MasterDropdownWhereUniqueInput
  }

  export type MasterDropdownCreateNestedOneWithoutStaffTypeStaffInput = {
    create?: XOR<MasterDropdownCreateWithoutStaffTypeStaffInput, MasterDropdownUncheckedCreateWithoutStaffTypeStaffInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutStaffTypeStaffInput
    connect?: MasterDropdownWhereUniqueInput
  }

  export type TimePeriodCreateNestedManyWithoutAssignedTeacherInput = {
    create?: XOR<TimePeriodCreateWithoutAssignedTeacherInput, TimePeriodUncheckedCreateWithoutAssignedTeacherInput> | TimePeriodCreateWithoutAssignedTeacherInput[] | TimePeriodUncheckedCreateWithoutAssignedTeacherInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutAssignedTeacherInput | TimePeriodCreateOrConnectWithoutAssignedTeacherInput[]
    createMany?: TimePeriodCreateManyAssignedTeacherInputEnvelope
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
  }

  export type TimePeriodUncheckedCreateNestedManyWithoutAssignedTeacherInput = {
    create?: XOR<TimePeriodCreateWithoutAssignedTeacherInput, TimePeriodUncheckedCreateWithoutAssignedTeacherInput> | TimePeriodCreateWithoutAssignedTeacherInput[] | TimePeriodUncheckedCreateWithoutAssignedTeacherInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutAssignedTeacherInput | TimePeriodCreateOrConnectWithoutAssignedTeacherInput[]
    createMany?: TimePeriodCreateManyAssignedTeacherInputEnvelope
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MasterDropdownUpdateOneWithoutGenderStaffNestedInput = {
    create?: XOR<MasterDropdownCreateWithoutGenderStaffInput, MasterDropdownUncheckedCreateWithoutGenderStaffInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutGenderStaffInput
    upsert?: MasterDropdownUpsertWithoutGenderStaffInput
    disconnect?: MasterDropdownWhereInput | boolean
    delete?: MasterDropdownWhereInput | boolean
    connect?: MasterDropdownWhereUniqueInput
    update?: XOR<XOR<MasterDropdownUpdateToOneWithWhereWithoutGenderStaffInput, MasterDropdownUpdateWithoutGenderStaffInput>, MasterDropdownUncheckedUpdateWithoutGenderStaffInput>
  }

  export type MasterDropdownUpdateOneWithoutQualificationStaffNestedInput = {
    create?: XOR<MasterDropdownCreateWithoutQualificationStaffInput, MasterDropdownUncheckedCreateWithoutQualificationStaffInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutQualificationStaffInput
    upsert?: MasterDropdownUpsertWithoutQualificationStaffInput
    disconnect?: MasterDropdownWhereInput | boolean
    delete?: MasterDropdownWhereInput | boolean
    connect?: MasterDropdownWhereUniqueInput
    update?: XOR<XOR<MasterDropdownUpdateToOneWithWhereWithoutQualificationStaffInput, MasterDropdownUpdateWithoutQualificationStaffInput>, MasterDropdownUncheckedUpdateWithoutQualificationStaffInput>
  }

  export type MasterDropdownUpdateOneWithoutDepartmentStaffNestedInput = {
    create?: XOR<MasterDropdownCreateWithoutDepartmentStaffInput, MasterDropdownUncheckedCreateWithoutDepartmentStaffInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutDepartmentStaffInput
    upsert?: MasterDropdownUpsertWithoutDepartmentStaffInput
    disconnect?: MasterDropdownWhereInput | boolean
    delete?: MasterDropdownWhereInput | boolean
    connect?: MasterDropdownWhereUniqueInput
    update?: XOR<XOR<MasterDropdownUpdateToOneWithWhereWithoutDepartmentStaffInput, MasterDropdownUpdateWithoutDepartmentStaffInput>, MasterDropdownUncheckedUpdateWithoutDepartmentStaffInput>
  }

  export type MasterDropdownUpdateOneWithoutDesignationStaffNestedInput = {
    create?: XOR<MasterDropdownCreateWithoutDesignationStaffInput, MasterDropdownUncheckedCreateWithoutDesignationStaffInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutDesignationStaffInput
    upsert?: MasterDropdownUpsertWithoutDesignationStaffInput
    disconnect?: MasterDropdownWhereInput | boolean
    delete?: MasterDropdownWhereInput | boolean
    connect?: MasterDropdownWhereUniqueInput
    update?: XOR<XOR<MasterDropdownUpdateToOneWithWhereWithoutDesignationStaffInput, MasterDropdownUpdateWithoutDesignationStaffInput>, MasterDropdownUncheckedUpdateWithoutDesignationStaffInput>
  }

  export type MasterDropdownUpdateOneWithoutStaffTypeStaffNestedInput = {
    create?: XOR<MasterDropdownCreateWithoutStaffTypeStaffInput, MasterDropdownUncheckedCreateWithoutStaffTypeStaffInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutStaffTypeStaffInput
    upsert?: MasterDropdownUpsertWithoutStaffTypeStaffInput
    disconnect?: MasterDropdownWhereInput | boolean
    delete?: MasterDropdownWhereInput | boolean
    connect?: MasterDropdownWhereUniqueInput
    update?: XOR<XOR<MasterDropdownUpdateToOneWithWhereWithoutStaffTypeStaffInput, MasterDropdownUpdateWithoutStaffTypeStaffInput>, MasterDropdownUncheckedUpdateWithoutStaffTypeStaffInput>
  }

  export type TimePeriodUpdateManyWithoutAssignedTeacherNestedInput = {
    create?: XOR<TimePeriodCreateWithoutAssignedTeacherInput, TimePeriodUncheckedCreateWithoutAssignedTeacherInput> | TimePeriodCreateWithoutAssignedTeacherInput[] | TimePeriodUncheckedCreateWithoutAssignedTeacherInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutAssignedTeacherInput | TimePeriodCreateOrConnectWithoutAssignedTeacherInput[]
    upsert?: TimePeriodUpsertWithWhereUniqueWithoutAssignedTeacherInput | TimePeriodUpsertWithWhereUniqueWithoutAssignedTeacherInput[]
    createMany?: TimePeriodCreateManyAssignedTeacherInputEnvelope
    set?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    disconnect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    delete?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    update?: TimePeriodUpdateWithWhereUniqueWithoutAssignedTeacherInput | TimePeriodUpdateWithWhereUniqueWithoutAssignedTeacherInput[]
    updateMany?: TimePeriodUpdateManyWithWhereWithoutAssignedTeacherInput | TimePeriodUpdateManyWithWhereWithoutAssignedTeacherInput[]
    deleteMany?: TimePeriodScalarWhereInput | TimePeriodScalarWhereInput[]
  }

  export type TimePeriodUncheckedUpdateManyWithoutAssignedTeacherNestedInput = {
    create?: XOR<TimePeriodCreateWithoutAssignedTeacherInput, TimePeriodUncheckedCreateWithoutAssignedTeacherInput> | TimePeriodCreateWithoutAssignedTeacherInput[] | TimePeriodUncheckedCreateWithoutAssignedTeacherInput[]
    connectOrCreate?: TimePeriodCreateOrConnectWithoutAssignedTeacherInput | TimePeriodCreateOrConnectWithoutAssignedTeacherInput[]
    upsert?: TimePeriodUpsertWithWhereUniqueWithoutAssignedTeacherInput | TimePeriodUpsertWithWhereUniqueWithoutAssignedTeacherInput[]
    createMany?: TimePeriodCreateManyAssignedTeacherInputEnvelope
    set?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    disconnect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    delete?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    connect?: TimePeriodWhereUniqueInput | TimePeriodWhereUniqueInput[]
    update?: TimePeriodUpdateWithWhereUniqueWithoutAssignedTeacherInput | TimePeriodUpdateWithWhereUniqueWithoutAssignedTeacherInput[]
    updateMany?: TimePeriodUpdateManyWithWhereWithoutAssignedTeacherInput | TimePeriodUpdateManyWithWhereWithoutAssignedTeacherInput[]
    deleteMany?: TimePeriodScalarWhereInput | TimePeriodScalarWhereInput[]
  }

  export type SubjectCreateNestedOneWithoutTimePeriodsInput = {
    create?: XOR<SubjectCreateWithoutTimePeriodsInput, SubjectUncheckedCreateWithoutTimePeriodsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTimePeriodsInput
    connect?: SubjectWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutTimePeriodsInput = {
    create?: XOR<ClassCreateWithoutTimePeriodsInput, ClassUncheckedCreateWithoutTimePeriodsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTimePeriodsInput
    connect?: ClassWhereUniqueInput
  }

  export type SectionCreateNestedOneWithoutTimePeriodsInput = {
    create?: XOR<SectionCreateWithoutTimePeriodsInput, SectionUncheckedCreateWithoutTimePeriodsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutTimePeriodsInput
    connect?: SectionWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutTimePeriodsInput = {
    create?: XOR<StaffCreateWithoutTimePeriodsInput, StaffUncheckedCreateWithoutTimePeriodsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutTimePeriodsInput
    connect?: StaffWhereUniqueInput
  }

  export type SubjectUpdateOneRequiredWithoutTimePeriodsNestedInput = {
    create?: XOR<SubjectCreateWithoutTimePeriodsInput, SubjectUncheckedCreateWithoutTimePeriodsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTimePeriodsInput
    upsert?: SubjectUpsertWithoutTimePeriodsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutTimePeriodsInput, SubjectUpdateWithoutTimePeriodsInput>, SubjectUncheckedUpdateWithoutTimePeriodsInput>
  }

  export type ClassUpdateOneRequiredWithoutTimePeriodsNestedInput = {
    create?: XOR<ClassCreateWithoutTimePeriodsInput, ClassUncheckedCreateWithoutTimePeriodsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTimePeriodsInput
    upsert?: ClassUpsertWithoutTimePeriodsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutTimePeriodsInput, ClassUpdateWithoutTimePeriodsInput>, ClassUncheckedUpdateWithoutTimePeriodsInput>
  }

  export type SectionUpdateOneRequiredWithoutTimePeriodsNestedInput = {
    create?: XOR<SectionCreateWithoutTimePeriodsInput, SectionUncheckedCreateWithoutTimePeriodsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutTimePeriodsInput
    upsert?: SectionUpsertWithoutTimePeriodsInput
    connect?: SectionWhereUniqueInput
    update?: XOR<XOR<SectionUpdateToOneWithWhereWithoutTimePeriodsInput, SectionUpdateWithoutTimePeriodsInput>, SectionUncheckedUpdateWithoutTimePeriodsInput>
  }

  export type StaffUpdateOneRequiredWithoutTimePeriodsNestedInput = {
    create?: XOR<StaffCreateWithoutTimePeriodsInput, StaffUncheckedCreateWithoutTimePeriodsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutTimePeriodsInput
    upsert?: StaffUpsertWithoutTimePeriodsInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutTimePeriodsInput, StaffUpdateWithoutTimePeriodsInput>, StaffUncheckedUpdateWithoutTimePeriodsInput>
  }

  export type ClassCreateNestedOneWithoutFeeStructuresInput = {
    create?: XOR<ClassCreateWithoutFeeStructuresInput, ClassUncheckedCreateWithoutFeeStructuresInput>
    connectOrCreate?: ClassCreateOrConnectWithoutFeeStructuresInput
    connect?: ClassWhereUniqueInput
  }

  export type FeeItemCreateNestedManyWithoutFeeStructureInput = {
    create?: XOR<FeeItemCreateWithoutFeeStructureInput, FeeItemUncheckedCreateWithoutFeeStructureInput> | FeeItemCreateWithoutFeeStructureInput[] | FeeItemUncheckedCreateWithoutFeeStructureInput[]
    connectOrCreate?: FeeItemCreateOrConnectWithoutFeeStructureInput | FeeItemCreateOrConnectWithoutFeeStructureInput[]
    createMany?: FeeItemCreateManyFeeStructureInputEnvelope
    connect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
  }

  export type FeeItemUncheckedCreateNestedManyWithoutFeeStructureInput = {
    create?: XOR<FeeItemCreateWithoutFeeStructureInput, FeeItemUncheckedCreateWithoutFeeStructureInput> | FeeItemCreateWithoutFeeStructureInput[] | FeeItemUncheckedCreateWithoutFeeStructureInput[]
    connectOrCreate?: FeeItemCreateOrConnectWithoutFeeStructureInput | FeeItemCreateOrConnectWithoutFeeStructureInput[]
    createMany?: FeeItemCreateManyFeeStructureInputEnvelope
    connect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutFeeStructuresNestedInput = {
    create?: XOR<ClassCreateWithoutFeeStructuresInput, ClassUncheckedCreateWithoutFeeStructuresInput>
    connectOrCreate?: ClassCreateOrConnectWithoutFeeStructuresInput
    upsert?: ClassUpsertWithoutFeeStructuresInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutFeeStructuresInput, ClassUpdateWithoutFeeStructuresInput>, ClassUncheckedUpdateWithoutFeeStructuresInput>
  }

  export type FeeItemUpdateManyWithoutFeeStructureNestedInput = {
    create?: XOR<FeeItemCreateWithoutFeeStructureInput, FeeItemUncheckedCreateWithoutFeeStructureInput> | FeeItemCreateWithoutFeeStructureInput[] | FeeItemUncheckedCreateWithoutFeeStructureInput[]
    connectOrCreate?: FeeItemCreateOrConnectWithoutFeeStructureInput | FeeItemCreateOrConnectWithoutFeeStructureInput[]
    upsert?: FeeItemUpsertWithWhereUniqueWithoutFeeStructureInput | FeeItemUpsertWithWhereUniqueWithoutFeeStructureInput[]
    createMany?: FeeItemCreateManyFeeStructureInputEnvelope
    set?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    disconnect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    delete?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    connect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    update?: FeeItemUpdateWithWhereUniqueWithoutFeeStructureInput | FeeItemUpdateWithWhereUniqueWithoutFeeStructureInput[]
    updateMany?: FeeItemUpdateManyWithWhereWithoutFeeStructureInput | FeeItemUpdateManyWithWhereWithoutFeeStructureInput[]
    deleteMany?: FeeItemScalarWhereInput | FeeItemScalarWhereInput[]
  }

  export type FeeItemUncheckedUpdateManyWithoutFeeStructureNestedInput = {
    create?: XOR<FeeItemCreateWithoutFeeStructureInput, FeeItemUncheckedCreateWithoutFeeStructureInput> | FeeItemCreateWithoutFeeStructureInput[] | FeeItemUncheckedCreateWithoutFeeStructureInput[]
    connectOrCreate?: FeeItemCreateOrConnectWithoutFeeStructureInput | FeeItemCreateOrConnectWithoutFeeStructureInput[]
    upsert?: FeeItemUpsertWithWhereUniqueWithoutFeeStructureInput | FeeItemUpsertWithWhereUniqueWithoutFeeStructureInput[]
    createMany?: FeeItemCreateManyFeeStructureInputEnvelope
    set?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    disconnect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    delete?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    connect?: FeeItemWhereUniqueInput | FeeItemWhereUniqueInput[]
    update?: FeeItemUpdateWithWhereUniqueWithoutFeeStructureInput | FeeItemUpdateWithWhereUniqueWithoutFeeStructureInput[]
    updateMany?: FeeItemUpdateManyWithWhereWithoutFeeStructureInput | FeeItemUpdateManyWithWhereWithoutFeeStructureInput[]
    deleteMany?: FeeItemScalarWhereInput | FeeItemScalarWhereInput[]
  }

  export type FeeStructureCreateNestedOneWithoutFeeItemsInput = {
    create?: XOR<FeeStructureCreateWithoutFeeItemsInput, FeeStructureUncheckedCreateWithoutFeeItemsInput>
    connectOrCreate?: FeeStructureCreateOrConnectWithoutFeeItemsInput
    connect?: FeeStructureWhereUniqueInput
  }

  export type MasterDropdownCreateNestedOneWithoutFeeItemsInput = {
    create?: XOR<MasterDropdownCreateWithoutFeeItemsInput, MasterDropdownUncheckedCreateWithoutFeeItemsInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutFeeItemsInput
    connect?: MasterDropdownWhereUniqueInput
  }

  export type FeeStructureUpdateOneRequiredWithoutFeeItemsNestedInput = {
    create?: XOR<FeeStructureCreateWithoutFeeItemsInput, FeeStructureUncheckedCreateWithoutFeeItemsInput>
    connectOrCreate?: FeeStructureCreateOrConnectWithoutFeeItemsInput
    upsert?: FeeStructureUpsertWithoutFeeItemsInput
    connect?: FeeStructureWhereUniqueInput
    update?: XOR<XOR<FeeStructureUpdateToOneWithWhereWithoutFeeItemsInput, FeeStructureUpdateWithoutFeeItemsInput>, FeeStructureUncheckedUpdateWithoutFeeItemsInput>
  }

  export type MasterDropdownUpdateOneRequiredWithoutFeeItemsNestedInput = {
    create?: XOR<MasterDropdownCreateWithoutFeeItemsInput, MasterDropdownUncheckedCreateWithoutFeeItemsInput>
    connectOrCreate?: MasterDropdownCreateOrConnectWithoutFeeItemsInput
    upsert?: MasterDropdownUpsertWithoutFeeItemsInput
    connect?: MasterDropdownWhereUniqueInput
    update?: XOR<XOR<MasterDropdownUpdateToOneWithWhereWithoutFeeItemsInput, MasterDropdownUpdateWithoutFeeItemsInput>, MasterDropdownUncheckedUpdateWithoutFeeItemsInput>
  }

  export type ClassCreateNestedOneWithoutMarksheetsInput = {
    create?: XOR<ClassCreateWithoutMarksheetsInput, ClassUncheckedCreateWithoutMarksheetsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutMarksheetsInput
    connect?: ClassWhereUniqueInput
  }

  export type SectionCreateNestedOneWithoutMarksheetsInput = {
    create?: XOR<SectionCreateWithoutMarksheetsInput, SectionUncheckedCreateWithoutMarksheetsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutMarksheetsInput
    connect?: SectionWhereUniqueInput
  }

  export type MarksSubjectCreateNestedManyWithoutMarksheetInput = {
    create?: XOR<MarksSubjectCreateWithoutMarksheetInput, MarksSubjectUncheckedCreateWithoutMarksheetInput> | MarksSubjectCreateWithoutMarksheetInput[] | MarksSubjectUncheckedCreateWithoutMarksheetInput[]
    connectOrCreate?: MarksSubjectCreateOrConnectWithoutMarksheetInput | MarksSubjectCreateOrConnectWithoutMarksheetInput[]
    createMany?: MarksSubjectCreateManyMarksheetInputEnvelope
    connect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
  }

  export type MarksSubjectUncheckedCreateNestedManyWithoutMarksheetInput = {
    create?: XOR<MarksSubjectCreateWithoutMarksheetInput, MarksSubjectUncheckedCreateWithoutMarksheetInput> | MarksSubjectCreateWithoutMarksheetInput[] | MarksSubjectUncheckedCreateWithoutMarksheetInput[]
    connectOrCreate?: MarksSubjectCreateOrConnectWithoutMarksheetInput | MarksSubjectCreateOrConnectWithoutMarksheetInput[]
    createMany?: MarksSubjectCreateManyMarksheetInputEnvelope
    connect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutMarksheetsNestedInput = {
    create?: XOR<ClassCreateWithoutMarksheetsInput, ClassUncheckedCreateWithoutMarksheetsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutMarksheetsInput
    upsert?: ClassUpsertWithoutMarksheetsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutMarksheetsInput, ClassUpdateWithoutMarksheetsInput>, ClassUncheckedUpdateWithoutMarksheetsInput>
  }

  export type SectionUpdateOneRequiredWithoutMarksheetsNestedInput = {
    create?: XOR<SectionCreateWithoutMarksheetsInput, SectionUncheckedCreateWithoutMarksheetsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutMarksheetsInput
    upsert?: SectionUpsertWithoutMarksheetsInput
    connect?: SectionWhereUniqueInput
    update?: XOR<XOR<SectionUpdateToOneWithWhereWithoutMarksheetsInput, SectionUpdateWithoutMarksheetsInput>, SectionUncheckedUpdateWithoutMarksheetsInput>
  }

  export type MarksSubjectUpdateManyWithoutMarksheetNestedInput = {
    create?: XOR<MarksSubjectCreateWithoutMarksheetInput, MarksSubjectUncheckedCreateWithoutMarksheetInput> | MarksSubjectCreateWithoutMarksheetInput[] | MarksSubjectUncheckedCreateWithoutMarksheetInput[]
    connectOrCreate?: MarksSubjectCreateOrConnectWithoutMarksheetInput | MarksSubjectCreateOrConnectWithoutMarksheetInput[]
    upsert?: MarksSubjectUpsertWithWhereUniqueWithoutMarksheetInput | MarksSubjectUpsertWithWhereUniqueWithoutMarksheetInput[]
    createMany?: MarksSubjectCreateManyMarksheetInputEnvelope
    set?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    disconnect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    delete?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    connect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    update?: MarksSubjectUpdateWithWhereUniqueWithoutMarksheetInput | MarksSubjectUpdateWithWhereUniqueWithoutMarksheetInput[]
    updateMany?: MarksSubjectUpdateManyWithWhereWithoutMarksheetInput | MarksSubjectUpdateManyWithWhereWithoutMarksheetInput[]
    deleteMany?: MarksSubjectScalarWhereInput | MarksSubjectScalarWhereInput[]
  }

  export type MarksSubjectUncheckedUpdateManyWithoutMarksheetNestedInput = {
    create?: XOR<MarksSubjectCreateWithoutMarksheetInput, MarksSubjectUncheckedCreateWithoutMarksheetInput> | MarksSubjectCreateWithoutMarksheetInput[] | MarksSubjectUncheckedCreateWithoutMarksheetInput[]
    connectOrCreate?: MarksSubjectCreateOrConnectWithoutMarksheetInput | MarksSubjectCreateOrConnectWithoutMarksheetInput[]
    upsert?: MarksSubjectUpsertWithWhereUniqueWithoutMarksheetInput | MarksSubjectUpsertWithWhereUniqueWithoutMarksheetInput[]
    createMany?: MarksSubjectCreateManyMarksheetInputEnvelope
    set?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    disconnect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    delete?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    connect?: MarksSubjectWhereUniqueInput | MarksSubjectWhereUniqueInput[]
    update?: MarksSubjectUpdateWithWhereUniqueWithoutMarksheetInput | MarksSubjectUpdateWithWhereUniqueWithoutMarksheetInput[]
    updateMany?: MarksSubjectUpdateManyWithWhereWithoutMarksheetInput | MarksSubjectUpdateManyWithWhereWithoutMarksheetInput[]
    deleteMany?: MarksSubjectScalarWhereInput | MarksSubjectScalarWhereInput[]
  }

  export type MarksSheetMasterCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<MarksSheetMasterCreateWithoutSubjectsInput, MarksSheetMasterUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: MarksSheetMasterCreateOrConnectWithoutSubjectsInput
    connect?: MarksSheetMasterWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutMarksheetsInput = {
    create?: XOR<SubjectCreateWithoutMarksheetsInput, SubjectUncheckedCreateWithoutMarksheetsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutMarksheetsInput
    connect?: SubjectWhereUniqueInput
  }

  export type MarksSheetMasterUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<MarksSheetMasterCreateWithoutSubjectsInput, MarksSheetMasterUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: MarksSheetMasterCreateOrConnectWithoutSubjectsInput
    upsert?: MarksSheetMasterUpsertWithoutSubjectsInput
    connect?: MarksSheetMasterWhereUniqueInput
    update?: XOR<XOR<MarksSheetMasterUpdateToOneWithWhereWithoutSubjectsInput, MarksSheetMasterUpdateWithoutSubjectsInput>, MarksSheetMasterUncheckedUpdateWithoutSubjectsInput>
  }

  export type SubjectUpdateOneRequiredWithoutMarksheetsNestedInput = {
    create?: XOR<SubjectCreateWithoutMarksheetsInput, SubjectUncheckedCreateWithoutMarksheetsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutMarksheetsInput
    upsert?: SubjectUpsertWithoutMarksheetsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutMarksheetsInput, SubjectUpdateWithoutMarksheetsInput>, SubjectUncheckedUpdateWithoutMarksheetsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SectionCreateWithoutClassInput = {
    name: string
    students?: StudentCreateNestedManyWithoutSectionInput
    timePeriods?: TimePeriodCreateNestedManyWithoutSectionInput
    marksheets?: MarksSheetMasterCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutClassInput = {
    id?: number
    name: string
    students?: StudentUncheckedCreateNestedManyWithoutSectionInput
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutSectionInput
    marksheets?: MarksSheetMasterUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutClassInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput>
  }

  export type SectionCreateManyClassInputEnvelope = {
    data: SectionCreateManyClassInput | SectionCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutClassInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    gender?: MasterDropdownCreateNestedOneWithoutStudentsInput
    section: SectionCreateNestedOneWithoutStudentsInput
    feeDetails?: FeeDetailsCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutClassInput = {
    id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    genderId?: number | null
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    sectionId: number
    feeDetails?: FeeDetailsUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutClassInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput>
  }

  export type StudentCreateManyClassInputEnvelope = {
    data: StudentCreateManyClassInput | StudentCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type SubjectCreateWithoutClassInput = {
    name: string
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timePeriods?: TimePeriodCreateNestedManyWithoutSubjectInput
    marksheets?: MarksSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutClassInput = {
    id?: number
    name: string
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutSubjectInput
    marksheets?: MarksSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutClassInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutClassInput, SubjectUncheckedCreateWithoutClassInput>
  }

  export type SubjectCreateManyClassInputEnvelope = {
    data: SubjectCreateManyClassInput | SubjectCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type TimePeriodCreateWithoutClassInput = {
    periodName: string
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutTimePeriodsInput
    section: SectionCreateNestedOneWithoutTimePeriodsInput
    assignedTeacher: StaffCreateNestedOneWithoutTimePeriodsInput
  }

  export type TimePeriodUncheckedCreateWithoutClassInput = {
    id?: number
    periodName: string
    subjectId: number
    sectionId: number
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    teacherId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TimePeriodCreateOrConnectWithoutClassInput = {
    where: TimePeriodWhereUniqueInput
    create: XOR<TimePeriodCreateWithoutClassInput, TimePeriodUncheckedCreateWithoutClassInput>
  }

  export type TimePeriodCreateManyClassInputEnvelope = {
    data: TimePeriodCreateManyClassInput | TimePeriodCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type FeeStructureCreateWithoutClassInput = {
    academicYear: string
    numberOfTerms: number
    isActive?: boolean
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    feeItems?: FeeItemCreateNestedManyWithoutFeeStructureInput
  }

  export type FeeStructureUncheckedCreateWithoutClassInput = {
    id?: number
    academicYear: string
    numberOfTerms: number
    isActive?: boolean
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    feeItems?: FeeItemUncheckedCreateNestedManyWithoutFeeStructureInput
  }

  export type FeeStructureCreateOrConnectWithoutClassInput = {
    where: FeeStructureWhereUniqueInput
    create: XOR<FeeStructureCreateWithoutClassInput, FeeStructureUncheckedCreateWithoutClassInput>
  }

  export type FeeStructureCreateManyClassInputEnvelope = {
    data: FeeStructureCreateManyClassInput | FeeStructureCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type MarksSheetMasterCreateWithoutClassInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    section: SectionCreateNestedOneWithoutMarksheetsInput
    subjects?: MarksSubjectCreateNestedManyWithoutMarksheetInput
  }

  export type MarksSheetMasterUncheckedCreateWithoutClassInput = {
    id?: number
    sectionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: MarksSubjectUncheckedCreateNestedManyWithoutMarksheetInput
  }

  export type MarksSheetMasterCreateOrConnectWithoutClassInput = {
    where: MarksSheetMasterWhereUniqueInput
    create: XOR<MarksSheetMasterCreateWithoutClassInput, MarksSheetMasterUncheckedCreateWithoutClassInput>
  }

  export type MarksSheetMasterCreateManyClassInputEnvelope = {
    data: MarksSheetMasterCreateManyClassInput | MarksSheetMasterCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type SectionUpsertWithWhereUniqueWithoutClassInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutClassInput, SectionUncheckedUpdateWithoutClassInput>
    create: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutClassInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutClassInput, SectionUncheckedUpdateWithoutClassInput>
  }

  export type SectionUpdateManyWithWhereWithoutClassInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutClassInput>
  }

  export type SectionScalarWhereInput = {
    AND?: SectionScalarWhereInput | SectionScalarWhereInput[]
    OR?: SectionScalarWhereInput[]
    NOT?: SectionScalarWhereInput | SectionScalarWhereInput[]
    id?: IntFilter<"Section"> | number
    name?: StringFilter<"Section"> | string
    classId?: IntFilter<"Section"> | number
  }

  export type StudentUpsertWithWhereUniqueWithoutClassInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutClassInput, StudentUncheckedUpdateWithoutClassInput>
    create: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutClassInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutClassInput, StudentUncheckedUpdateWithoutClassInput>
  }

  export type StudentUpdateManyWithWhereWithoutClassInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutClassInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: IntFilter<"Student"> | number
    username?: StringFilter<"Student"> | string
    password?: StringFilter<"Student"> | string
    firstName?: StringFilter<"Student"> | string
    lastName?: StringFilter<"Student"> | string
    genderId?: IntNullableFilter<"Student"> | number | null
    fatherName?: StringNullableFilter<"Student"> | string | null
    motherName?: StringNullableFilter<"Student"> | string | null
    fatherOccupation?: StringNullableFilter<"Student"> | string | null
    motherOccupation?: StringNullableFilter<"Student"> | string | null
    mobileNumber?: StringNullableFilter<"Student"> | string | null
    motherMobileNumber?: StringNullableFilter<"Student"> | string | null
    fatherEmail?: StringNullableFilter<"Student"> | string | null
    address?: StringNullableFilter<"Student"> | string | null
    isTransportRequired?: BoolNullableFilter<"Student"> | boolean | null
    classId?: IntFilter<"Student"> | number
    sectionId?: IntFilter<"Student"> | number
  }

  export type SubjectUpsertWithWhereUniqueWithoutClassInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutClassInput, SubjectUncheckedUpdateWithoutClassInput>
    create: XOR<SubjectCreateWithoutClassInput, SubjectUncheckedCreateWithoutClassInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutClassInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutClassInput, SubjectUncheckedUpdateWithoutClassInput>
  }

  export type SubjectUpdateManyWithWhereWithoutClassInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutClassInput>
  }

  export type SubjectScalarWhereInput = {
    AND?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    OR?: SubjectScalarWhereInput[]
    NOT?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    id?: IntFilter<"Subject"> | number
    name?: StringFilter<"Subject"> | string
    code?: StringNullableFilter<"Subject"> | string | null
    classId?: IntFilter<"Subject"> | number
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
  }

  export type TimePeriodUpsertWithWhereUniqueWithoutClassInput = {
    where: TimePeriodWhereUniqueInput
    update: XOR<TimePeriodUpdateWithoutClassInput, TimePeriodUncheckedUpdateWithoutClassInput>
    create: XOR<TimePeriodCreateWithoutClassInput, TimePeriodUncheckedCreateWithoutClassInput>
  }

  export type TimePeriodUpdateWithWhereUniqueWithoutClassInput = {
    where: TimePeriodWhereUniqueInput
    data: XOR<TimePeriodUpdateWithoutClassInput, TimePeriodUncheckedUpdateWithoutClassInput>
  }

  export type TimePeriodUpdateManyWithWhereWithoutClassInput = {
    where: TimePeriodScalarWhereInput
    data: XOR<TimePeriodUpdateManyMutationInput, TimePeriodUncheckedUpdateManyWithoutClassInput>
  }

  export type TimePeriodScalarWhereInput = {
    AND?: TimePeriodScalarWhereInput | TimePeriodScalarWhereInput[]
    OR?: TimePeriodScalarWhereInput[]
    NOT?: TimePeriodScalarWhereInput | TimePeriodScalarWhereInput[]
    id?: IntFilter<"TimePeriod"> | number
    periodName?: StringFilter<"TimePeriod"> | string
    subjectId?: IntFilter<"TimePeriod"> | number
    classId?: IntFilter<"TimePeriod"> | number
    sectionId?: IntFilter<"TimePeriod"> | number
    startDate?: DateTimeFilter<"TimePeriod"> | Date | string
    endDate?: DateTimeFilter<"TimePeriod"> | Date | string
    startTime?: StringFilter<"TimePeriod"> | string
    endTime?: StringFilter<"TimePeriod"> | string
    teacherId?: IntFilter<"TimePeriod"> | number
    isActive?: BoolFilter<"TimePeriod"> | boolean
    createdAt?: DateTimeFilter<"TimePeriod"> | Date | string
    updatedAt?: DateTimeFilter<"TimePeriod"> | Date | string
  }

  export type FeeStructureUpsertWithWhereUniqueWithoutClassInput = {
    where: FeeStructureWhereUniqueInput
    update: XOR<FeeStructureUpdateWithoutClassInput, FeeStructureUncheckedUpdateWithoutClassInput>
    create: XOR<FeeStructureCreateWithoutClassInput, FeeStructureUncheckedCreateWithoutClassInput>
  }

  export type FeeStructureUpdateWithWhereUniqueWithoutClassInput = {
    where: FeeStructureWhereUniqueInput
    data: XOR<FeeStructureUpdateWithoutClassInput, FeeStructureUncheckedUpdateWithoutClassInput>
  }

  export type FeeStructureUpdateManyWithWhereWithoutClassInput = {
    where: FeeStructureScalarWhereInput
    data: XOR<FeeStructureUpdateManyMutationInput, FeeStructureUncheckedUpdateManyWithoutClassInput>
  }

  export type FeeStructureScalarWhereInput = {
    AND?: FeeStructureScalarWhereInput | FeeStructureScalarWhereInput[]
    OR?: FeeStructureScalarWhereInput[]
    NOT?: FeeStructureScalarWhereInput | FeeStructureScalarWhereInput[]
    id?: IntFilter<"FeeStructure"> | number
    classId?: IntFilter<"FeeStructure"> | number
    academicYear?: StringFilter<"FeeStructure"> | string
    numberOfTerms?: IntFilter<"FeeStructure"> | number
    isActive?: BoolFilter<"FeeStructure"> | boolean
    totalAmount?: FloatFilter<"FeeStructure"> | number
    createdAt?: DateTimeFilter<"FeeStructure"> | Date | string
    updatedAt?: DateTimeFilter<"FeeStructure"> | Date | string
  }

  export type MarksSheetMasterUpsertWithWhereUniqueWithoutClassInput = {
    where: MarksSheetMasterWhereUniqueInput
    update: XOR<MarksSheetMasterUpdateWithoutClassInput, MarksSheetMasterUncheckedUpdateWithoutClassInput>
    create: XOR<MarksSheetMasterCreateWithoutClassInput, MarksSheetMasterUncheckedCreateWithoutClassInput>
  }

  export type MarksSheetMasterUpdateWithWhereUniqueWithoutClassInput = {
    where: MarksSheetMasterWhereUniqueInput
    data: XOR<MarksSheetMasterUpdateWithoutClassInput, MarksSheetMasterUncheckedUpdateWithoutClassInput>
  }

  export type MarksSheetMasterUpdateManyWithWhereWithoutClassInput = {
    where: MarksSheetMasterScalarWhereInput
    data: XOR<MarksSheetMasterUpdateManyMutationInput, MarksSheetMasterUncheckedUpdateManyWithoutClassInput>
  }

  export type MarksSheetMasterScalarWhereInput = {
    AND?: MarksSheetMasterScalarWhereInput | MarksSheetMasterScalarWhereInput[]
    OR?: MarksSheetMasterScalarWhereInput[]
    NOT?: MarksSheetMasterScalarWhereInput | MarksSheetMasterScalarWhereInput[]
    id?: IntFilter<"MarksSheetMaster"> | number
    classId?: IntFilter<"MarksSheetMaster"> | number
    sectionId?: IntFilter<"MarksSheetMaster"> | number
    createdAt?: DateTimeFilter<"MarksSheetMaster"> | Date | string
    updatedAt?: DateTimeFilter<"MarksSheetMaster"> | Date | string
  }

  export type ClassCreateWithoutSectionsInput = {
    name: string
    students?: StudentCreateNestedManyWithoutClassInput
    subjects?: SubjectCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutSectionsInput = {
    id?: number
    name: string
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureUncheckedCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutSectionsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutSectionsInput, ClassUncheckedCreateWithoutSectionsInput>
  }

  export type StudentCreateWithoutSectionInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    gender?: MasterDropdownCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    feeDetails?: FeeDetailsCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutSectionInput = {
    id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    genderId?: number | null
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    classId: number
    feeDetails?: FeeDetailsUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSectionInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSectionInput, StudentUncheckedCreateWithoutSectionInput>
  }

  export type StudentCreateManySectionInputEnvelope = {
    data: StudentCreateManySectionInput | StudentCreateManySectionInput[]
    skipDuplicates?: boolean
  }

  export type TimePeriodCreateWithoutSectionInput = {
    periodName: string
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutTimePeriodsInput
    class: ClassCreateNestedOneWithoutTimePeriodsInput
    assignedTeacher: StaffCreateNestedOneWithoutTimePeriodsInput
  }

  export type TimePeriodUncheckedCreateWithoutSectionInput = {
    id?: number
    periodName: string
    subjectId: number
    classId: number
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    teacherId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TimePeriodCreateOrConnectWithoutSectionInput = {
    where: TimePeriodWhereUniqueInput
    create: XOR<TimePeriodCreateWithoutSectionInput, TimePeriodUncheckedCreateWithoutSectionInput>
  }

  export type TimePeriodCreateManySectionInputEnvelope = {
    data: TimePeriodCreateManySectionInput | TimePeriodCreateManySectionInput[]
    skipDuplicates?: boolean
  }

  export type MarksSheetMasterCreateWithoutSectionInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutMarksheetsInput
    subjects?: MarksSubjectCreateNestedManyWithoutMarksheetInput
  }

  export type MarksSheetMasterUncheckedCreateWithoutSectionInput = {
    id?: number
    classId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: MarksSubjectUncheckedCreateNestedManyWithoutMarksheetInput
  }

  export type MarksSheetMasterCreateOrConnectWithoutSectionInput = {
    where: MarksSheetMasterWhereUniqueInput
    create: XOR<MarksSheetMasterCreateWithoutSectionInput, MarksSheetMasterUncheckedCreateWithoutSectionInput>
  }

  export type MarksSheetMasterCreateManySectionInputEnvelope = {
    data: MarksSheetMasterCreateManySectionInput | MarksSheetMasterCreateManySectionInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutSectionsInput = {
    update: XOR<ClassUpdateWithoutSectionsInput, ClassUncheckedUpdateWithoutSectionsInput>
    create: XOR<ClassCreateWithoutSectionsInput, ClassUncheckedCreateWithoutSectionsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutSectionsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutSectionsInput, ClassUncheckedUpdateWithoutSectionsInput>
  }

  export type ClassUpdateWithoutSectionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutClassNestedInput
    subjects?: SubjectUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutSectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUncheckedUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StudentUpsertWithWhereUniqueWithoutSectionInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutSectionInput, StudentUncheckedUpdateWithoutSectionInput>
    create: XOR<StudentCreateWithoutSectionInput, StudentUncheckedCreateWithoutSectionInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutSectionInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutSectionInput, StudentUncheckedUpdateWithoutSectionInput>
  }

  export type StudentUpdateManyWithWhereWithoutSectionInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutSectionInput>
  }

  export type TimePeriodUpsertWithWhereUniqueWithoutSectionInput = {
    where: TimePeriodWhereUniqueInput
    update: XOR<TimePeriodUpdateWithoutSectionInput, TimePeriodUncheckedUpdateWithoutSectionInput>
    create: XOR<TimePeriodCreateWithoutSectionInput, TimePeriodUncheckedCreateWithoutSectionInput>
  }

  export type TimePeriodUpdateWithWhereUniqueWithoutSectionInput = {
    where: TimePeriodWhereUniqueInput
    data: XOR<TimePeriodUpdateWithoutSectionInput, TimePeriodUncheckedUpdateWithoutSectionInput>
  }

  export type TimePeriodUpdateManyWithWhereWithoutSectionInput = {
    where: TimePeriodScalarWhereInput
    data: XOR<TimePeriodUpdateManyMutationInput, TimePeriodUncheckedUpdateManyWithoutSectionInput>
  }

  export type MarksSheetMasterUpsertWithWhereUniqueWithoutSectionInput = {
    where: MarksSheetMasterWhereUniqueInput
    update: XOR<MarksSheetMasterUpdateWithoutSectionInput, MarksSheetMasterUncheckedUpdateWithoutSectionInput>
    create: XOR<MarksSheetMasterCreateWithoutSectionInput, MarksSheetMasterUncheckedCreateWithoutSectionInput>
  }

  export type MarksSheetMasterUpdateWithWhereUniqueWithoutSectionInput = {
    where: MarksSheetMasterWhereUniqueInput
    data: XOR<MarksSheetMasterUpdateWithoutSectionInput, MarksSheetMasterUncheckedUpdateWithoutSectionInput>
  }

  export type MarksSheetMasterUpdateManyWithWhereWithoutSectionInput = {
    where: MarksSheetMasterScalarWhereInput
    data: XOR<MarksSheetMasterUpdateManyMutationInput, MarksSheetMasterUncheckedUpdateManyWithoutSectionInput>
  }

  export type MasterDropdownCreateWithoutStudentsInput = {
    type: string
    value: string
    genderStaff?: StaffCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownUncheckedCreateWithoutStudentsInput = {
    id?: number
    type: string
    value: string
    genderStaff?: StaffUncheckedCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffUncheckedCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffUncheckedCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffUncheckedCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffUncheckedCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemUncheckedCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownCreateOrConnectWithoutStudentsInput = {
    where: MasterDropdownWhereUniqueInput
    create: XOR<MasterDropdownCreateWithoutStudentsInput, MasterDropdownUncheckedCreateWithoutStudentsInput>
  }

  export type ClassCreateWithoutStudentsInput = {
    name: string
    sections?: SectionCreateNestedManyWithoutClassInput
    subjects?: SubjectCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureUncheckedCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type SectionCreateWithoutStudentsInput = {
    name: string
    class: ClassCreateNestedOneWithoutSectionsInput
    timePeriods?: TimePeriodCreateNestedManyWithoutSectionInput
    marksheets?: MarksSheetMasterCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    classId: number
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutSectionInput
    marksheets?: MarksSheetMasterUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutStudentsInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutStudentsInput, SectionUncheckedCreateWithoutStudentsInput>
  }

  export type FeeDetailsCreateWithoutStudentInput = {
    totalFee: number
    discountAmount: number
    totalTerms: number
    remainingAmount: number
    terms?: TermCreateNestedManyWithoutFeeDetailInput
  }

  export type FeeDetailsUncheckedCreateWithoutStudentInput = {
    id?: number
    totalFee: number
    discountAmount: number
    totalTerms: number
    remainingAmount: number
    terms?: TermUncheckedCreateNestedManyWithoutFeeDetailInput
  }

  export type FeeDetailsCreateOrConnectWithoutStudentInput = {
    where: FeeDetailsWhereUniqueInput
    create: XOR<FeeDetailsCreateWithoutStudentInput, FeeDetailsUncheckedCreateWithoutStudentInput>
  }

  export type MasterDropdownUpsertWithoutStudentsInput = {
    update: XOR<MasterDropdownUpdateWithoutStudentsInput, MasterDropdownUncheckedUpdateWithoutStudentsInput>
    create: XOR<MasterDropdownCreateWithoutStudentsInput, MasterDropdownUncheckedCreateWithoutStudentsInput>
    where?: MasterDropdownWhereInput
  }

  export type MasterDropdownUpdateToOneWithWhereWithoutStudentsInput = {
    where?: MasterDropdownWhereInput
    data: XOR<MasterDropdownUpdateWithoutStudentsInput, MasterDropdownUncheckedUpdateWithoutStudentsInput>
  }

  export type MasterDropdownUpdateWithoutStudentsInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    genderStaff?: StaffUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    genderStaff?: StaffUncheckedUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUncheckedUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUncheckedUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUncheckedUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUncheckedUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUncheckedUpdateManyWithoutFeeTypeNestedInput
  }

  export type ClassUpsertWithoutStudentsInput = {
    update: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUpdateManyWithoutClassNestedInput
    subjects?: SubjectUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUncheckedUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUncheckedUpdateManyWithoutClassNestedInput
  }

  export type SectionUpsertWithoutStudentsInput = {
    update: XOR<SectionUpdateWithoutStudentsInput, SectionUncheckedUpdateWithoutStudentsInput>
    create: XOR<SectionCreateWithoutStudentsInput, SectionUncheckedCreateWithoutStudentsInput>
    where?: SectionWhereInput
  }

  export type SectionUpdateToOneWithWhereWithoutStudentsInput = {
    where?: SectionWhereInput
    data: XOR<SectionUpdateWithoutStudentsInput, SectionUncheckedUpdateWithoutStudentsInput>
  }

  export type SectionUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutSectionsNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutSectionNestedInput
    marksheets?: MarksSheetMasterUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutSectionNestedInput
    marksheets?: MarksSheetMasterUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type FeeDetailsUpsertWithoutStudentInput = {
    update: XOR<FeeDetailsUpdateWithoutStudentInput, FeeDetailsUncheckedUpdateWithoutStudentInput>
    create: XOR<FeeDetailsCreateWithoutStudentInput, FeeDetailsUncheckedCreateWithoutStudentInput>
    where?: FeeDetailsWhereInput
  }

  export type FeeDetailsUpdateToOneWithWhereWithoutStudentInput = {
    where?: FeeDetailsWhereInput
    data: XOR<FeeDetailsUpdateWithoutStudentInput, FeeDetailsUncheckedUpdateWithoutStudentInput>
  }

  export type FeeDetailsUpdateWithoutStudentInput = {
    totalFee?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    totalTerms?: IntFieldUpdateOperationsInput | number
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    terms?: TermUpdateManyWithoutFeeDetailNestedInput
  }

  export type FeeDetailsUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalFee?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    totalTerms?: IntFieldUpdateOperationsInput | number
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    terms?: TermUncheckedUpdateManyWithoutFeeDetailNestedInput
  }

  export type StudentCreateWithoutFeeDetailsInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    gender?: MasterDropdownCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    section: SectionCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutFeeDetailsInput = {
    id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    genderId?: number | null
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    classId: number
    sectionId: number
  }

  export type StudentCreateOrConnectWithoutFeeDetailsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutFeeDetailsInput, StudentUncheckedCreateWithoutFeeDetailsInput>
  }

  export type TermCreateWithoutFeeDetailInput = {
    termNumber: number
    amount: number
    dueDate: Date | string
    isPaid: boolean
  }

  export type TermUncheckedCreateWithoutFeeDetailInput = {
    id?: number
    termNumber: number
    amount: number
    dueDate: Date | string
    isPaid: boolean
  }

  export type TermCreateOrConnectWithoutFeeDetailInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutFeeDetailInput, TermUncheckedCreateWithoutFeeDetailInput>
  }

  export type TermCreateManyFeeDetailInputEnvelope = {
    data: TermCreateManyFeeDetailInput | TermCreateManyFeeDetailInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithoutFeeDetailsInput = {
    update: XOR<StudentUpdateWithoutFeeDetailsInput, StudentUncheckedUpdateWithoutFeeDetailsInput>
    create: XOR<StudentCreateWithoutFeeDetailsInput, StudentUncheckedCreateWithoutFeeDetailsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutFeeDetailsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutFeeDetailsInput, StudentUncheckedUpdateWithoutFeeDetailsInput>
  }

  export type StudentUpdateWithoutFeeDetailsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gender?: MasterDropdownUpdateOneWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    section?: SectionUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutFeeDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
  }

  export type TermUpsertWithWhereUniqueWithoutFeeDetailInput = {
    where: TermWhereUniqueInput
    update: XOR<TermUpdateWithoutFeeDetailInput, TermUncheckedUpdateWithoutFeeDetailInput>
    create: XOR<TermCreateWithoutFeeDetailInput, TermUncheckedCreateWithoutFeeDetailInput>
  }

  export type TermUpdateWithWhereUniqueWithoutFeeDetailInput = {
    where: TermWhereUniqueInput
    data: XOR<TermUpdateWithoutFeeDetailInput, TermUncheckedUpdateWithoutFeeDetailInput>
  }

  export type TermUpdateManyWithWhereWithoutFeeDetailInput = {
    where: TermScalarWhereInput
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyWithoutFeeDetailInput>
  }

  export type TermScalarWhereInput = {
    AND?: TermScalarWhereInput | TermScalarWhereInput[]
    OR?: TermScalarWhereInput[]
    NOT?: TermScalarWhereInput | TermScalarWhereInput[]
    id?: IntFilter<"Term"> | number
    feeId?: IntFilter<"Term"> | number
    termNumber?: IntFilter<"Term"> | number
    amount?: FloatFilter<"Term"> | number
    dueDate?: DateTimeFilter<"Term"> | Date | string
    isPaid?: BoolFilter<"Term"> | boolean
  }

  export type FeeDetailsCreateWithoutTermsInput = {
    totalFee: number
    discountAmount: number
    totalTerms: number
    remainingAmount: number
    student: StudentCreateNestedOneWithoutFeeDetailsInput
  }

  export type FeeDetailsUncheckedCreateWithoutTermsInput = {
    id?: number
    studentId: number
    totalFee: number
    discountAmount: number
    totalTerms: number
    remainingAmount: number
  }

  export type FeeDetailsCreateOrConnectWithoutTermsInput = {
    where: FeeDetailsWhereUniqueInput
    create: XOR<FeeDetailsCreateWithoutTermsInput, FeeDetailsUncheckedCreateWithoutTermsInput>
  }

  export type FeeDetailsUpsertWithoutTermsInput = {
    update: XOR<FeeDetailsUpdateWithoutTermsInput, FeeDetailsUncheckedUpdateWithoutTermsInput>
    create: XOR<FeeDetailsCreateWithoutTermsInput, FeeDetailsUncheckedCreateWithoutTermsInput>
    where?: FeeDetailsWhereInput
  }

  export type FeeDetailsUpdateToOneWithWhereWithoutTermsInput = {
    where?: FeeDetailsWhereInput
    data: XOR<FeeDetailsUpdateWithoutTermsInput, FeeDetailsUncheckedUpdateWithoutTermsInput>
  }

  export type FeeDetailsUpdateWithoutTermsInput = {
    totalFee?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    totalTerms?: IntFieldUpdateOperationsInput | number
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutFeeDetailsNestedInput
  }

  export type FeeDetailsUncheckedUpdateWithoutTermsInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    totalFee?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    totalTerms?: IntFieldUpdateOperationsInput | number
    remainingAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type ClassCreateWithoutSubjectsInput = {
    name: string
    sections?: SectionCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutSubjectsInput = {
    id?: number
    name: string
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureUncheckedCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutSubjectsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutSubjectsInput, ClassUncheckedCreateWithoutSubjectsInput>
  }

  export type TimePeriodCreateWithoutSubjectInput = {
    periodName: string
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutTimePeriodsInput
    section: SectionCreateNestedOneWithoutTimePeriodsInput
    assignedTeacher: StaffCreateNestedOneWithoutTimePeriodsInput
  }

  export type TimePeriodUncheckedCreateWithoutSubjectInput = {
    id?: number
    periodName: string
    classId: number
    sectionId: number
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    teacherId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TimePeriodCreateOrConnectWithoutSubjectInput = {
    where: TimePeriodWhereUniqueInput
    create: XOR<TimePeriodCreateWithoutSubjectInput, TimePeriodUncheckedCreateWithoutSubjectInput>
  }

  export type TimePeriodCreateManySubjectInputEnvelope = {
    data: TimePeriodCreateManySubjectInput | TimePeriodCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type MarksSubjectCreateWithoutSubjectInput = {
    maxMarks: number
    passMarks: number
    remark?: string | null
    marksheet: MarksSheetMasterCreateNestedOneWithoutSubjectsInput
  }

  export type MarksSubjectUncheckedCreateWithoutSubjectInput = {
    id?: number
    marksheetId: number
    maxMarks: number
    passMarks: number
    remark?: string | null
  }

  export type MarksSubjectCreateOrConnectWithoutSubjectInput = {
    where: MarksSubjectWhereUniqueInput
    create: XOR<MarksSubjectCreateWithoutSubjectInput, MarksSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type MarksSubjectCreateManySubjectInputEnvelope = {
    data: MarksSubjectCreateManySubjectInput | MarksSubjectCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutSubjectsInput = {
    update: XOR<ClassUpdateWithoutSubjectsInput, ClassUncheckedUpdateWithoutSubjectsInput>
    create: XOR<ClassCreateWithoutSubjectsInput, ClassUncheckedCreateWithoutSubjectsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutSubjectsInput, ClassUncheckedUpdateWithoutSubjectsInput>
  }

  export type ClassUpdateWithoutSubjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUncheckedUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUncheckedUpdateManyWithoutClassNestedInput
  }

  export type TimePeriodUpsertWithWhereUniqueWithoutSubjectInput = {
    where: TimePeriodWhereUniqueInput
    update: XOR<TimePeriodUpdateWithoutSubjectInput, TimePeriodUncheckedUpdateWithoutSubjectInput>
    create: XOR<TimePeriodCreateWithoutSubjectInput, TimePeriodUncheckedCreateWithoutSubjectInput>
  }

  export type TimePeriodUpdateWithWhereUniqueWithoutSubjectInput = {
    where: TimePeriodWhereUniqueInput
    data: XOR<TimePeriodUpdateWithoutSubjectInput, TimePeriodUncheckedUpdateWithoutSubjectInput>
  }

  export type TimePeriodUpdateManyWithWhereWithoutSubjectInput = {
    where: TimePeriodScalarWhereInput
    data: XOR<TimePeriodUpdateManyMutationInput, TimePeriodUncheckedUpdateManyWithoutSubjectInput>
  }

  export type MarksSubjectUpsertWithWhereUniqueWithoutSubjectInput = {
    where: MarksSubjectWhereUniqueInput
    update: XOR<MarksSubjectUpdateWithoutSubjectInput, MarksSubjectUncheckedUpdateWithoutSubjectInput>
    create: XOR<MarksSubjectCreateWithoutSubjectInput, MarksSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type MarksSubjectUpdateWithWhereUniqueWithoutSubjectInput = {
    where: MarksSubjectWhereUniqueInput
    data: XOR<MarksSubjectUpdateWithoutSubjectInput, MarksSubjectUncheckedUpdateWithoutSubjectInput>
  }

  export type MarksSubjectUpdateManyWithWhereWithoutSubjectInput = {
    where: MarksSubjectScalarWhereInput
    data: XOR<MarksSubjectUpdateManyMutationInput, MarksSubjectUncheckedUpdateManyWithoutSubjectInput>
  }

  export type MarksSubjectScalarWhereInput = {
    AND?: MarksSubjectScalarWhereInput | MarksSubjectScalarWhereInput[]
    OR?: MarksSubjectScalarWhereInput[]
    NOT?: MarksSubjectScalarWhereInput | MarksSubjectScalarWhereInput[]
    id?: IntFilter<"MarksSubject"> | number
    marksheetId?: IntFilter<"MarksSubject"> | number
    subjectId?: IntFilter<"MarksSubject"> | number
    maxMarks?: IntFilter<"MarksSubject"> | number
    passMarks?: IntFilter<"MarksSubject"> | number
    remark?: StringNullableFilter<"MarksSubject"> | string | null
  }

  export type StudentCreateWithoutGenderInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    class: ClassCreateNestedOneWithoutStudentsInput
    section: SectionCreateNestedOneWithoutStudentsInput
    feeDetails?: FeeDetailsCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutGenderInput = {
    id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    classId: number
    sectionId: number
    feeDetails?: FeeDetailsUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutGenderInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutGenderInput, StudentUncheckedCreateWithoutGenderInput>
  }

  export type StudentCreateManyGenderInputEnvelope = {
    data: StudentCreateManyGenderInput | StudentCreateManyGenderInput[]
    skipDuplicates?: boolean
  }

  export type StaffCreateWithoutGenderInput = {
    firstName: string
    lastName: string
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qualification?: MasterDropdownCreateNestedOneWithoutQualificationStaffInput
    department?: MasterDropdownCreateNestedOneWithoutDepartmentStaffInput
    designation?: MasterDropdownCreateNestedOneWithoutDesignationStaffInput
    staffType?: MasterDropdownCreateNestedOneWithoutStaffTypeStaffInput
    timePeriods?: TimePeriodCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffUncheckedCreateWithoutGenderInput = {
    id?: number
    firstName: string
    lastName: string
    qualificationId?: number | null
    departmentId?: number | null
    designationId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffCreateOrConnectWithoutGenderInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutGenderInput, StaffUncheckedCreateWithoutGenderInput>
  }

  export type StaffCreateManyGenderInputEnvelope = {
    data: StaffCreateManyGenderInput | StaffCreateManyGenderInput[]
    skipDuplicates?: boolean
  }

  export type StaffCreateWithoutQualificationInput = {
    firstName: string
    lastName: string
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gender?: MasterDropdownCreateNestedOneWithoutGenderStaffInput
    department?: MasterDropdownCreateNestedOneWithoutDepartmentStaffInput
    designation?: MasterDropdownCreateNestedOneWithoutDesignationStaffInput
    staffType?: MasterDropdownCreateNestedOneWithoutStaffTypeStaffInput
    timePeriods?: TimePeriodCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffUncheckedCreateWithoutQualificationInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    departmentId?: number | null
    designationId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffCreateOrConnectWithoutQualificationInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutQualificationInput, StaffUncheckedCreateWithoutQualificationInput>
  }

  export type StaffCreateManyQualificationInputEnvelope = {
    data: StaffCreateManyQualificationInput | StaffCreateManyQualificationInput[]
    skipDuplicates?: boolean
  }

  export type StaffCreateWithoutDepartmentInput = {
    firstName: string
    lastName: string
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gender?: MasterDropdownCreateNestedOneWithoutGenderStaffInput
    qualification?: MasterDropdownCreateNestedOneWithoutQualificationStaffInput
    designation?: MasterDropdownCreateNestedOneWithoutDesignationStaffInput
    staffType?: MasterDropdownCreateNestedOneWithoutStaffTypeStaffInput
    timePeriods?: TimePeriodCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffUncheckedCreateWithoutDepartmentInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    qualificationId?: number | null
    designationId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffCreateOrConnectWithoutDepartmentInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutDepartmentInput, StaffUncheckedCreateWithoutDepartmentInput>
  }

  export type StaffCreateManyDepartmentInputEnvelope = {
    data: StaffCreateManyDepartmentInput | StaffCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type StaffCreateWithoutDesignationInput = {
    firstName: string
    lastName: string
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gender?: MasterDropdownCreateNestedOneWithoutGenderStaffInput
    qualification?: MasterDropdownCreateNestedOneWithoutQualificationStaffInput
    department?: MasterDropdownCreateNestedOneWithoutDepartmentStaffInput
    staffType?: MasterDropdownCreateNestedOneWithoutStaffTypeStaffInput
    timePeriods?: TimePeriodCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffUncheckedCreateWithoutDesignationInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    qualificationId?: number | null
    departmentId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffCreateOrConnectWithoutDesignationInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutDesignationInput, StaffUncheckedCreateWithoutDesignationInput>
  }

  export type StaffCreateManyDesignationInputEnvelope = {
    data: StaffCreateManyDesignationInput | StaffCreateManyDesignationInput[]
    skipDuplicates?: boolean
  }

  export type StaffCreateWithoutStaffTypeInput = {
    firstName: string
    lastName: string
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gender?: MasterDropdownCreateNestedOneWithoutGenderStaffInput
    qualification?: MasterDropdownCreateNestedOneWithoutQualificationStaffInput
    department?: MasterDropdownCreateNestedOneWithoutDepartmentStaffInput
    designation?: MasterDropdownCreateNestedOneWithoutDesignationStaffInput
    timePeriods?: TimePeriodCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffUncheckedCreateWithoutStaffTypeInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    qualificationId?: number | null
    departmentId?: number | null
    designationId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutAssignedTeacherInput
  }

  export type StaffCreateOrConnectWithoutStaffTypeInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutStaffTypeInput, StaffUncheckedCreateWithoutStaffTypeInput>
  }

  export type StaffCreateManyStaffTypeInputEnvelope = {
    data: StaffCreateManyStaffTypeInput | StaffCreateManyStaffTypeInput[]
    skipDuplicates?: boolean
  }

  export type FeeItemCreateWithoutFeeTypeInput = {
    feeName: string
    amount: number
    description?: string | null
    feeStructure: FeeStructureCreateNestedOneWithoutFeeItemsInput
  }

  export type FeeItemUncheckedCreateWithoutFeeTypeInput = {
    id?: number
    feeStructureId: number
    feeName: string
    amount: number
    description?: string | null
  }

  export type FeeItemCreateOrConnectWithoutFeeTypeInput = {
    where: FeeItemWhereUniqueInput
    create: XOR<FeeItemCreateWithoutFeeTypeInput, FeeItemUncheckedCreateWithoutFeeTypeInput>
  }

  export type FeeItemCreateManyFeeTypeInputEnvelope = {
    data: FeeItemCreateManyFeeTypeInput | FeeItemCreateManyFeeTypeInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithWhereUniqueWithoutGenderInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutGenderInput, StudentUncheckedUpdateWithoutGenderInput>
    create: XOR<StudentCreateWithoutGenderInput, StudentUncheckedCreateWithoutGenderInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutGenderInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutGenderInput, StudentUncheckedUpdateWithoutGenderInput>
  }

  export type StudentUpdateManyWithWhereWithoutGenderInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutGenderInput>
  }

  export type StaffUpsertWithWhereUniqueWithoutGenderInput = {
    where: StaffWhereUniqueInput
    update: XOR<StaffUpdateWithoutGenderInput, StaffUncheckedUpdateWithoutGenderInput>
    create: XOR<StaffCreateWithoutGenderInput, StaffUncheckedCreateWithoutGenderInput>
  }

  export type StaffUpdateWithWhereUniqueWithoutGenderInput = {
    where: StaffWhereUniqueInput
    data: XOR<StaffUpdateWithoutGenderInput, StaffUncheckedUpdateWithoutGenderInput>
  }

  export type StaffUpdateManyWithWhereWithoutGenderInput = {
    where: StaffScalarWhereInput
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyWithoutGenderInput>
  }

  export type StaffScalarWhereInput = {
    AND?: StaffScalarWhereInput | StaffScalarWhereInput[]
    OR?: StaffScalarWhereInput[]
    NOT?: StaffScalarWhereInput | StaffScalarWhereInput[]
    id?: IntFilter<"Staff"> | number
    firstName?: StringFilter<"Staff"> | string
    lastName?: StringFilter<"Staff"> | string
    genderId?: IntNullableFilter<"Staff"> | number | null
    qualificationId?: IntNullableFilter<"Staff"> | number | null
    departmentId?: IntNullableFilter<"Staff"> | number | null
    designationId?: IntNullableFilter<"Staff"> | number | null
    staffTypeId?: IntNullableFilter<"Staff"> | number | null
    experience?: StringNullableFilter<"Staff"> | string | null
    mobileNumber?: StringNullableFilter<"Staff"> | string | null
    email?: StringNullableFilter<"Staff"> | string | null
    username?: StringFilter<"Staff"> | string
    password?: StringFilter<"Staff"> | string
    salary?: FloatNullableFilter<"Staff"> | number | null
    isActive?: BoolFilter<"Staff"> | boolean
    isTransportRequired?: BoolNullableFilter<"Staff"> | boolean | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
  }

  export type StaffUpsertWithWhereUniqueWithoutQualificationInput = {
    where: StaffWhereUniqueInput
    update: XOR<StaffUpdateWithoutQualificationInput, StaffUncheckedUpdateWithoutQualificationInput>
    create: XOR<StaffCreateWithoutQualificationInput, StaffUncheckedCreateWithoutQualificationInput>
  }

  export type StaffUpdateWithWhereUniqueWithoutQualificationInput = {
    where: StaffWhereUniqueInput
    data: XOR<StaffUpdateWithoutQualificationInput, StaffUncheckedUpdateWithoutQualificationInput>
  }

  export type StaffUpdateManyWithWhereWithoutQualificationInput = {
    where: StaffScalarWhereInput
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyWithoutQualificationInput>
  }

  export type StaffUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: StaffWhereUniqueInput
    update: XOR<StaffUpdateWithoutDepartmentInput, StaffUncheckedUpdateWithoutDepartmentInput>
    create: XOR<StaffCreateWithoutDepartmentInput, StaffUncheckedCreateWithoutDepartmentInput>
  }

  export type StaffUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: StaffWhereUniqueInput
    data: XOR<StaffUpdateWithoutDepartmentInput, StaffUncheckedUpdateWithoutDepartmentInput>
  }

  export type StaffUpdateManyWithWhereWithoutDepartmentInput = {
    where: StaffScalarWhereInput
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type StaffUpsertWithWhereUniqueWithoutDesignationInput = {
    where: StaffWhereUniqueInput
    update: XOR<StaffUpdateWithoutDesignationInput, StaffUncheckedUpdateWithoutDesignationInput>
    create: XOR<StaffCreateWithoutDesignationInput, StaffUncheckedCreateWithoutDesignationInput>
  }

  export type StaffUpdateWithWhereUniqueWithoutDesignationInput = {
    where: StaffWhereUniqueInput
    data: XOR<StaffUpdateWithoutDesignationInput, StaffUncheckedUpdateWithoutDesignationInput>
  }

  export type StaffUpdateManyWithWhereWithoutDesignationInput = {
    where: StaffScalarWhereInput
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyWithoutDesignationInput>
  }

  export type StaffUpsertWithWhereUniqueWithoutStaffTypeInput = {
    where: StaffWhereUniqueInput
    update: XOR<StaffUpdateWithoutStaffTypeInput, StaffUncheckedUpdateWithoutStaffTypeInput>
    create: XOR<StaffCreateWithoutStaffTypeInput, StaffUncheckedCreateWithoutStaffTypeInput>
  }

  export type StaffUpdateWithWhereUniqueWithoutStaffTypeInput = {
    where: StaffWhereUniqueInput
    data: XOR<StaffUpdateWithoutStaffTypeInput, StaffUncheckedUpdateWithoutStaffTypeInput>
  }

  export type StaffUpdateManyWithWhereWithoutStaffTypeInput = {
    where: StaffScalarWhereInput
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyWithoutStaffTypeInput>
  }

  export type FeeItemUpsertWithWhereUniqueWithoutFeeTypeInput = {
    where: FeeItemWhereUniqueInput
    update: XOR<FeeItemUpdateWithoutFeeTypeInput, FeeItemUncheckedUpdateWithoutFeeTypeInput>
    create: XOR<FeeItemCreateWithoutFeeTypeInput, FeeItemUncheckedCreateWithoutFeeTypeInput>
  }

  export type FeeItemUpdateWithWhereUniqueWithoutFeeTypeInput = {
    where: FeeItemWhereUniqueInput
    data: XOR<FeeItemUpdateWithoutFeeTypeInput, FeeItemUncheckedUpdateWithoutFeeTypeInput>
  }

  export type FeeItemUpdateManyWithWhereWithoutFeeTypeInput = {
    where: FeeItemScalarWhereInput
    data: XOR<FeeItemUpdateManyMutationInput, FeeItemUncheckedUpdateManyWithoutFeeTypeInput>
  }

  export type FeeItemScalarWhereInput = {
    AND?: FeeItemScalarWhereInput | FeeItemScalarWhereInput[]
    OR?: FeeItemScalarWhereInput[]
    NOT?: FeeItemScalarWhereInput | FeeItemScalarWhereInput[]
    id?: IntFilter<"FeeItem"> | number
    feeStructureId?: IntFilter<"FeeItem"> | number
    feeTypeId?: IntFilter<"FeeItem"> | number
    feeName?: StringFilter<"FeeItem"> | string
    amount?: FloatFilter<"FeeItem"> | number
    description?: StringNullableFilter<"FeeItem"> | string | null
  }

  export type MasterDropdownCreateWithoutGenderStaffInput = {
    type: string
    value: string
    students?: StudentCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownUncheckedCreateWithoutGenderStaffInput = {
    id?: number
    type: string
    value: string
    students?: StudentUncheckedCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffUncheckedCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffUncheckedCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffUncheckedCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffUncheckedCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemUncheckedCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownCreateOrConnectWithoutGenderStaffInput = {
    where: MasterDropdownWhereUniqueInput
    create: XOR<MasterDropdownCreateWithoutGenderStaffInput, MasterDropdownUncheckedCreateWithoutGenderStaffInput>
  }

  export type MasterDropdownCreateWithoutQualificationStaffInput = {
    type: string
    value: string
    students?: StudentCreateNestedManyWithoutGenderInput
    genderStaff?: StaffCreateNestedManyWithoutGenderInput
    departmentStaff?: StaffCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownUncheckedCreateWithoutQualificationStaffInput = {
    id?: number
    type: string
    value: string
    students?: StudentUncheckedCreateNestedManyWithoutGenderInput
    genderStaff?: StaffUncheckedCreateNestedManyWithoutGenderInput
    departmentStaff?: StaffUncheckedCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffUncheckedCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffUncheckedCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemUncheckedCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownCreateOrConnectWithoutQualificationStaffInput = {
    where: MasterDropdownWhereUniqueInput
    create: XOR<MasterDropdownCreateWithoutQualificationStaffInput, MasterDropdownUncheckedCreateWithoutQualificationStaffInput>
  }

  export type MasterDropdownCreateWithoutDepartmentStaffInput = {
    type: string
    value: string
    students?: StudentCreateNestedManyWithoutGenderInput
    genderStaff?: StaffCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffCreateNestedManyWithoutQualificationInput
    designationStaff?: StaffCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownUncheckedCreateWithoutDepartmentStaffInput = {
    id?: number
    type: string
    value: string
    students?: StudentUncheckedCreateNestedManyWithoutGenderInput
    genderStaff?: StaffUncheckedCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffUncheckedCreateNestedManyWithoutQualificationInput
    designationStaff?: StaffUncheckedCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffUncheckedCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemUncheckedCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownCreateOrConnectWithoutDepartmentStaffInput = {
    where: MasterDropdownWhereUniqueInput
    create: XOR<MasterDropdownCreateWithoutDepartmentStaffInput, MasterDropdownUncheckedCreateWithoutDepartmentStaffInput>
  }

  export type MasterDropdownCreateWithoutDesignationStaffInput = {
    type: string
    value: string
    students?: StudentCreateNestedManyWithoutGenderInput
    genderStaff?: StaffCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffCreateNestedManyWithoutDepartmentInput
    staffTypeStaff?: StaffCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownUncheckedCreateWithoutDesignationStaffInput = {
    id?: number
    type: string
    value: string
    students?: StudentUncheckedCreateNestedManyWithoutGenderInput
    genderStaff?: StaffUncheckedCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffUncheckedCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffUncheckedCreateNestedManyWithoutDepartmentInput
    staffTypeStaff?: StaffUncheckedCreateNestedManyWithoutStaffTypeInput
    feeItems?: FeeItemUncheckedCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownCreateOrConnectWithoutDesignationStaffInput = {
    where: MasterDropdownWhereUniqueInput
    create: XOR<MasterDropdownCreateWithoutDesignationStaffInput, MasterDropdownUncheckedCreateWithoutDesignationStaffInput>
  }

  export type MasterDropdownCreateWithoutStaffTypeStaffInput = {
    type: string
    value: string
    students?: StudentCreateNestedManyWithoutGenderInput
    genderStaff?: StaffCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffCreateNestedManyWithoutDesignationInput
    feeItems?: FeeItemCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownUncheckedCreateWithoutStaffTypeStaffInput = {
    id?: number
    type: string
    value: string
    students?: StudentUncheckedCreateNestedManyWithoutGenderInput
    genderStaff?: StaffUncheckedCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffUncheckedCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffUncheckedCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffUncheckedCreateNestedManyWithoutDesignationInput
    feeItems?: FeeItemUncheckedCreateNestedManyWithoutFeeTypeInput
  }

  export type MasterDropdownCreateOrConnectWithoutStaffTypeStaffInput = {
    where: MasterDropdownWhereUniqueInput
    create: XOR<MasterDropdownCreateWithoutStaffTypeStaffInput, MasterDropdownUncheckedCreateWithoutStaffTypeStaffInput>
  }

  export type TimePeriodCreateWithoutAssignedTeacherInput = {
    periodName: string
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutTimePeriodsInput
    class: ClassCreateNestedOneWithoutTimePeriodsInput
    section: SectionCreateNestedOneWithoutTimePeriodsInput
  }

  export type TimePeriodUncheckedCreateWithoutAssignedTeacherInput = {
    id?: number
    periodName: string
    subjectId: number
    classId: number
    sectionId: number
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TimePeriodCreateOrConnectWithoutAssignedTeacherInput = {
    where: TimePeriodWhereUniqueInput
    create: XOR<TimePeriodCreateWithoutAssignedTeacherInput, TimePeriodUncheckedCreateWithoutAssignedTeacherInput>
  }

  export type TimePeriodCreateManyAssignedTeacherInputEnvelope = {
    data: TimePeriodCreateManyAssignedTeacherInput | TimePeriodCreateManyAssignedTeacherInput[]
    skipDuplicates?: boolean
  }

  export type MasterDropdownUpsertWithoutGenderStaffInput = {
    update: XOR<MasterDropdownUpdateWithoutGenderStaffInput, MasterDropdownUncheckedUpdateWithoutGenderStaffInput>
    create: XOR<MasterDropdownCreateWithoutGenderStaffInput, MasterDropdownUncheckedCreateWithoutGenderStaffInput>
    where?: MasterDropdownWhereInput
  }

  export type MasterDropdownUpdateToOneWithWhereWithoutGenderStaffInput = {
    where?: MasterDropdownWhereInput
    data: XOR<MasterDropdownUpdateWithoutGenderStaffInput, MasterDropdownUncheckedUpdateWithoutGenderStaffInput>
  }

  export type MasterDropdownUpdateWithoutGenderStaffInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUncheckedUpdateWithoutGenderStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUncheckedUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUncheckedUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUncheckedUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUncheckedUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUncheckedUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUpsertWithoutQualificationStaffInput = {
    update: XOR<MasterDropdownUpdateWithoutQualificationStaffInput, MasterDropdownUncheckedUpdateWithoutQualificationStaffInput>
    create: XOR<MasterDropdownCreateWithoutQualificationStaffInput, MasterDropdownUncheckedCreateWithoutQualificationStaffInput>
    where?: MasterDropdownWhereInput
  }

  export type MasterDropdownUpdateToOneWithWhereWithoutQualificationStaffInput = {
    where?: MasterDropdownWhereInput
    data: XOR<MasterDropdownUpdateWithoutQualificationStaffInput, MasterDropdownUncheckedUpdateWithoutQualificationStaffInput>
  }

  export type MasterDropdownUpdateWithoutQualificationStaffInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUpdateManyWithoutGenderNestedInput
    departmentStaff?: StaffUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUncheckedUpdateWithoutQualificationStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUncheckedUpdateManyWithoutGenderNestedInput
    departmentStaff?: StaffUncheckedUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUncheckedUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUncheckedUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUncheckedUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUpsertWithoutDepartmentStaffInput = {
    update: XOR<MasterDropdownUpdateWithoutDepartmentStaffInput, MasterDropdownUncheckedUpdateWithoutDepartmentStaffInput>
    create: XOR<MasterDropdownCreateWithoutDepartmentStaffInput, MasterDropdownUncheckedCreateWithoutDepartmentStaffInput>
    where?: MasterDropdownWhereInput
  }

  export type MasterDropdownUpdateToOneWithWhereWithoutDepartmentStaffInput = {
    where?: MasterDropdownWhereInput
    data: XOR<MasterDropdownUpdateWithoutDepartmentStaffInput, MasterDropdownUncheckedUpdateWithoutDepartmentStaffInput>
  }

  export type MasterDropdownUpdateWithoutDepartmentStaffInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUpdateManyWithoutQualificationNestedInput
    designationStaff?: StaffUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUncheckedUpdateWithoutDepartmentStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUncheckedUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUncheckedUpdateManyWithoutQualificationNestedInput
    designationStaff?: StaffUncheckedUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUncheckedUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUncheckedUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUpsertWithoutDesignationStaffInput = {
    update: XOR<MasterDropdownUpdateWithoutDesignationStaffInput, MasterDropdownUncheckedUpdateWithoutDesignationStaffInput>
    create: XOR<MasterDropdownCreateWithoutDesignationStaffInput, MasterDropdownUncheckedCreateWithoutDesignationStaffInput>
    where?: MasterDropdownWhereInput
  }

  export type MasterDropdownUpdateToOneWithWhereWithoutDesignationStaffInput = {
    where?: MasterDropdownWhereInput
    data: XOR<MasterDropdownUpdateWithoutDesignationStaffInput, MasterDropdownUncheckedUpdateWithoutDesignationStaffInput>
  }

  export type MasterDropdownUpdateWithoutDesignationStaffInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUpdateManyWithoutDepartmentNestedInput
    staffTypeStaff?: StaffUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUncheckedUpdateWithoutDesignationStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUncheckedUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUncheckedUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUncheckedUpdateManyWithoutDepartmentNestedInput
    staffTypeStaff?: StaffUncheckedUpdateManyWithoutStaffTypeNestedInput
    feeItems?: FeeItemUncheckedUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUpsertWithoutStaffTypeStaffInput = {
    update: XOR<MasterDropdownUpdateWithoutStaffTypeStaffInput, MasterDropdownUncheckedUpdateWithoutStaffTypeStaffInput>
    create: XOR<MasterDropdownCreateWithoutStaffTypeStaffInput, MasterDropdownUncheckedCreateWithoutStaffTypeStaffInput>
    where?: MasterDropdownWhereInput
  }

  export type MasterDropdownUpdateToOneWithWhereWithoutStaffTypeStaffInput = {
    where?: MasterDropdownWhereInput
    data: XOR<MasterDropdownUpdateWithoutStaffTypeStaffInput, MasterDropdownUncheckedUpdateWithoutStaffTypeStaffInput>
  }

  export type MasterDropdownUpdateWithoutStaffTypeStaffInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUpdateManyWithoutDesignationNestedInput
    feeItems?: FeeItemUpdateManyWithoutFeeTypeNestedInput
  }

  export type MasterDropdownUncheckedUpdateWithoutStaffTypeStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUncheckedUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUncheckedUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUncheckedUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUncheckedUpdateManyWithoutDesignationNestedInput
    feeItems?: FeeItemUncheckedUpdateManyWithoutFeeTypeNestedInput
  }

  export type TimePeriodUpsertWithWhereUniqueWithoutAssignedTeacherInput = {
    where: TimePeriodWhereUniqueInput
    update: XOR<TimePeriodUpdateWithoutAssignedTeacherInput, TimePeriodUncheckedUpdateWithoutAssignedTeacherInput>
    create: XOR<TimePeriodCreateWithoutAssignedTeacherInput, TimePeriodUncheckedCreateWithoutAssignedTeacherInput>
  }

  export type TimePeriodUpdateWithWhereUniqueWithoutAssignedTeacherInput = {
    where: TimePeriodWhereUniqueInput
    data: XOR<TimePeriodUpdateWithoutAssignedTeacherInput, TimePeriodUncheckedUpdateWithoutAssignedTeacherInput>
  }

  export type TimePeriodUpdateManyWithWhereWithoutAssignedTeacherInput = {
    where: TimePeriodScalarWhereInput
    data: XOR<TimePeriodUpdateManyMutationInput, TimePeriodUncheckedUpdateManyWithoutAssignedTeacherInput>
  }

  export type SubjectCreateWithoutTimePeriodsInput = {
    name: string
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutSubjectsInput
    marksheets?: MarksSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutTimePeriodsInput = {
    id?: number
    name: string
    code?: string | null
    classId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    marksheets?: MarksSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutTimePeriodsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutTimePeriodsInput, SubjectUncheckedCreateWithoutTimePeriodsInput>
  }

  export type ClassCreateWithoutTimePeriodsInput = {
    name: string
    sections?: SectionCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    subjects?: SubjectCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutTimePeriodsInput = {
    id?: number
    name: string
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureUncheckedCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutTimePeriodsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutTimePeriodsInput, ClassUncheckedCreateWithoutTimePeriodsInput>
  }

  export type SectionCreateWithoutTimePeriodsInput = {
    name: string
    class: ClassCreateNestedOneWithoutSectionsInput
    students?: StudentCreateNestedManyWithoutSectionInput
    marksheets?: MarksSheetMasterCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutTimePeriodsInput = {
    id?: number
    name: string
    classId: number
    students?: StudentUncheckedCreateNestedManyWithoutSectionInput
    marksheets?: MarksSheetMasterUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutTimePeriodsInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutTimePeriodsInput, SectionUncheckedCreateWithoutTimePeriodsInput>
  }

  export type StaffCreateWithoutTimePeriodsInput = {
    firstName: string
    lastName: string
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gender?: MasterDropdownCreateNestedOneWithoutGenderStaffInput
    qualification?: MasterDropdownCreateNestedOneWithoutQualificationStaffInput
    department?: MasterDropdownCreateNestedOneWithoutDepartmentStaffInput
    designation?: MasterDropdownCreateNestedOneWithoutDesignationStaffInput
    staffType?: MasterDropdownCreateNestedOneWithoutStaffTypeStaffInput
  }

  export type StaffUncheckedCreateWithoutTimePeriodsInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    qualificationId?: number | null
    departmentId?: number | null
    designationId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCreateOrConnectWithoutTimePeriodsInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutTimePeriodsInput, StaffUncheckedCreateWithoutTimePeriodsInput>
  }

  export type SubjectUpsertWithoutTimePeriodsInput = {
    update: XOR<SubjectUpdateWithoutTimePeriodsInput, SubjectUncheckedUpdateWithoutTimePeriodsInput>
    create: XOR<SubjectCreateWithoutTimePeriodsInput, SubjectUncheckedCreateWithoutTimePeriodsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutTimePeriodsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutTimePeriodsInput, SubjectUncheckedUpdateWithoutTimePeriodsInput>
  }

  export type SubjectUpdateWithoutTimePeriodsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutSubjectsNestedInput
    marksheets?: MarksSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutTimePeriodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    marksheets?: MarksSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type ClassUpsertWithoutTimePeriodsInput = {
    update: XOR<ClassUpdateWithoutTimePeriodsInput, ClassUncheckedUpdateWithoutTimePeriodsInput>
    create: XOR<ClassCreateWithoutTimePeriodsInput, ClassUncheckedCreateWithoutTimePeriodsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutTimePeriodsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutTimePeriodsInput, ClassUncheckedUpdateWithoutTimePeriodsInput>
  }

  export type ClassUpdateWithoutTimePeriodsInput = {
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    subjects?: SubjectUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutTimePeriodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUncheckedUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUncheckedUpdateManyWithoutClassNestedInput
  }

  export type SectionUpsertWithoutTimePeriodsInput = {
    update: XOR<SectionUpdateWithoutTimePeriodsInput, SectionUncheckedUpdateWithoutTimePeriodsInput>
    create: XOR<SectionCreateWithoutTimePeriodsInput, SectionUncheckedCreateWithoutTimePeriodsInput>
    where?: SectionWhereInput
  }

  export type SectionUpdateToOneWithWhereWithoutTimePeriodsInput = {
    where?: SectionWhereInput
    data: XOR<SectionUpdateWithoutTimePeriodsInput, SectionUncheckedUpdateWithoutTimePeriodsInput>
  }

  export type SectionUpdateWithoutTimePeriodsInput = {
    name?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutSectionsNestedInput
    students?: StudentUpdateManyWithoutSectionNestedInput
    marksheets?: MarksSheetMasterUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutTimePeriodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    students?: StudentUncheckedUpdateManyWithoutSectionNestedInput
    marksheets?: MarksSheetMasterUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type StaffUpsertWithoutTimePeriodsInput = {
    update: XOR<StaffUpdateWithoutTimePeriodsInput, StaffUncheckedUpdateWithoutTimePeriodsInput>
    create: XOR<StaffCreateWithoutTimePeriodsInput, StaffUncheckedCreateWithoutTimePeriodsInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutTimePeriodsInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutTimePeriodsInput, StaffUncheckedUpdateWithoutTimePeriodsInput>
  }

  export type StaffUpdateWithoutTimePeriodsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: MasterDropdownUpdateOneWithoutGenderStaffNestedInput
    qualification?: MasterDropdownUpdateOneWithoutQualificationStaffNestedInput
    department?: MasterDropdownUpdateOneWithoutDepartmentStaffNestedInput
    designation?: MasterDropdownUpdateOneWithoutDesignationStaffNestedInput
    staffType?: MasterDropdownUpdateOneWithoutStaffTypeStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutTimePeriodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassCreateWithoutFeeStructuresInput = {
    name: string
    sections?: SectionCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    subjects?: SubjectCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutFeeStructuresInput = {
    id?: number
    name: string
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutClassInput
    marksheets?: MarksSheetMasterUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutFeeStructuresInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutFeeStructuresInput, ClassUncheckedCreateWithoutFeeStructuresInput>
  }

  export type FeeItemCreateWithoutFeeStructureInput = {
    feeName: string
    amount: number
    description?: string | null
    feeType: MasterDropdownCreateNestedOneWithoutFeeItemsInput
  }

  export type FeeItemUncheckedCreateWithoutFeeStructureInput = {
    id?: number
    feeTypeId: number
    feeName: string
    amount: number
    description?: string | null
  }

  export type FeeItemCreateOrConnectWithoutFeeStructureInput = {
    where: FeeItemWhereUniqueInput
    create: XOR<FeeItemCreateWithoutFeeStructureInput, FeeItemUncheckedCreateWithoutFeeStructureInput>
  }

  export type FeeItemCreateManyFeeStructureInputEnvelope = {
    data: FeeItemCreateManyFeeStructureInput | FeeItemCreateManyFeeStructureInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutFeeStructuresInput = {
    update: XOR<ClassUpdateWithoutFeeStructuresInput, ClassUncheckedUpdateWithoutFeeStructuresInput>
    create: XOR<ClassCreateWithoutFeeStructuresInput, ClassUncheckedCreateWithoutFeeStructuresInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutFeeStructuresInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutFeeStructuresInput, ClassUncheckedUpdateWithoutFeeStructuresInput>
  }

  export type ClassUpdateWithoutFeeStructuresInput = {
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    subjects?: SubjectUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutFeeStructuresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutClassNestedInput
    marksheets?: MarksSheetMasterUncheckedUpdateManyWithoutClassNestedInput
  }

  export type FeeItemUpsertWithWhereUniqueWithoutFeeStructureInput = {
    where: FeeItemWhereUniqueInput
    update: XOR<FeeItemUpdateWithoutFeeStructureInput, FeeItemUncheckedUpdateWithoutFeeStructureInput>
    create: XOR<FeeItemCreateWithoutFeeStructureInput, FeeItemUncheckedCreateWithoutFeeStructureInput>
  }

  export type FeeItemUpdateWithWhereUniqueWithoutFeeStructureInput = {
    where: FeeItemWhereUniqueInput
    data: XOR<FeeItemUpdateWithoutFeeStructureInput, FeeItemUncheckedUpdateWithoutFeeStructureInput>
  }

  export type FeeItemUpdateManyWithWhereWithoutFeeStructureInput = {
    where: FeeItemScalarWhereInput
    data: XOR<FeeItemUpdateManyMutationInput, FeeItemUncheckedUpdateManyWithoutFeeStructureInput>
  }

  export type FeeStructureCreateWithoutFeeItemsInput = {
    academicYear: string
    numberOfTerms: number
    isActive?: boolean
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutFeeStructuresInput
  }

  export type FeeStructureUncheckedCreateWithoutFeeItemsInput = {
    id?: number
    classId: number
    academicYear: string
    numberOfTerms: number
    isActive?: boolean
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeeStructureCreateOrConnectWithoutFeeItemsInput = {
    where: FeeStructureWhereUniqueInput
    create: XOR<FeeStructureCreateWithoutFeeItemsInput, FeeStructureUncheckedCreateWithoutFeeItemsInput>
  }

  export type MasterDropdownCreateWithoutFeeItemsInput = {
    type: string
    value: string
    students?: StudentCreateNestedManyWithoutGenderInput
    genderStaff?: StaffCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffCreateNestedManyWithoutStaffTypeInput
  }

  export type MasterDropdownUncheckedCreateWithoutFeeItemsInput = {
    id?: number
    type: string
    value: string
    students?: StudentUncheckedCreateNestedManyWithoutGenderInput
    genderStaff?: StaffUncheckedCreateNestedManyWithoutGenderInput
    qualificationStaff?: StaffUncheckedCreateNestedManyWithoutQualificationInput
    departmentStaff?: StaffUncheckedCreateNestedManyWithoutDepartmentInput
    designationStaff?: StaffUncheckedCreateNestedManyWithoutDesignationInput
    staffTypeStaff?: StaffUncheckedCreateNestedManyWithoutStaffTypeInput
  }

  export type MasterDropdownCreateOrConnectWithoutFeeItemsInput = {
    where: MasterDropdownWhereUniqueInput
    create: XOR<MasterDropdownCreateWithoutFeeItemsInput, MasterDropdownUncheckedCreateWithoutFeeItemsInput>
  }

  export type FeeStructureUpsertWithoutFeeItemsInput = {
    update: XOR<FeeStructureUpdateWithoutFeeItemsInput, FeeStructureUncheckedUpdateWithoutFeeItemsInput>
    create: XOR<FeeStructureCreateWithoutFeeItemsInput, FeeStructureUncheckedCreateWithoutFeeItemsInput>
    where?: FeeStructureWhereInput
  }

  export type FeeStructureUpdateToOneWithWhereWithoutFeeItemsInput = {
    where?: FeeStructureWhereInput
    data: XOR<FeeStructureUpdateWithoutFeeItemsInput, FeeStructureUncheckedUpdateWithoutFeeItemsInput>
  }

  export type FeeStructureUpdateWithoutFeeItemsInput = {
    academicYear?: StringFieldUpdateOperationsInput | string
    numberOfTerms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutFeeStructuresNestedInput
  }

  export type FeeStructureUncheckedUpdateWithoutFeeItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    academicYear?: StringFieldUpdateOperationsInput | string
    numberOfTerms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterDropdownUpsertWithoutFeeItemsInput = {
    update: XOR<MasterDropdownUpdateWithoutFeeItemsInput, MasterDropdownUncheckedUpdateWithoutFeeItemsInput>
    create: XOR<MasterDropdownCreateWithoutFeeItemsInput, MasterDropdownUncheckedCreateWithoutFeeItemsInput>
    where?: MasterDropdownWhereInput
  }

  export type MasterDropdownUpdateToOneWithWhereWithoutFeeItemsInput = {
    where?: MasterDropdownWhereInput
    data: XOR<MasterDropdownUpdateWithoutFeeItemsInput, MasterDropdownUncheckedUpdateWithoutFeeItemsInput>
  }

  export type MasterDropdownUpdateWithoutFeeItemsInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUpdateManyWithoutStaffTypeNestedInput
  }

  export type MasterDropdownUncheckedUpdateWithoutFeeItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutGenderNestedInput
    genderStaff?: StaffUncheckedUpdateManyWithoutGenderNestedInput
    qualificationStaff?: StaffUncheckedUpdateManyWithoutQualificationNestedInput
    departmentStaff?: StaffUncheckedUpdateManyWithoutDepartmentNestedInput
    designationStaff?: StaffUncheckedUpdateManyWithoutDesignationNestedInput
    staffTypeStaff?: StaffUncheckedUpdateManyWithoutStaffTypeNestedInput
  }

  export type ClassCreateWithoutMarksheetsInput = {
    name: string
    sections?: SectionCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    subjects?: SubjectCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutMarksheetsInput = {
    id?: number
    name: string
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutClassInput
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutClassInput
    feeStructures?: FeeStructureUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutMarksheetsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutMarksheetsInput, ClassUncheckedCreateWithoutMarksheetsInput>
  }

  export type SectionCreateWithoutMarksheetsInput = {
    name: string
    class: ClassCreateNestedOneWithoutSectionsInput
    students?: StudentCreateNestedManyWithoutSectionInput
    timePeriods?: TimePeriodCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutMarksheetsInput = {
    id?: number
    name: string
    classId: number
    students?: StudentUncheckedCreateNestedManyWithoutSectionInput
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutMarksheetsInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutMarksheetsInput, SectionUncheckedCreateWithoutMarksheetsInput>
  }

  export type MarksSubjectCreateWithoutMarksheetInput = {
    maxMarks: number
    passMarks: number
    remark?: string | null
    subject: SubjectCreateNestedOneWithoutMarksheetsInput
  }

  export type MarksSubjectUncheckedCreateWithoutMarksheetInput = {
    id?: number
    subjectId: number
    maxMarks: number
    passMarks: number
    remark?: string | null
  }

  export type MarksSubjectCreateOrConnectWithoutMarksheetInput = {
    where: MarksSubjectWhereUniqueInput
    create: XOR<MarksSubjectCreateWithoutMarksheetInput, MarksSubjectUncheckedCreateWithoutMarksheetInput>
  }

  export type MarksSubjectCreateManyMarksheetInputEnvelope = {
    data: MarksSubjectCreateManyMarksheetInput | MarksSubjectCreateManyMarksheetInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutMarksheetsInput = {
    update: XOR<ClassUpdateWithoutMarksheetsInput, ClassUncheckedUpdateWithoutMarksheetsInput>
    create: XOR<ClassCreateWithoutMarksheetsInput, ClassUncheckedCreateWithoutMarksheetsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutMarksheetsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutMarksheetsInput, ClassUncheckedUpdateWithoutMarksheetsInput>
  }

  export type ClassUpdateWithoutMarksheetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    subjects?: SubjectUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutMarksheetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutClassNestedInput
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutClassNestedInput
    feeStructures?: FeeStructureUncheckedUpdateManyWithoutClassNestedInput
  }

  export type SectionUpsertWithoutMarksheetsInput = {
    update: XOR<SectionUpdateWithoutMarksheetsInput, SectionUncheckedUpdateWithoutMarksheetsInput>
    create: XOR<SectionCreateWithoutMarksheetsInput, SectionUncheckedCreateWithoutMarksheetsInput>
    where?: SectionWhereInput
  }

  export type SectionUpdateToOneWithWhereWithoutMarksheetsInput = {
    where?: SectionWhereInput
    data: XOR<SectionUpdateWithoutMarksheetsInput, SectionUncheckedUpdateWithoutMarksheetsInput>
  }

  export type SectionUpdateWithoutMarksheetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutSectionsNestedInput
    students?: StudentUpdateManyWithoutSectionNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutMarksheetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    students?: StudentUncheckedUpdateManyWithoutSectionNestedInput
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type MarksSubjectUpsertWithWhereUniqueWithoutMarksheetInput = {
    where: MarksSubjectWhereUniqueInput
    update: XOR<MarksSubjectUpdateWithoutMarksheetInput, MarksSubjectUncheckedUpdateWithoutMarksheetInput>
    create: XOR<MarksSubjectCreateWithoutMarksheetInput, MarksSubjectUncheckedCreateWithoutMarksheetInput>
  }

  export type MarksSubjectUpdateWithWhereUniqueWithoutMarksheetInput = {
    where: MarksSubjectWhereUniqueInput
    data: XOR<MarksSubjectUpdateWithoutMarksheetInput, MarksSubjectUncheckedUpdateWithoutMarksheetInput>
  }

  export type MarksSubjectUpdateManyWithWhereWithoutMarksheetInput = {
    where: MarksSubjectScalarWhereInput
    data: XOR<MarksSubjectUpdateManyMutationInput, MarksSubjectUncheckedUpdateManyWithoutMarksheetInput>
  }

  export type MarksSheetMasterCreateWithoutSubjectsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutMarksheetsInput
    section: SectionCreateNestedOneWithoutMarksheetsInput
  }

  export type MarksSheetMasterUncheckedCreateWithoutSubjectsInput = {
    id?: number
    classId: number
    sectionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarksSheetMasterCreateOrConnectWithoutSubjectsInput = {
    where: MarksSheetMasterWhereUniqueInput
    create: XOR<MarksSheetMasterCreateWithoutSubjectsInput, MarksSheetMasterUncheckedCreateWithoutSubjectsInput>
  }

  export type SubjectCreateWithoutMarksheetsInput = {
    name: string
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    class: ClassCreateNestedOneWithoutSubjectsInput
    timePeriods?: TimePeriodCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutMarksheetsInput = {
    id?: number
    name: string
    code?: string | null
    classId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    timePeriods?: TimePeriodUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutMarksheetsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutMarksheetsInput, SubjectUncheckedCreateWithoutMarksheetsInput>
  }

  export type MarksSheetMasterUpsertWithoutSubjectsInput = {
    update: XOR<MarksSheetMasterUpdateWithoutSubjectsInput, MarksSheetMasterUncheckedUpdateWithoutSubjectsInput>
    create: XOR<MarksSheetMasterCreateWithoutSubjectsInput, MarksSheetMasterUncheckedCreateWithoutSubjectsInput>
    where?: MarksSheetMasterWhereInput
  }

  export type MarksSheetMasterUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: MarksSheetMasterWhereInput
    data: XOR<MarksSheetMasterUpdateWithoutSubjectsInput, MarksSheetMasterUncheckedUpdateWithoutSubjectsInput>
  }

  export type MarksSheetMasterUpdateWithoutSubjectsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutMarksheetsNestedInput
    section?: SectionUpdateOneRequiredWithoutMarksheetsNestedInput
  }

  export type MarksSheetMasterUncheckedUpdateWithoutSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUpsertWithoutMarksheetsInput = {
    update: XOR<SubjectUpdateWithoutMarksheetsInput, SubjectUncheckedUpdateWithoutMarksheetsInput>
    create: XOR<SubjectCreateWithoutMarksheetsInput, SubjectUncheckedCreateWithoutMarksheetsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutMarksheetsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutMarksheetsInput, SubjectUncheckedUpdateWithoutMarksheetsInput>
  }

  export type SubjectUpdateWithoutMarksheetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutSubjectsNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutMarksheetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SectionCreateManyClassInput = {
    id?: number
    name: string
  }

  export type StudentCreateManyClassInput = {
    id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    genderId?: number | null
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    sectionId: number
  }

  export type SubjectCreateManyClassInput = {
    id?: number
    name: string
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TimePeriodCreateManyClassInput = {
    id?: number
    periodName: string
    subjectId: number
    sectionId: number
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    teacherId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeeStructureCreateManyClassInput = {
    id?: number
    academicYear: string
    numberOfTerms: number
    isActive?: boolean
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarksSheetMasterCreateManyClassInput = {
    id?: number
    sectionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionUpdateWithoutClassInput = {
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutSectionNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutSectionNestedInput
    marksheets?: MarksSheetMasterUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutSectionNestedInput
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutSectionNestedInput
    marksheets?: MarksSheetMasterUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUpdateWithoutClassInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gender?: MasterDropdownUpdateOneWithoutStudentsNestedInput
    section?: SectionUpdateOneRequiredWithoutStudentsNestedInput
    feeDetails?: FeeDetailsUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sectionId?: IntFieldUpdateOperationsInput | number
    feeDetails?: FeeDetailsUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sectionId?: IntFieldUpdateOperationsInput | number
  }

  export type SubjectUpdateWithoutClassInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timePeriods?: TimePeriodUpdateManyWithoutSubjectNestedInput
    marksheets?: MarksSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutSubjectNestedInput
    marksheets?: MarksSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimePeriodUpdateWithoutClassInput = {
    periodName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutTimePeriodsNestedInput
    section?: SectionUpdateOneRequiredWithoutTimePeriodsNestedInput
    assignedTeacher?: StaffUpdateOneRequiredWithoutTimePeriodsNestedInput
  }

  export type TimePeriodUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodName?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimePeriodUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodName?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeStructureUpdateWithoutClassInput = {
    academicYear?: StringFieldUpdateOperationsInput | string
    numberOfTerms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feeItems?: FeeItemUpdateManyWithoutFeeStructureNestedInput
  }

  export type FeeStructureUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    academicYear?: StringFieldUpdateOperationsInput | string
    numberOfTerms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feeItems?: FeeItemUncheckedUpdateManyWithoutFeeStructureNestedInput
  }

  export type FeeStructureUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    academicYear?: StringFieldUpdateOperationsInput | string
    numberOfTerms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarksSheetMasterUpdateWithoutClassInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    section?: SectionUpdateOneRequiredWithoutMarksheetsNestedInput
    subjects?: MarksSubjectUpdateManyWithoutMarksheetNestedInput
  }

  export type MarksSheetMasterUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: MarksSubjectUncheckedUpdateManyWithoutMarksheetNestedInput
  }

  export type MarksSheetMasterUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateManySectionInput = {
    id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    genderId?: number | null
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    classId: number
  }

  export type TimePeriodCreateManySectionInput = {
    id?: number
    periodName: string
    subjectId: number
    classId: number
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    teacherId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarksSheetMasterCreateManySectionInput = {
    id?: number
    classId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentUpdateWithoutSectionInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gender?: MasterDropdownUpdateOneWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    feeDetails?: FeeDetailsUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutSectionInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    classId?: IntFieldUpdateOperationsInput | number
    feeDetails?: FeeDetailsUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutSectionInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type TimePeriodUpdateWithoutSectionInput = {
    periodName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutTimePeriodsNestedInput
    class?: ClassUpdateOneRequiredWithoutTimePeriodsNestedInput
    assignedTeacher?: StaffUpdateOneRequiredWithoutTimePeriodsNestedInput
  }

  export type TimePeriodUncheckedUpdateWithoutSectionInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodName?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimePeriodUncheckedUpdateManyWithoutSectionInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodName?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarksSheetMasterUpdateWithoutSectionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutMarksheetsNestedInput
    subjects?: MarksSubjectUpdateManyWithoutMarksheetNestedInput
  }

  export type MarksSheetMasterUncheckedUpdateWithoutSectionInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: MarksSubjectUncheckedUpdateManyWithoutMarksheetNestedInput
  }

  export type MarksSheetMasterUncheckedUpdateManyWithoutSectionInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TermCreateManyFeeDetailInput = {
    id?: number
    termNumber: number
    amount: number
    dueDate: Date | string
    isPaid: boolean
  }

  export type TermUpdateWithoutFeeDetailInput = {
    termNumber?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TermUncheckedUpdateWithoutFeeDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    termNumber?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TermUncheckedUpdateManyWithoutFeeDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    termNumber?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TimePeriodCreateManySubjectInput = {
    id?: number
    periodName: string
    classId: number
    sectionId: number
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    teacherId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarksSubjectCreateManySubjectInput = {
    id?: number
    marksheetId: number
    maxMarks: number
    passMarks: number
    remark?: string | null
  }

  export type TimePeriodUpdateWithoutSubjectInput = {
    periodName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutTimePeriodsNestedInput
    section?: SectionUpdateOneRequiredWithoutTimePeriodsNestedInput
    assignedTeacher?: StaffUpdateOneRequiredWithoutTimePeriodsNestedInput
  }

  export type TimePeriodUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodName?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimePeriodUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodName?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarksSubjectUpdateWithoutSubjectInput = {
    maxMarks?: IntFieldUpdateOperationsInput | number
    passMarks?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    marksheet?: MarksSheetMasterUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type MarksSubjectUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    marksheetId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
    passMarks?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarksSubjectUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    marksheetId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
    passMarks?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentCreateManyGenderInput = {
    id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    fatherName?: string | null
    motherName?: string | null
    fatherOccupation?: string | null
    motherOccupation?: string | null
    mobileNumber?: string | null
    motherMobileNumber?: string | null
    fatherEmail?: string | null
    address?: string | null
    isTransportRequired?: boolean | null
    classId: number
    sectionId: number
  }

  export type StaffCreateManyGenderInput = {
    id?: number
    firstName: string
    lastName: string
    qualificationId?: number | null
    departmentId?: number | null
    designationId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCreateManyQualificationInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    departmentId?: number | null
    designationId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCreateManyDepartmentInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    qualificationId?: number | null
    designationId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCreateManyDesignationInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    qualificationId?: number | null
    departmentId?: number | null
    staffTypeId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCreateManyStaffTypeInput = {
    id?: number
    firstName: string
    lastName: string
    genderId?: number | null
    qualificationId?: number | null
    departmentId?: number | null
    designationId?: number | null
    experience?: string | null
    mobileNumber?: string | null
    email?: string | null
    username: string
    password: string
    salary?: number | null
    isActive?: boolean
    isTransportRequired?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeeItemCreateManyFeeTypeInput = {
    id?: number
    feeStructureId: number
    feeName: string
    amount: number
    description?: string | null
  }

  export type StudentUpdateWithoutGenderInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    section?: SectionUpdateOneRequiredWithoutStudentsNestedInput
    feeDetails?: FeeDetailsUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutGenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    feeDetails?: FeeDetailsUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutGenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    fatherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    motherOccupation?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    motherMobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fatherEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
  }

  export type StaffUpdateWithoutGenderInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualification?: MasterDropdownUpdateOneWithoutQualificationStaffNestedInput
    department?: MasterDropdownUpdateOneWithoutDepartmentStaffNestedInput
    designation?: MasterDropdownUpdateOneWithoutDesignationStaffNestedInput
    staffType?: MasterDropdownUpdateOneWithoutStaffTypeStaffNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateWithoutGenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateManyWithoutGenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUpdateWithoutQualificationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: MasterDropdownUpdateOneWithoutGenderStaffNestedInput
    department?: MasterDropdownUpdateOneWithoutDepartmentStaffNestedInput
    designation?: MasterDropdownUpdateOneWithoutDesignationStaffNestedInput
    staffType?: MasterDropdownUpdateOneWithoutStaffTypeStaffNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateWithoutQualificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateManyWithoutQualificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUpdateWithoutDepartmentInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: MasterDropdownUpdateOneWithoutGenderStaffNestedInput
    qualification?: MasterDropdownUpdateOneWithoutQualificationStaffNestedInput
    designation?: MasterDropdownUpdateOneWithoutDesignationStaffNestedInput
    staffType?: MasterDropdownUpdateOneWithoutStaffTypeStaffNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUpdateWithoutDesignationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: MasterDropdownUpdateOneWithoutGenderStaffNestedInput
    qualification?: MasterDropdownUpdateOneWithoutQualificationStaffNestedInput
    department?: MasterDropdownUpdateOneWithoutDepartmentStaffNestedInput
    staffType?: MasterDropdownUpdateOneWithoutStaffTypeStaffNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateWithoutDesignationInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateManyWithoutDesignationInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    staffTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUpdateWithoutStaffTypeInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: MasterDropdownUpdateOneWithoutGenderStaffNestedInput
    qualification?: MasterDropdownUpdateOneWithoutQualificationStaffNestedInput
    department?: MasterDropdownUpdateOneWithoutDepartmentStaffNestedInput
    designation?: MasterDropdownUpdateOneWithoutDesignationStaffNestedInput
    timePeriods?: TimePeriodUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateWithoutStaffTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timePeriods?: TimePeriodUncheckedUpdateManyWithoutAssignedTeacherNestedInput
  }

  export type StaffUncheckedUpdateManyWithoutStaffTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    genderId?: NullableIntFieldUpdateOperationsInput | number | null
    qualificationId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    designationId?: NullableIntFieldUpdateOperationsInput | number | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isTransportRequired?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeItemUpdateWithoutFeeTypeInput = {
    feeName?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    feeStructure?: FeeStructureUpdateOneRequiredWithoutFeeItemsNestedInput
  }

  export type FeeItemUncheckedUpdateWithoutFeeTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeStructureId?: IntFieldUpdateOperationsInput | number
    feeName?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeeItemUncheckedUpdateManyWithoutFeeTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeStructureId?: IntFieldUpdateOperationsInput | number
    feeName?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TimePeriodCreateManyAssignedTeacherInput = {
    id?: number
    periodName: string
    subjectId: number
    classId: number
    sectionId: number
    startDate: Date | string
    endDate: Date | string
    startTime: string
    endTime: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TimePeriodUpdateWithoutAssignedTeacherInput = {
    periodName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutTimePeriodsNestedInput
    class?: ClassUpdateOneRequiredWithoutTimePeriodsNestedInput
    section?: SectionUpdateOneRequiredWithoutTimePeriodsNestedInput
  }

  export type TimePeriodUncheckedUpdateWithoutAssignedTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodName?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimePeriodUncheckedUpdateManyWithoutAssignedTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodName?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeItemCreateManyFeeStructureInput = {
    id?: number
    feeTypeId: number
    feeName: string
    amount: number
    description?: string | null
  }

  export type FeeItemUpdateWithoutFeeStructureInput = {
    feeName?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    feeType?: MasterDropdownUpdateOneRequiredWithoutFeeItemsNestedInput
  }

  export type FeeItemUncheckedUpdateWithoutFeeStructureInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeTypeId?: IntFieldUpdateOperationsInput | number
    feeName?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeeItemUncheckedUpdateManyWithoutFeeStructureInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeTypeId?: IntFieldUpdateOperationsInput | number
    feeName?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarksSubjectCreateManyMarksheetInput = {
    id?: number
    subjectId: number
    maxMarks: number
    passMarks: number
    remark?: string | null
  }

  export type MarksSubjectUpdateWithoutMarksheetInput = {
    maxMarks?: IntFieldUpdateOperationsInput | number
    passMarks?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: SubjectUpdateOneRequiredWithoutMarksheetsNestedInput
  }

  export type MarksSubjectUncheckedUpdateWithoutMarksheetInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
    passMarks?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarksSubjectUncheckedUpdateManyWithoutMarksheetInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
    passMarks?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}